
CR_RF-OFB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d500  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800d640  0800d640  0000e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd9c  0800dd9c  0000f0c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd9c  0800dd9c  0000ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dda4  0800dda4  0000f0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dda4  0800dda4  0000eda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dda8  0800dda8  0000eda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800ddac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200000c4  0800de70  0000f0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800de70  0000f6dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223c7  00000000  00000000  0000f0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005428  00000000  00000000  000314b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  000368e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f0  00000000  00000000  00038758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241fd  00000000  00000000  00039e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233ea  00000000  00000000  0005e045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce45  00000000  00000000  0008142f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000835c  00000000  00000000  0014e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d0  00000000  00000000  00156614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000c4 	.word	0x200000c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d628 	.word	0x0800d628

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000c8 	.word	0x200000c8
 800017c:	0800d628 	.word	0x0800d628

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_d2f>:
 80007fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000804:	bf24      	itt	cs
 8000806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800080a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800080e:	d90d      	bls.n	800082c <__aeabi_d2f+0x30>
 8000810:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800081c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000824:	bf08      	it	eq
 8000826:	f020 0001 	biceq.w	r0, r0, #1
 800082a:	4770      	bx	lr
 800082c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000830:	d121      	bne.n	8000876 <__aeabi_d2f+0x7a>
 8000832:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000836:	bfbc      	itt	lt
 8000838:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800083c:	4770      	bxlt	lr
 800083e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000842:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000846:	f1c2 0218 	rsb	r2, r2, #24
 800084a:	f1c2 0c20 	rsb	ip, r2, #32
 800084e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000852:	fa20 f002 	lsr.w	r0, r0, r2
 8000856:	bf18      	it	ne
 8000858:	f040 0001 	orrne.w	r0, r0, #1
 800085c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000864:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000868:	ea40 000c 	orr.w	r0, r0, ip
 800086c:	fa23 f302 	lsr.w	r3, r3, r2
 8000870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000874:	e7cc      	b.n	8000810 <__aeabi_d2f+0x14>
 8000876:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800087a:	d107      	bne.n	800088c <__aeabi_d2f+0x90>
 800087c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000880:	bf1e      	ittt	ne
 8000882:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000886:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800088a:	4770      	bxne	lr
 800088c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000890:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000894:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_frsub>:
 800089c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	e002      	b.n	80008a8 <__addsf3>
 80008a2:	bf00      	nop

080008a4 <__aeabi_fsub>:
 80008a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080008a8 <__addsf3>:
 80008a8:	0042      	lsls	r2, r0, #1
 80008aa:	bf1f      	itttt	ne
 80008ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008b0:	ea92 0f03 	teqne	r2, r3
 80008b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008bc:	d06a      	beq.n	8000994 <__addsf3+0xec>
 80008be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008c6:	bfc1      	itttt	gt
 80008c8:	18d2      	addgt	r2, r2, r3
 80008ca:	4041      	eorgt	r1, r0
 80008cc:	4048      	eorgt	r0, r1
 80008ce:	4041      	eorgt	r1, r0
 80008d0:	bfb8      	it	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	2b19      	cmp	r3, #25
 80008d6:	bf88      	it	hi
 80008d8:	4770      	bxhi	lr
 80008da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80008de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80008f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80008f6:	bf18      	it	ne
 80008f8:	4249      	negne	r1, r1
 80008fa:	ea92 0f03 	teq	r2, r3
 80008fe:	d03f      	beq.n	8000980 <__addsf3+0xd8>
 8000900:	f1a2 0201 	sub.w	r2, r2, #1
 8000904:	fa41 fc03 	asr.w	ip, r1, r3
 8000908:	eb10 000c 	adds.w	r0, r0, ip
 800090c:	f1c3 0320 	rsb	r3, r3, #32
 8000910:	fa01 f103 	lsl.w	r1, r1, r3
 8000914:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000918:	d502      	bpl.n	8000920 <__addsf3+0x78>
 800091a:	4249      	negs	r1, r1
 800091c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000920:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000924:	d313      	bcc.n	800094e <__addsf3+0xa6>
 8000926:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800092a:	d306      	bcc.n	800093a <__addsf3+0x92>
 800092c:	0840      	lsrs	r0, r0, #1
 800092e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000932:	f102 0201 	add.w	r2, r2, #1
 8000936:	2afe      	cmp	r2, #254	@ 0xfe
 8000938:	d251      	bcs.n	80009de <__addsf3+0x136>
 800093a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800093e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000942:	bf08      	it	eq
 8000944:	f020 0001 	biceq.w	r0, r0, #1
 8000948:	ea40 0003 	orr.w	r0, r0, r3
 800094c:	4770      	bx	lr
 800094e:	0049      	lsls	r1, r1, #1
 8000950:	eb40 0000 	adc.w	r0, r0, r0
 8000954:	3a01      	subs	r2, #1
 8000956:	bf28      	it	cs
 8000958:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800095c:	d2ed      	bcs.n	800093a <__addsf3+0x92>
 800095e:	fab0 fc80 	clz	ip, r0
 8000962:	f1ac 0c08 	sub.w	ip, ip, #8
 8000966:	ebb2 020c 	subs.w	r2, r2, ip
 800096a:	fa00 f00c 	lsl.w	r0, r0, ip
 800096e:	bfaa      	itet	ge
 8000970:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000974:	4252      	neglt	r2, r2
 8000976:	4318      	orrge	r0, r3
 8000978:	bfbc      	itt	lt
 800097a:	40d0      	lsrlt	r0, r2
 800097c:	4318      	orrlt	r0, r3
 800097e:	4770      	bx	lr
 8000980:	f092 0f00 	teq	r2, #0
 8000984:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000988:	bf06      	itte	eq
 800098a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800098e:	3201      	addeq	r2, #1
 8000990:	3b01      	subne	r3, #1
 8000992:	e7b5      	b.n	8000900 <__addsf3+0x58>
 8000994:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000998:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800099c:	bf18      	it	ne
 800099e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a2:	d021      	beq.n	80009e8 <__addsf3+0x140>
 80009a4:	ea92 0f03 	teq	r2, r3
 80009a8:	d004      	beq.n	80009b4 <__addsf3+0x10c>
 80009aa:	f092 0f00 	teq	r2, #0
 80009ae:	bf08      	it	eq
 80009b0:	4608      	moveq	r0, r1
 80009b2:	4770      	bx	lr
 80009b4:	ea90 0f01 	teq	r0, r1
 80009b8:	bf1c      	itt	ne
 80009ba:	2000      	movne	r0, #0
 80009bc:	4770      	bxne	lr
 80009be:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009c2:	d104      	bne.n	80009ce <__addsf3+0x126>
 80009c4:	0040      	lsls	r0, r0, #1
 80009c6:	bf28      	it	cs
 80009c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80009d2:	bf3c      	itt	cc
 80009d4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bxcc	lr
 80009da:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009de:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80009e2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e6:	4770      	bx	lr
 80009e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009ec:	bf16      	itet	ne
 80009ee:	4608      	movne	r0, r1
 80009f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009f4:	4601      	movne	r1, r0
 80009f6:	0242      	lsls	r2, r0, #9
 80009f8:	bf06      	itte	eq
 80009fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009fe:	ea90 0f01 	teqeq	r0, r1
 8000a02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a06:	4770      	bx	lr

08000a08 <__aeabi_ui2f>:
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e004      	b.n	8000a18 <__aeabi_i2f+0x8>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_i2f>:
 8000a10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a14:	bf48      	it	mi
 8000a16:	4240      	negmi	r0, r0
 8000a18:	ea5f 0c00 	movs.w	ip, r0
 8000a1c:	bf08      	it	eq
 8000a1e:	4770      	bxeq	lr
 8000a20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a24:	4601      	mov	r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	e01c      	b.n	8000a66 <__aeabi_l2f+0x2a>

08000a2c <__aeabi_ul2f>:
 8000a2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a30:	bf08      	it	eq
 8000a32:	4770      	bxeq	lr
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	e00a      	b.n	8000a50 <__aeabi_l2f+0x14>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_l2f>:
 8000a3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a40:	bf08      	it	eq
 8000a42:	4770      	bxeq	lr
 8000a44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__aeabi_l2f+0x14>
 8000a4a:	4240      	negs	r0, r0
 8000a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a50:	ea5f 0c01 	movs.w	ip, r1
 8000a54:	bf02      	ittt	eq
 8000a56:	4684      	moveq	ip, r0
 8000a58:	4601      	moveq	r1, r0
 8000a5a:	2000      	moveq	r0, #0
 8000a5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a60:	bf08      	it	eq
 8000a62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a6a:	fabc f28c 	clz	r2, ip
 8000a6e:	3a08      	subs	r2, #8
 8000a70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a74:	db10      	blt.n	8000a98 <__aeabi_l2f+0x5c>
 8000a76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a7a:	4463      	add	r3, ip
 8000a7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a80:	f1c2 0220 	rsb	r2, r2, #32
 8000a84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a88:	fa20 f202 	lsr.w	r2, r0, r2
 8000a8c:	eb43 0002 	adc.w	r0, r3, r2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f102 0220 	add.w	r2, r2, #32
 8000a9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aa0:	f1c2 0220 	rsb	r2, r2, #32
 8000aa4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000aa8:	fa21 f202 	lsr.w	r2, r1, r2
 8000aac:	eb43 0002 	adc.w	r0, r3, r2
 8000ab0:	bf08      	it	eq
 8000ab2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_fmul>:
 8000ab8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac6:	ea92 0f0c 	teqne	r2, ip
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d06f      	beq.n	8000bb0 <__aeabi_fmul+0xf8>
 8000ad0:	441a      	add	r2, r3
 8000ad2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad6:	0240      	lsls	r0, r0, #9
 8000ad8:	bf18      	it	ne
 8000ada:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ade:	d01e      	beq.n	8000b1e <__aeabi_fmul+0x66>
 8000ae0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ae4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ae8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000aec:	fba0 3101 	umull	r3, r1, r0, r1
 8000af0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000af4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000af8:	bf3e      	ittt	cc
 8000afa:	0049      	lslcc	r1, r1, #1
 8000afc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b00:	005b      	lslcc	r3, r3, #1
 8000b02:	ea40 0001 	orr.w	r0, r0, r1
 8000b06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b0c:	d81d      	bhi.n	8000b4a <__aeabi_fmul+0x92>
 8000b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b16:	bf08      	it	eq
 8000b18:	f020 0001 	biceq.w	r0, r0, #1
 8000b1c:	4770      	bx	lr
 8000b1e:	f090 0f00 	teq	r0, #0
 8000b22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b26:	bf08      	it	eq
 8000b28:	0249      	lsleq	r1, r1, #9
 8000b2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b32:	3a7f      	subs	r2, #127	@ 0x7f
 8000b34:	bfc2      	ittt	gt
 8000b36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b3e:	4770      	bxgt	lr
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	dc5d      	bgt.n	8000c08 <__aeabi_fmul+0x150>
 8000b4c:	f112 0f19 	cmn.w	r2, #25
 8000b50:	bfdc      	itt	le
 8000b52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bxle	lr
 8000b58:	f1c2 0200 	rsb	r2, r2, #0
 8000b5c:	0041      	lsls	r1, r0, #1
 8000b5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b62:	f1c2 0220 	rsb	r2, r2, #32
 8000b66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b6e:	f140 0000 	adc.w	r0, r0, #0
 8000b72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b76:	bf08      	it	eq
 8000b78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7c:	4770      	bx	lr
 8000b7e:	f092 0f00 	teq	r2, #0
 8000b82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b86:	bf02      	ittt	eq
 8000b88:	0040      	lsleq	r0, r0, #1
 8000b8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b8e:	3a01      	subeq	r2, #1
 8000b90:	d0f9      	beq.n	8000b86 <__aeabi_fmul+0xce>
 8000b92:	ea40 000c 	orr.w	r0, r0, ip
 8000b96:	f093 0f00 	teq	r3, #0
 8000b9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b9e:	bf02      	ittt	eq
 8000ba0:	0049      	lsleq	r1, r1, #1
 8000ba2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ba6:	3b01      	subeq	r3, #1
 8000ba8:	d0f9      	beq.n	8000b9e <__aeabi_fmul+0xe6>
 8000baa:	ea41 010c 	orr.w	r1, r1, ip
 8000bae:	e78f      	b.n	8000ad0 <__aeabi_fmul+0x18>
 8000bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bb4:	ea92 0f0c 	teq	r2, ip
 8000bb8:	bf18      	it	ne
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d00a      	beq.n	8000bd6 <__aeabi_fmul+0x11e>
 8000bc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bc4:	bf18      	it	ne
 8000bc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	d1d8      	bne.n	8000b7e <__aeabi_fmul+0xc6>
 8000bcc:	ea80 0001 	eor.w	r0, r0, r1
 8000bd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f090 0f00 	teq	r0, #0
 8000bda:	bf17      	itett	ne
 8000bdc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000be0:	4608      	moveq	r0, r1
 8000be2:	f091 0f00 	teqne	r1, #0
 8000be6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bea:	d014      	beq.n	8000c16 <__aeabi_fmul+0x15e>
 8000bec:	ea92 0f0c 	teq	r2, ip
 8000bf0:	d101      	bne.n	8000bf6 <__aeabi_fmul+0x13e>
 8000bf2:	0242      	lsls	r2, r0, #9
 8000bf4:	d10f      	bne.n	8000c16 <__aeabi_fmul+0x15e>
 8000bf6:	ea93 0f0c 	teq	r3, ip
 8000bfa:	d103      	bne.n	8000c04 <__aeabi_fmul+0x14c>
 8000bfc:	024b      	lsls	r3, r1, #9
 8000bfe:	bf18      	it	ne
 8000c00:	4608      	movne	r0, r1
 8000c02:	d108      	bne.n	8000c16 <__aeabi_fmul+0x15e>
 8000c04:	ea80 0001 	eor.w	r0, r0, r1
 8000c08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_fdiv>:
 8000c20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c28:	bf1e      	ittt	ne
 8000c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c2e:	ea92 0f0c 	teqne	r2, ip
 8000c32:	ea93 0f0c 	teqne	r3, ip
 8000c36:	d069      	beq.n	8000d0c <__aeabi_fdiv+0xec>
 8000c38:	eba2 0203 	sub.w	r2, r2, r3
 8000c3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c40:	0249      	lsls	r1, r1, #9
 8000c42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c46:	d037      	beq.n	8000cb8 <__aeabi_fdiv+0x98>
 8000c48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	bf38      	it	cc
 8000c5c:	005b      	lslcc	r3, r3, #1
 8000c5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c66:	428b      	cmp	r3, r1
 8000c68:	bf24      	itt	cs
 8000c6a:	1a5b      	subcs	r3, r3, r1
 8000c6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c74:	bf24      	itt	cs
 8000c76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c82:	bf24      	itt	cs
 8000c84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c90:	bf24      	itt	cs
 8000c92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	bf18      	it	ne
 8000c9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ca2:	d1e0      	bne.n	8000c66 <__aeabi_fdiv+0x46>
 8000ca4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ca6:	f63f af50 	bhi.w	8000b4a <__aeabi_fmul+0x92>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc0:	327f      	adds	r2, #127	@ 0x7f
 8000cc2:	bfc2      	ittt	gt
 8000cc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ccc:	4770      	bxgt	lr
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	3a01      	subs	r2, #1
 8000cd8:	e737      	b.n	8000b4a <__aeabi_fmul+0x92>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ce2:	bf02      	ittt	eq
 8000ce4:	0040      	lsleq	r0, r0, #1
 8000ce6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cea:	3a01      	subeq	r2, #1
 8000cec:	d0f9      	beq.n	8000ce2 <__aeabi_fdiv+0xc2>
 8000cee:	ea40 000c 	orr.w	r0, r0, ip
 8000cf2:	f093 0f00 	teq	r3, #0
 8000cf6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	bf02      	ittt	eq
 8000cfc:	0049      	lsleq	r1, r1, #1
 8000cfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d02:	3b01      	subeq	r3, #1
 8000d04:	d0f9      	beq.n	8000cfa <__aeabi_fdiv+0xda>
 8000d06:	ea41 010c 	orr.w	r1, r1, ip
 8000d0a:	e795      	b.n	8000c38 <__aeabi_fdiv+0x18>
 8000d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d10:	ea92 0f0c 	teq	r2, ip
 8000d14:	d108      	bne.n	8000d28 <__aeabi_fdiv+0x108>
 8000d16:	0242      	lsls	r2, r0, #9
 8000d18:	f47f af7d 	bne.w	8000c16 <__aeabi_fmul+0x15e>
 8000d1c:	ea93 0f0c 	teq	r3, ip
 8000d20:	f47f af70 	bne.w	8000c04 <__aeabi_fmul+0x14c>
 8000d24:	4608      	mov	r0, r1
 8000d26:	e776      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d28:	ea93 0f0c 	teq	r3, ip
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_fdiv+0x118>
 8000d2e:	024b      	lsls	r3, r1, #9
 8000d30:	f43f af4c 	beq.w	8000bcc <__aeabi_fmul+0x114>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e76e      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d3c:	bf18      	it	ne
 8000d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d42:	d1ca      	bne.n	8000cda <__aeabi_fdiv+0xba>
 8000d44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d48:	f47f af5c 	bne.w	8000c04 <__aeabi_fmul+0x14c>
 8000d4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	f47f af3c 	bne.w	8000bcc <__aeabi_fmul+0x114>
 8000d54:	e75f      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d56:	bf00      	nop

08000d58 <__aeabi_f2iz>:
 8000d58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d60:	d30f      	bcc.n	8000d82 <__aeabi_f2iz+0x2a>
 8000d62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6a:	d90d      	bls.n	8000d88 <__aeabi_f2iz+0x30>
 8000d6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d74:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	bf18      	it	ne
 8000d7e:	4240      	negne	r0, r0
 8000d80:	4770      	bx	lr
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	4770      	bx	lr
 8000d88:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_f2iz+0x3a>
 8000d8e:	0242      	lsls	r2, r0, #9
 8000d90:	d105      	bne.n	8000d9e <__aeabi_f2iz+0x46>
 8000d92:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d96:	bf08      	it	eq
 8000d98:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_uldivmod>:
 8000de4:	b953      	cbnz	r3, 8000dfc <__aeabi_uldivmod+0x18>
 8000de6:	b94a      	cbnz	r2, 8000dfc <__aeabi_uldivmod+0x18>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bf08      	it	eq
 8000dec:	2800      	cmpeq	r0, #0
 8000dee:	bf1c      	itt	ne
 8000df0:	f04f 31ff 	movne.w	r1, #4294967295
 8000df4:	f04f 30ff 	movne.w	r0, #4294967295
 8000df8:	f000 b988 	b.w	800110c <__aeabi_idiv0>
 8000dfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e04:	f000 f806 	bl	8000e14 <__udivmoddi4>
 8000e08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e10:	b004      	add	sp, #16
 8000e12:	4770      	bx	lr

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	468e      	mov	lr, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	4688      	mov	r8, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4617      	mov	r7, r2
 8000e28:	d962      	bls.n	8000ef0 <__udivmoddi4+0xdc>
 8000e2a:	fab2 f682 	clz	r6, r2
 8000e2e:	b14e      	cbz	r6, 8000e44 <__udivmoddi4+0x30>
 8000e30:	f1c6 0320 	rsb	r3, r6, #32
 8000e34:	fa01 f806 	lsl.w	r8, r1, r6
 8000e38:	fa20 f303 	lsr.w	r3, r0, r3
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	ea43 0808 	orr.w	r8, r3, r8
 8000e42:	40b4      	lsls	r4, r6
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	fa1f fc87 	uxth.w	ip, r7
 8000e4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d909      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e68:	f080 80ea 	bcs.w	8001040 <__udivmoddi4+0x22c>
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f240 80e7 	bls.w	8001040 <__udivmoddi4+0x22c>
 8000e72:	3902      	subs	r1, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	1a9a      	subs	r2, r3, r2
 8000e78:	b2a3      	uxth	r3, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e8a:	459c      	cmp	ip, r3
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x8e>
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	f080 80d6 	bcs.w	8001044 <__udivmoddi4+0x230>
 8000e98:	459c      	cmp	ip, r3
 8000e9a:	f240 80d3 	bls.w	8001044 <__udivmoddi4+0x230>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea6:	eba3 030c 	sub.w	r3, r3, ip
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11d      	cbz	r5, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40f3      	lsrs	r3, r6
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d905      	bls.n	8000eca <__udivmoddi4+0xb6>
 8000ebe:	b10d      	cbz	r5, 8000ec4 <__udivmoddi4+0xb0>
 8000ec0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e7f5      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000eca:	fab3 f183 	clz	r1, r3
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d146      	bne.n	8000f60 <__udivmoddi4+0x14c>
 8000ed2:	4573      	cmp	r3, lr
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0xc8>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 8105 	bhi.w	80010e6 <__udivmoddi4+0x2d2>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	4690      	mov	r8, r2
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0e5      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000eea:	e9c5 4800 	strd	r4, r8, [r5]
 8000eee:	e7e2      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	f000 8090 	beq.w	8001016 <__udivmoddi4+0x202>
 8000ef6:	fab2 f682 	clz	r6, r2
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	f040 80a4 	bne.w	8001048 <__udivmoddi4+0x234>
 8000f00:	1a8a      	subs	r2, r1, r2
 8000f02:	0c03      	lsrs	r3, r0, #16
 8000f04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f08:	b280      	uxth	r0, r0
 8000f0a:	b2bc      	uxth	r4, r7
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x11e>
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x11c>
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	f200 80e0 	bhi.w	80010f0 <__udivmoddi4+0x2dc>
 8000f30:	46c4      	mov	ip, r8
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f40:	fb02 f404 	mul.w	r4, r2, r4
 8000f44:	429c      	cmp	r4, r3
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x144>
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x142>
 8000f50:	429c      	cmp	r4, r3
 8000f52:	f200 80ca 	bhi.w	80010ea <__udivmoddi4+0x2d6>
 8000f56:	4602      	mov	r2, r0
 8000f58:	1b1b      	subs	r3, r3, r4
 8000f5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f5e:	e7a5      	b.n	8000eac <__udivmoddi4+0x98>
 8000f60:	f1c1 0620 	rsb	r6, r1, #32
 8000f64:	408b      	lsls	r3, r1
 8000f66:	fa22 f706 	lsr.w	r7, r2, r6
 8000f6a:	431f      	orrs	r7, r3
 8000f6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f70:	fa20 f306 	lsr.w	r3, r0, r6
 8000f74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f7c:	4323      	orrs	r3, r4
 8000f7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f82:	fa1f fc87 	uxth.w	ip, r7
 8000f86:	fbbe f0f9 	udiv	r0, lr, r9
 8000f8a:	0c1c      	lsrs	r4, r3, #16
 8000f8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f9e:	d909      	bls.n	8000fb4 <__udivmoddi4+0x1a0>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fa6:	f080 809c 	bcs.w	80010e2 <__udivmoddi4+0x2ce>
 8000faa:	45a6      	cmp	lr, r4
 8000fac:	f240 8099 	bls.w	80010e2 <__udivmoddi4+0x2ce>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	eba4 040e 	sub.w	r4, r4, lr
 8000fb8:	fa1f fe83 	uxth.w	lr, r3
 8000fbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fcc:	45a4      	cmp	ip, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x1ce>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fd6:	f080 8082 	bcs.w	80010de <__udivmoddi4+0x2ca>
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d97f      	bls.n	80010de <__udivmoddi4+0x2ca>
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	443c      	add	r4, r7
 8000fe2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fe6:	eba4 040c 	sub.w	r4, r4, ip
 8000fea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fee:	4564      	cmp	r4, ip
 8000ff0:	4673      	mov	r3, lr
 8000ff2:	46e1      	mov	r9, ip
 8000ff4:	d362      	bcc.n	80010bc <__udivmoddi4+0x2a8>
 8000ff6:	d05f      	beq.n	80010b8 <__udivmoddi4+0x2a4>
 8000ff8:	b15d      	cbz	r5, 8001012 <__udivmoddi4+0x1fe>
 8000ffa:	ebb8 0203 	subs.w	r2, r8, r3
 8000ffe:	eb64 0409 	sbc.w	r4, r4, r9
 8001002:	fa04 f606 	lsl.w	r6, r4, r6
 8001006:	fa22 f301 	lsr.w	r3, r2, r1
 800100a:	431e      	orrs	r6, r3
 800100c:	40cc      	lsrs	r4, r1
 800100e:	e9c5 6400 	strd	r6, r4, [r5]
 8001012:	2100      	movs	r1, #0
 8001014:	e74f      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8001016:	fbb1 fcf2 	udiv	ip, r1, r2
 800101a:	0c01      	lsrs	r1, r0, #16
 800101c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001020:	b280      	uxth	r0, r0
 8001022:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001026:	463b      	mov	r3, r7
 8001028:	4638      	mov	r0, r7
 800102a:	463c      	mov	r4, r7
 800102c:	46b8      	mov	r8, r7
 800102e:	46be      	mov	lr, r7
 8001030:	2620      	movs	r6, #32
 8001032:	fbb1 f1f7 	udiv	r1, r1, r7
 8001036:	eba2 0208 	sub.w	r2, r2, r8
 800103a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800103e:	e766      	b.n	8000f0e <__udivmoddi4+0xfa>
 8001040:	4601      	mov	r1, r0
 8001042:	e718      	b.n	8000e76 <__udivmoddi4+0x62>
 8001044:	4610      	mov	r0, r2
 8001046:	e72c      	b.n	8000ea2 <__udivmoddi4+0x8e>
 8001048:	f1c6 0220 	rsb	r2, r6, #32
 800104c:	fa2e f302 	lsr.w	r3, lr, r2
 8001050:	40b7      	lsls	r7, r6
 8001052:	40b1      	lsls	r1, r6
 8001054:	fa20 f202 	lsr.w	r2, r0, r2
 8001058:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800105c:	430a      	orrs	r2, r1
 800105e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001062:	b2bc      	uxth	r4, r7
 8001064:	fb0e 3318 	mls	r3, lr, r8, r3
 8001068:	0c11      	lsrs	r1, r2, #16
 800106a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800106e:	fb08 f904 	mul.w	r9, r8, r4
 8001072:	40b0      	lsls	r0, r6
 8001074:	4589      	cmp	r9, r1
 8001076:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800107a:	b280      	uxth	r0, r0
 800107c:	d93e      	bls.n	80010fc <__udivmoddi4+0x2e8>
 800107e:	1879      	adds	r1, r7, r1
 8001080:	f108 3cff 	add.w	ip, r8, #4294967295
 8001084:	d201      	bcs.n	800108a <__udivmoddi4+0x276>
 8001086:	4589      	cmp	r9, r1
 8001088:	d81f      	bhi.n	80010ca <__udivmoddi4+0x2b6>
 800108a:	eba1 0109 	sub.w	r1, r1, r9
 800108e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001092:	fb09 f804 	mul.w	r8, r9, r4
 8001096:	fb0e 1119 	mls	r1, lr, r9, r1
 800109a:	b292      	uxth	r2, r2
 800109c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a0:	4542      	cmp	r2, r8
 80010a2:	d229      	bcs.n	80010f8 <__udivmoddi4+0x2e4>
 80010a4:	18ba      	adds	r2, r7, r2
 80010a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010aa:	d2c4      	bcs.n	8001036 <__udivmoddi4+0x222>
 80010ac:	4542      	cmp	r2, r8
 80010ae:	d2c2      	bcs.n	8001036 <__udivmoddi4+0x222>
 80010b0:	f1a9 0102 	sub.w	r1, r9, #2
 80010b4:	443a      	add	r2, r7
 80010b6:	e7be      	b.n	8001036 <__udivmoddi4+0x222>
 80010b8:	45f0      	cmp	r8, lr
 80010ba:	d29d      	bcs.n	8000ff8 <__udivmoddi4+0x1e4>
 80010bc:	ebbe 0302 	subs.w	r3, lr, r2
 80010c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010c4:	3801      	subs	r0, #1
 80010c6:	46e1      	mov	r9, ip
 80010c8:	e796      	b.n	8000ff8 <__udivmoddi4+0x1e4>
 80010ca:	eba7 0909 	sub.w	r9, r7, r9
 80010ce:	4449      	add	r1, r9
 80010d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d8:	fb09 f804 	mul.w	r8, r9, r4
 80010dc:	e7db      	b.n	8001096 <__udivmoddi4+0x282>
 80010de:	4673      	mov	r3, lr
 80010e0:	e77f      	b.n	8000fe2 <__udivmoddi4+0x1ce>
 80010e2:	4650      	mov	r0, sl
 80010e4:	e766      	b.n	8000fb4 <__udivmoddi4+0x1a0>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e6fd      	b.n	8000ee6 <__udivmoddi4+0xd2>
 80010ea:	443b      	add	r3, r7
 80010ec:	3a02      	subs	r2, #2
 80010ee:	e733      	b.n	8000f58 <__udivmoddi4+0x144>
 80010f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010f4:	443b      	add	r3, r7
 80010f6:	e71c      	b.n	8000f32 <__udivmoddi4+0x11e>
 80010f8:	4649      	mov	r1, r9
 80010fa:	e79c      	b.n	8001036 <__udivmoddi4+0x222>
 80010fc:	eba1 0109 	sub.w	r1, r1, r9
 8001100:	46c4      	mov	ip, r8
 8001102:	fbb1 f9fe 	udiv	r9, r1, lr
 8001106:	fb09 f804 	mul.w	r8, r9, r4
 800110a:	e7c4      	b.n	8001096 <__udivmoddi4+0x282>

0800110c <__aeabi_idiv0>:
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800111c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800114e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001180:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001182:	4a31      	ldr	r2, [pc, #196]	@ (8001248 <MX_ADC_Init+0xd8>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001188:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800118c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_ADC_Init+0xd4>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011e2:	2206      	movs	r2, #6
 80011e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011e8:	2206      	movs	r2, #6
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = ENABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011f6:	221c      	movs	r2, #28
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001202:	2200      	movs	r2, #0
 8001204:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001208:	2200      	movs	r2, #0
 800120a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_ADC_Init+0xd4>)
 800120e:	f001 fe87 	bl	8002f20 <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC_Init+0xac>
  {
    Error_Handler();
 8001218:	f000 fa82 	bl	8001720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_ADC_Init+0xdc>)
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC_Init+0xd4>)
 800122e:	f002 f927 	bl	8003480 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC_Init+0xcc>
  {
    Error_Handler();
 8001238:	f000 fa72 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000e0 	.word	0x200000e0
 8001248:	40012400 	.word	0x40012400
 800124c:	10000010 	.word	0x10000010

08001250 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b096      	sub	sp, #88	@ 0x58
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2238      	movs	r2, #56	@ 0x38
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00b fd75 	bl	800cd60 <memset>
  if(adcHandle->Instance==ADC)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_ADC_MspInit+0x80>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d122      	bne.n	80012c6 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001286:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fa6d 	bl	8005770 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800129c:	f000 fa40 	bl	8001720 <Error_Handler>
    }

    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012a4:	f7ff ff4c 	bl	8001140 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff ff31 	bl	8001110 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = PRESSION_Pin;
 80012ae:	2304      	movs	r3, #4
 80012b0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(PRESSION_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <HAL_ADC_MspInit+0x84>)
 80012c2:	f002 fe55 	bl	8003f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80012c6:	bf00      	nop
 80012c8:	3758      	adds	r7, #88	@ 0x58
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012400 	.word	0x40012400
 80012d4:	48000400 	.word	0x48000400

080012d8 <LL_AHB2_GRP1_EnableClock>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <MX_GPIO_Init>:

/** Configure pins
     PA8   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff ffdb 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ffd8 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	2080      	movs	r0, #128	@ 0x80
 800132a:	f7ff ffd5 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2004      	movs	r0, #4
 8001330:	f7ff ffd2 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RES_OUT_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin
 8001334:	2200      	movs	r2, #0
 8001336:	214f      	movs	r1, #79	@ 0x4f
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f002 ff8f 	bl	800425e <HAL_GPIO_WritePin>
                          |FE_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SECHEUR_Pin CASIER_Pin GAZ_Pin */
  GPIO_InitStruct.Pin = SECHEUR_Pin|CASIER_Pin|GAZ_Pin;
 8001340:	2338      	movs	r3, #56	@ 0x38
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	482b      	ldr	r0, [pc, #172]	@ (8001400 <MX_GPIO_Init+0xf8>)
 8001352:	f002 fe0d 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_IN_Pin */
  GPIO_InitStruct.Pin = RES_IN_Pin;
 8001356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001360:	2302      	movs	r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RES_IN_GPIO_Port, &GPIO_InitStruct);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	@ (8001400 <MX_GPIO_Init+0xf8>)
 800136a:	f002 fe01 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_OUT_Pin */
  GPIO_InitStruct.Pin = RES_OUT_Pin;
 800136e:	2301      	movs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RES_OUT_GPIO_Port, &GPIO_InitStruct);
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f002 fdf3 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin LED_GREEN_Pin FE_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin|FE_CTRL_Pin;
 800138a:	234e      	movs	r3, #78	@ 0x4e
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001392:	2302      	movs	r3, #2
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f002 fde5 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : MASTER_Pin ALERT_Pin */
  GPIO_InitStruct.Pin = MASTER_Pin|ALERT_Pin;
 80013a6:	2390      	movs	r3, #144	@ 0x90
 80013a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f002 fdd9 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VENTILATEUR_Pin */
  GPIO_InitStruct.Pin = VENTILATEUR_Pin;
 80013be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VENTILATEUR_GPIO_Port, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f002 fdc8 	bl	8003f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80013e0:	2308      	movs	r3, #8
 80013e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_GPIO_Init+0xfc>)
 80013f2:	f002 fdbd 	bl	8003f70 <HAL_GPIO_Init>

}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400
 8001404:	48001c00 	.word	0x48001c00

08001408 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_IWDG_Init+0x34>)
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <MX_IWDG_Init+0x38>)
 8001410:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_IWDG_Init+0x34>)
 8001414:	2203      	movs	r2, #3
 8001416:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 999;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_IWDG_Init+0x34>)
 800141a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 999;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_IWDG_Init+0x34>)
 8001422:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001426:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_IWDG_Init+0x34>)
 800142a:	f002 ff2f 	bl	800428c <HAL_IWDG_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001434:	f000 f974 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000144 	.word	0x20000144
 8001440:	40003000 	.word	0x40003000

08001444 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001454:	f023 0218 	bic.w	r2, r3, #24
 8001458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4313      	orrs	r3, r2
 8001460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <LL_APB1_GRP1_EnableClock>:
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800147a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800147c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_APB2_GRP1_EnableClock>:
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014d4:	f001 fb18 	bl	8002b08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014d8:	f000 f826 	bl	8001528 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014dc:	f7ff ff14 	bl	8001308 <MX_GPIO_Init>
	MX_ADC_Init();
 80014e0:	f7ff fe46 	bl	8001170 <MX_ADC_Init>
	MX_SubGHz_Phy_Init();
 80014e4:	f00a fc01 	bl	800bcea <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 80014e8:	f001 f9ce 	bl	8002888 <MX_USART1_UART_Init>
	MX_IWDG_Init();
 80014ec:	f7ff ff8c 	bl	8001408 <MX_IWDG_Init>
	MX_RTC_Init();
 80014f0:	f000 fa8a 	bl	8001a08 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	APP_TMP275_Init();
 80014f4:	f000 f8fc 	bl	80016f0 <APP_TMP275_Init>

	if(!HAL_GPIO_ReadPin(MASTER_GPIO_Port, MASTER_Pin)) TIM16_Init();
 80014f8:	2110      	movs	r1, #16
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f002 fe97 	bl	8004230 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <main+0x3c>
 8001508:	f000 f89e 	bl	8001648 <TIM16_Init>

	TIM2_Init();
 800150c:	f000 f86e 	bl	80015ec <TIM2_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001510:	b662      	cpsie	i
}
 8001512:	bf00      	nop

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <main+0x54>)
 8001516:	f002 ff08 	bl	800432a <HAL_IWDG_Refresh>
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800151a:	f00a fbee 	bl	800bcfa <MX_SubGHz_Phy_Process>
		HAL_IWDG_Refresh(&hiwdg);
 800151e:	bf00      	nop
 8001520:	e7f8      	b.n	8001514 <main+0x44>
 8001522:	bf00      	nop
 8001524:	20000144 	.word	0x20000144

08001528 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09a      	sub	sp, #104	@ 0x68
 800152c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2248      	movs	r2, #72	@ 0x48
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f00b fc12 	bl	800cd60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800154e:	f002 fefb 	bl	8004348 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff76 	bl	8001444 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <SystemClock_Config+0xc0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001560:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <SystemClock_Config+0xc0>)
 8001562:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <SystemClock_Config+0xc0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001574:	232e      	movs	r3, #46	@ 0x2e
 8001576:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001578:	2381      	movs	r3, #129	@ 0x81
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001582:	2301      	movs	r3, #1
 8001584:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001586:	2340      	movs	r3, #64	@ 0x40
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800158a:	2300      	movs	r3, #0
 800158c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800158e:	23a0      	movs	r3, #160	@ 0xa0
 8001590:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 f9a2 	bl	80048ec <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80015ae:	f000 f8b7 	bl	8001720 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015b2:	234f      	movs	r3, #79	@ 0x4f
 80015b4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fd0e 	bl	8004ff0 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0xb6>
	{
		Error_Handler();
 80015da:	f000 f8a1 	bl	8001720 <Error_Handler>
	}
}
 80015de:	bf00      	nop
 80015e0:	3768      	adds	r7, #104	@ 0x68
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	58000400 	.word	0x58000400

080015ec <TIM2_Init>:

/* USER CODE BEGIN 4 */

void TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	// Configure TIM2 for 5-second period using direct registers
	__HAL_RCC_TIM2_CLK_ENABLE();
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ff3c 	bl	800146e <LL_APB1_GRP1_EnableClock>

	// 32MHz / 32000 = 1kHz tick
	TIM2->PSC = 31999;
 80015f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015fa:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 5000; // 5 seconds at 1kHz
 8001600:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 800160a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->DIER |= TIM_DIER_UIE; // Update interrupt enable
 8001612:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	60d3      	str	r3, [r2, #12]

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	2100      	movs	r1, #0
 8001626:	201b      	movs	r0, #27
 8001628:	f002 fbb1 	bl	8003d8e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162c:	201b      	movs	r0, #27
 800162e:	f002 fbc8 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

	TIM2->CR1 |= TIM_CR1_CEN;
 8001632:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM16_Init>:

void TIM16_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	// Configure TIM16 for 10-second timeout using direct registers
	__HAL_RCC_TIM16_CLK_ENABLE();
 800164c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001650:	f7ff ff25 	bl	800149e <LL_APB2_GRP1_EnableClock>

	TIM16->PSC = 31999; // 32MHz / 32000 = 1kHz
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <TIM16_Init+0x50>)
 8001656:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM16->ARR = 10000; // 10 seconds at 1kHz
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <TIM16_Init+0x50>)
 800165e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM16->CNT = 0;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <TIM16_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM16->DIER |= TIM_DIER_UIE; // Update interrupt enable
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <TIM16_Init+0x50>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <TIM16_Init+0x50>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	60d3      	str	r3, [r2, #12]

	HAL_NVIC_SetPriority(TIM16_IRQn, 0, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2100      	movs	r1, #0
 800167a:	201c      	movs	r0, #28
 800167c:	f002 fb87 	bl	8003d8e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001680:	201c      	movs	r0, #28
 8001682:	f002 fb9e 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

	TIM16->CR1 |= TIM_CR1_CEN;
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <TIM16_Init+0x50>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a03      	ldr	r2, [pc, #12]	@ (8001698 <TIM16_Init+0x50>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40014400 	.word	0x40014400

0800169c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 80016a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <TIM2_IRQHandler+0x26>
		TIM2->SR &= ~TIM_SR_UIF; // clear update flag
 80016ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6113      	str	r3, [r2, #16]
		SubghzApp_Event();
 80016be:	f00a fe29 	bl	800c314 <SubghzApp_Event>
	}
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	if (TIM16->SR & TIM_SR_UIF) {
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <TIM16_IRQHandler+0x24>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <TIM16_IRQHandler+0x20>
		TIM16->SR &= ~TIM_SR_UIF; // clear update flag
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <TIM16_IRQHandler+0x24>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4a03      	ldr	r2, [pc, #12]	@ (80016ec <TIM16_IRQHandler+0x24>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6113      	str	r3, [r2, #16]
		SubGHz_Phy_Timeout();
 80016e4:	f00a fb0f 	bl	800bd06 <SubGHz_Phy_Timeout>
	}
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40014400 	.word	0x40014400

080016f0 <APP_TMP275_Init>:

// HAL Timer callbacks not used (timers configured via registers)

void APP_TMP275_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	TMP275_GPIO_Init();
 80016f4:	f001 f858 	bl	80027a8 <TMP275_GPIO_Init>
	TMP275_I2C_Init();
 80016f8:	f001 f834 	bl	8002764 <TMP275_I2C_Init>

	TMP275_Init(&tmp_sensor_1);
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <APP_TMP275_Init+0x24>)
 80016fe:	f000 fef7 	bl	80024f0 <TMP275_Init>
	TMP275_Init(&tmp_sensor_2);
 8001702:	4805      	ldr	r0, [pc, #20]	@ (8001718 <APP_TMP275_Init+0x28>)
 8001704:	f000 fef4 	bl	80024f0 <TMP275_Init>
	TMP275_Init(&tmp_sensor_3);
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <APP_TMP275_Init+0x2c>)
 800170a:	f000 fef1 	bl	80024f0 <TMP275_Init>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000004 	.word	0x20000004
 8001718:	20000020 	.word	0x20000020
 800171c:	2000003c 	.word	0x2000003c

08001720 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <Error_Handler+0x8>

0800172c <NEXTION_SendCommand>:
/**
 * @brief Send a command to the Nextion display
 * @param command Command string to send
 */
void NEXTION_SendCommand(const char* command)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (command == NULL) return;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d034      	beq.n	80017a4 <NEXTION_SendCommand+0x78>

	// Prepare command into local TX buffer with terminators (handle overlap safely)
	// Reserve 3 bytes for 0xFF terminators
	size_t cmd_len = strlen(command);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe fd20 	bl	8000180 <strlen>
 8001740:	60f8      	str	r0, [r7, #12]
	if (cmd_len > (sizeof(nextion_buffer) - 4)) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b7c      	cmp	r3, #124	@ 0x7c
 8001746:	d901      	bls.n	800174c <NEXTION_SendCommand+0x20>
		cmd_len = sizeof(nextion_buffer) - 4;
 8001748:	237c      	movs	r3, #124	@ 0x7c
 800174a:	60fb      	str	r3, [r7, #12]
	}
	memmove(nextion_buffer, command, cmd_len);
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4816      	ldr	r0, [pc, #88]	@ (80017ac <NEXTION_SendCommand+0x80>)
 8001752:	f00b faeb 	bl	800cd2c <memmove>
	nextion_buffer[cmd_len] = '\0';
 8001756:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <NEXTION_SendCommand+0x80>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	// Append 3x 0xFF (no C-string terminator needed for TX)
	nextion_buffer[cmd_len + 0] = 0xFF;
 8001760:	4a12      	ldr	r2, [pc, #72]	@ (80017ac <NEXTION_SendCommand+0x80>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	22ff      	movs	r2, #255	@ 0xff
 8001768:	701a      	strb	r2, [r3, #0]
	nextion_buffer[cmd_len + 1] = 0xFF;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	3301      	adds	r3, #1
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <NEXTION_SendCommand+0x80>)
 8001770:	21ff      	movs	r1, #255	@ 0xff
 8001772:	54d1      	strb	r1, [r2, r3]
	nextion_buffer[cmd_len + 2] = 0xFF;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3302      	adds	r3, #2
 8001778:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <NEXTION_SendCommand+0x80>)
 800177a:	21ff      	movs	r1, #255	@ 0xff
 800177c:	54d1      	strb	r1, [r2, r3]
	size_t tx_len = cmd_len + 3;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3303      	adds	r3, #3
 8001782:	60bb      	str	r3, [r7, #8]

	// Request an ACK and send via UART1 (non-blocking receive handled in ISR)
	waiting_for_ack = 1;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <NEXTION_SendCommand+0x84>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
	ack_code = 0;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <NEXTION_SendCommand+0x88>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)nextion_buffer, tx_len, NEXTION_TIMEOUT_MS);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	b29a      	uxth	r2, r3
 8001794:	2364      	movs	r3, #100	@ 0x64
 8001796:	4905      	ldr	r1, [pc, #20]	@ (80017ac <NEXTION_SendCommand+0x80>)
 8001798:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <NEXTION_SendCommand+0x8c>)
 800179a:	f004 ffb1 	bl	8006700 <HAL_UART_Transmit>

	// Wait for acknowledgment (short timeout)
	NEXTION_WaitForACK();
 800179e:	f000 f80d 	bl	80017bc <NEXTION_WaitForACK>
 80017a2:	e000      	b.n	80017a6 <NEXTION_SendCommand+0x7a>
	if (command == NULL) return;
 80017a4:	bf00      	nop
}
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000154 	.word	0x20000154
 80017b0:	200001d4 	.word	0x200001d4
 80017b4:	200001d5 	.word	0x200001d5
 80017b8:	200002c0 	.word	0x200002c0

080017bc <NEXTION_WaitForACK>:
 * @brief Wait for ACK from Nextion display without starving the IWDG.
 *        Avoid HAL_GetTick (broken) by using DWT CYCCNT when available,
 *        otherwise fall back to a bounded loop. Refresh IWDG periodically.
 */
void NEXTION_WaitForACK(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
	// If ISR already processed the ACK, return early
	if (waiting_for_ack == 0) {
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <NEXTION_WaitForACK+0xf0>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <NEXTION_WaitForACK+0x16>
		(void)ack_code;
 80017cc:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <NEXTION_WaitForACK+0xf4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
		return;
 80017d0:	e068      	b.n	80018a4 <NEXTION_WaitForACK+0xe8>
	}

	// Setup DWT cycle counter for an accurate timeout when available
	uint8_t use_dwt = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
#if defined(DWT) && defined(CoreDebug) && defined(DWT_CTRL_CYCCNTENA_Msk)
	// Enable DWT CYCCNT if not already enabled
	if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk) == 0) {
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <NEXTION_WaitForACK+0xf8>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <NEXTION_WaitForACK+0x32>
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80017e2:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <NEXTION_WaitForACK+0xf8>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a33      	ldr	r2, [pc, #204]	@ (80018b4 <NEXTION_WaitForACK+0xf8>)
 80017e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ec:	60d3      	str	r3, [r2, #12]
	}
	if ((DWT->CTRL & DWT_CTRL_CYCCNTENA_Msk) == 0) {
 80017ee:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <NEXTION_WaitForACK+0x50>
		DWT->CYCCNT = 0; // reset counter
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]
	}
	uint32_t start = DWT->CYCCNT;
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	60fb      	str	r3, [r7, #12]
	// Quick sanity that CYCCNT increments
	__NOP();
 8001812:	bf00      	nop
	uint32_t after = DWT->CYCCNT;
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60bb      	str	r3, [r7, #8]
	if (after != start) {
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <NEXTION_WaitForACK+0x6a>
		use_dwt = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
	}
	// Compute timeout in CPU cycles (SystemCoreClock cycles per second)
	uint32_t timeout_cycles = (uint32_t)((SystemCoreClock / 1000U) * (uint32_t)NEXTION_TIMEOUT_MS);
 8001826:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <NEXTION_WaitForACK+0x100>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <NEXTION_WaitForACK+0x104>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	2264      	movs	r2, #100	@ 0x64
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	607b      	str	r3, [r7, #4]
#endif

	// Fallback loop budget if DWT not usable (empirical)
	// Choose a budget roughly proportional to clock; base 800k at 48 MHz ~100ms
	uint32_t fallback_budget = (SystemCoreClock > 0U) ? (SystemCoreClock / 60U) : 800000U;
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <NEXTION_WaitForACK+0x100>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <NEXTION_WaitForACK+0x94>
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <NEXTION_WaitForACK+0x100>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <NEXTION_WaitForACK+0x108>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	e000      	b.n	8001852 <NEXTION_WaitForACK+0x96>
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <NEXTION_WaitForACK+0x10c>)
 8001852:	613b      	str	r3, [r7, #16]
	if (fallback_budget < 5000U) fallback_budget = 5000U; // minimum spins
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f241 3287 	movw	r2, #4999	@ 0x1387
 800185a:	4293      	cmp	r3, r2
 800185c:	d819      	bhi.n	8001892 <NEXTION_WaitForACK+0xd6>
 800185e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001862:	613b      	str	r3, [r7, #16]

	// Main wait loop
	while (waiting_for_ack != 0) {
 8001864:	e015      	b.n	8001892 <NEXTION_WaitForACK+0xd6>
		// Refresh the watchdog to prevent reset while waiting
		HAL_IWDG_Refresh(&hiwdg);
 8001866:	4819      	ldr	r0, [pc, #100]	@ (80018cc <NEXTION_WaitForACK+0x110>)
 8001868:	f002 fd5f 	bl	800432a <HAL_IWDG_Refresh>

#if defined(DWT) && defined(CoreDebug) && defined(DWT_CTRL_CYCCNTENA_Msk)
		if (use_dwt) {
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <NEXTION_WaitForACK+0xca>
			uint32_t now = DWT->CYCCNT;
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <NEXTION_WaitForACK+0xfc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	603b      	str	r3, [r7, #0]
			if ((uint32_t)(now - start) >= timeout_cycles) {
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	d805      	bhi.n	8001890 <NEXTION_WaitForACK+0xd4>
				break; // timeout
 8001884:	e00c      	b.n	80018a0 <NEXTION_WaitForACK+0xe4>
			}
		} else
#endif
		{
			// Fallback: decrement loop budget and timeout when exhausted
			if (fallback_budget-- == 0U) {
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	613a      	str	r2, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <NEXTION_WaitForACK+0xe2>
				break; // timeout
			}
		}

		// Hint to CPU: light delay to reduce tight spin without sleeping
		__NOP();
 8001890:	bf00      	nop
	while (waiting_for_ack != 0) {
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <NEXTION_WaitForACK+0xf0>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e4      	bne.n	8001866 <NEXTION_WaitForACK+0xaa>
 800189c:	e000      	b.n	80018a0 <NEXTION_WaitForACK+0xe4>
				break; // timeout
 800189e:	bf00      	nop
	}

	// Do not forcefully clear waiting_for_ack; leave ISR as source of truth.
	// ack_code may be used by caller later; consume/ignore for now.
	(void)ack_code;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <NEXTION_WaitForACK+0xf4>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
}
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200001d4 	.word	0x200001d4
 80018b0:	200001d5 	.word	0x200001d5
 80018b4:	e000edf0 	.word	0xe000edf0
 80018b8:	e0001000 	.word	0xe0001000
 80018bc:	20000000 	.word	0x20000000
 80018c0:	10624dd3 	.word	0x10624dd3
 80018c4:	88888889 	.word	0x88888889
 80018c8:	000c3500 	.word	0x000c3500
 80018cc:	20000144 	.word	0x20000144

080018d0 <NEXTION_SetText>:
 * @brief Set text of a Nextion object
 * @param object_name Name of the object
 * @param text Text to set
 */
void NEXTION_SetText(const char* object_name, const char* text)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
	if (object_name == NULL || text == NULL) return;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00e      	beq.n	80018fe <NEXTION_SetText+0x2e>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <NEXTION_SetText+0x2e>

	snprintf(nextion_buffer, sizeof(nextion_buffer), "%s.txt=\"%s\"", object_name, text);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <NEXTION_SetText+0x38>)
 80018ee:	2180      	movs	r1, #128	@ 0x80
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <NEXTION_SetText+0x3c>)
 80018f2:	f00b f9d5 	bl	800cca0 <sniprintf>
	NEXTION_SendCommand(nextion_buffer);
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <NEXTION_SetText+0x3c>)
 80018f8:	f7ff ff18 	bl	800172c <NEXTION_SendCommand>
 80018fc:	e000      	b.n	8001900 <NEXTION_SetText+0x30>
	if (object_name == NULL || text == NULL) return;
 80018fe:	bf00      	nop
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	0800d640 	.word	0x0800d640
 800190c:	20000154 	.word	0x20000154

08001910 <NEXTION_SetValue>:
 * @brief Set value of a Nextion object
 * @param object_name Name of the object
 * @param value Value to set
 */
void NEXTION_SetValue(const char* object_name, int value)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	if (object_name == NULL) return;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <NEXTION_SetValue+0x28>

	snprintf(nextion_buffer, sizeof(nextion_buffer), "%s.val=%d", object_name, value);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <NEXTION_SetValue+0x30>)
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <NEXTION_SetValue+0x34>)
 800192c:	f00b f9b8 	bl	800cca0 <sniprintf>
	NEXTION_SendCommand(nextion_buffer);
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <NEXTION_SetValue+0x34>)
 8001932:	f7ff fefb 	bl	800172c <NEXTION_SendCommand>
 8001936:	e000      	b.n	800193a <NEXTION_SetValue+0x2a>
	if (object_name == NULL) return;
 8001938:	bf00      	nop
}
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	0800d64c 	.word	0x0800d64c
 8001944:	20000154 	.word	0x20000154

08001948 <NEXTION_SetBackgroundColor>:
 * @brief Set background color of a Nextion object
 * @param object_name Name of the object
 * @param color Color value (16-bit RGB565)
 */
void NEXTION_SetBackgroundColor(const char* object_name, uint32_t color)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	if (object_name == NULL) return;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00b      	beq.n	8001970 <NEXTION_SetBackgroundColor+0x28>

	snprintf(nextion_buffer, sizeof(nextion_buffer), "%s.bco=%u", object_name, (unsigned int)color);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <NEXTION_SetBackgroundColor+0x30>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	4806      	ldr	r0, [pc, #24]	@ (800197c <NEXTION_SetBackgroundColor+0x34>)
 8001964:	f00b f99c 	bl	800cca0 <sniprintf>
	NEXTION_SendCommand(nextion_buffer);
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <NEXTION_SetBackgroundColor+0x34>)
 800196a:	f7ff fedf 	bl	800172c <NEXTION_SendCommand>
 800196e:	e000      	b.n	8001972 <NEXTION_SetBackgroundColor+0x2a>
	if (object_name == NULL) return;
 8001970:	bf00      	nop
}
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	0800d658 	.word	0x0800d658
 800197c:	20000154 	.word	0x20000154

08001980 <NEXTION_SetPicture>:
 * @brief Set picture of a Nextion object
 * @param object_name Name of the object
 * @param pic_id Picture ID
 */
void NEXTION_SetPicture(const char* object_name, int pic_id)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	if (object_name == NULL) return;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <NEXTION_SetPicture+0x28>

	snprintf(nextion_buffer, sizeof(nextion_buffer), "%s.pic=%d", object_name, pic_id);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <NEXTION_SetPicture+0x30>)
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	4806      	ldr	r0, [pc, #24]	@ (80019b4 <NEXTION_SetPicture+0x34>)
 800199c:	f00b f980 	bl	800cca0 <sniprintf>
	NEXTION_SendCommand(nextion_buffer);
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <NEXTION_SetPicture+0x34>)
 80019a2:	f7ff fec3 	bl	800172c <NEXTION_SendCommand>
 80019a6:	e000      	b.n	80019aa <NEXTION_SetPicture+0x2a>
	if (object_name == NULL) return;
 80019a8:	bf00      	nop
}
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	0800d664 	.word	0x0800d664
 80019b4:	20000154 	.word	0x20000154

080019b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_APB1_GRP1_EnableClock>:
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019fc:	68fb      	ldr	r3, [r7, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	@ (8001a64 <MX_RTC_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a1a:	227f      	movs	r2, #127	@ 0x7f
 8001a1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a20:	22ff      	movs	r2, #255	@ 0xff
 8001a22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a3c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <MX_RTC_Init+0x58>)
 8001a4c:	f003 ffaa 	bl	80059a4 <HAL_RTC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff fe63 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200001d8 	.word	0x200001d8
 8001a64:	40002800 	.word	0x40002800

08001a68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b090      	sub	sp, #64	@ 0x40
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	2238      	movs	r2, #56	@ 0x38
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00b f971 	bl	800cd60 <memset>
  if(rtcHandle->Instance==RTC)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_RTC_MspInit+0x54>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d115      	bne.n	8001ab4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a8c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a92:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fe69 	bl	8005770 <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001aa4:	f7ff fe3c 	bl	8001720 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aa8:	f7ff ff86 	bl	80019b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001aac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ab0:	f7ff ff92 	bl	80019d8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3740      	adds	r7, #64	@ 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40002800 	.word	0x40002800

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2005      	movs	r0, #5
 8001aca:	f002 f960 	bl	8003d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f002 f977 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <NMI_Handler+0x4>

08001ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <MemManage_Handler+0x4>

08001af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <UsageFault_Handler+0x4>

08001b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f001 f848 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b40:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <USART1_IRQHandler+0x14>)
 8001b42:	f004 feaf 	bl	80068a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USART1_Interrupt();
 8001b46:	f000 ff41 	bl	80029cc <USART1_Interrupt>
  /* USER CODE END USART1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002c0 	.word	0x200002c0

08001b54 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001b5a:	f004 fb95 	bl	8006288 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */
  // Radio events are dispatched in HAL_SUBGHZ_RadioIRQCallback
  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000210 	.word	0x20000210

08001b68 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_2;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_SUBGHZ_Init+0x20>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_SUBGHZ_Init+0x20>)
 8001ba4:	f004 f8b2 	bl	8005d0c <HAL_SUBGHZ_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001bae:	f7ff fdb7 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000210 	.word	0x20000210

08001bbc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff ffcf 	bl	8001b68 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2032      	movs	r0, #50	@ 0x32
 8001bd0:	f002 f8dd 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001bd4:	2032      	movs	r0, #50	@ 0x32
 8001bd6:	f002 f8f4 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
	...

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f00b f8a6 	bl	800cd70 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20010000 	.word	0x20010000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	2000024c 	.word	0x2000024c
 8001c58:	200006e0 	.word	0x200006e0

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b085      	sub	sp, #20
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	@ (8001cbc <TIMER_IF_SetTimerContext+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000250 	.word	0x20000250

08001cc0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <TIMER_IF_GetTimerContext+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000250 	.word	0x20000250

08001cd4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001d0a:	687b      	ldr	r3, [r7, #4]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <timeout_begin>:
    uint32_t last_tick;
    uint32_t spin;
} timeout_ctx_t;

static inline void timeout_begin(timeout_ctx_t* t)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    t->start_tick = HAL_GetTick();
 8001d4e:	f000 ff47 	bl	8002be0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	601a      	str	r2, [r3, #0]
    t->last_tick = t->start_tick;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]
    t->spin = 0;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <timeout_expired>:

static inline int timeout_expired(timeout_ctx_t* t, uint32_t timeout_ms)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
    if (t->spin++ > 1000000UL) {
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6091      	str	r1, [r2, #8]
 8001d84:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <timeout_expired+0x50>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <timeout_expired+0x1e>
        return 1; // loop ceiling as last-resort timeout
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e014      	b.n	8001db8 <timeout_expired+0x48>
    }
    uint32_t tick = HAL_GetTick();
 8001d8e:	f000 ff27 	bl	8002be0 <HAL_GetTick>
 8001d92:	60f8      	str	r0, [r7, #12]
    if (tick != t->last_tick) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d002      	beq.n	8001da4 <timeout_expired+0x34>
        t->last_tick = tick;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
    }
    return ((tick - t->start_tick) > timeout_ms);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	bf34      	ite	cc
 8001db2:	2301      	movcc	r3, #1
 8001db4:	2300      	movcs	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	000f4240 	.word	0x000f4240

08001dc4 <i2c_clear_errors>:

static inline void i2c_clear_errors(I2C_TypeDef* I2Cx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
#ifdef I2C_ICR_STOPCF
    I2Cx->ICR = I2C_ICR_BERRCF | I2C_ICR_ARLOCF | I2C_ICR_OVRCF | I2C_ICR_NACKCF | I2C_ICR_STOPCF;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8001dd2:	61da      	str	r2, [r3, #28]
#else
    volatile uint32_t dummy = I2Cx->ISR; (void)dummy;
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <i2c_bus_recover>:

static inline void i2c_bus_recover(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b08b      	sub	sp, #44	@ 0x2c
 8001de4:	af00      	add	r7, sp, #0
    // Only for I2C1 on PB6 (SCL), PB7 (SDA)
    // Save current config
    uint32_t moder = GPIOB->MODER;
 8001de6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	623b      	str	r3, [r7, #32]
    uint32_t otyper = GPIOB->OTYPER;
 8001dec:	4b48      	ldr	r3, [pc, #288]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
    uint32_t ospeedr = GPIOB->OSPEEDR;
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
    uint32_t pupdr = GPIOB->PUPDR;
 8001df8:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	617b      	str	r3, [r7, #20]
    uint32_t afr0 = GPIOB->AFR[0];
 8001dfe:	4b44      	ldr	r3, [pc, #272]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	613b      	str	r3, [r7, #16]

    // Configure PB6/PB7 as open-drain outputs with pull-ups
    GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8001e04:	4b42      	ldr	r3, [pc, #264]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a41      	ldr	r2, [pc, #260]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e0e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0); // output
 8001e10:	4b3f      	ldr	r3, [pc, #252]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a3e      	ldr	r2, [pc, #248]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e16:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001e1a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7); // open-drain
 8001e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e26:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 8001e28:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e2e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8001e32:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001e3e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0); // pull-up
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e46:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001e4a:	60d3      	str	r3, [r2, #12]

    // Release lines
    GPIOB->BSRR = (GPIO_BSRR_BS6 | GPIO_BSRR_BS7);
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e4e:	22c0      	movs	r2, #192	@ 0xc0
 8001e50:	619a      	str	r2, [r3, #24]

    // If SDA stuck low, pulse SCL up to 9 times
    for (int i = 0; i < 9; ++i) {
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e56:	e023      	b.n	8001ea0 <i2c_bus_recover+0xc0>
        if ((GPIOB->IDR & GPIO_IDR_ID7) != 0) {
 8001e58:	4b2d      	ldr	r3, [pc, #180]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d121      	bne.n	8001ea8 <i2c_bus_recover+0xc8>
            break; // SDA released
        }
        // Toggle SCL low->high
        GPIOB->BSRR = GPIO_BSRR_BR6;
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e66:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e6a:	619a      	str	r2, [r3, #24]
        for (volatile int d = 0; d < 200; ++d) { __NOP(); }
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e003      	b.n	8001e7a <i2c_bus_recover+0x9a>
 8001e72:	bf00      	nop
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e7e:	ddf8      	ble.n	8001e72 <i2c_bus_recover+0x92>
        GPIOB->BSRR = GPIO_BSRR_BS6;
 8001e80:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001e82:	2240      	movs	r2, #64	@ 0x40
 8001e84:	619a      	str	r2, [r3, #24]
        for (volatile int d = 0; d < 200; ++d) { __NOP(); }
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	e003      	b.n	8001e94 <i2c_bus_recover+0xb4>
 8001e8c:	bf00      	nop
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2bc7      	cmp	r3, #199	@ 0xc7
 8001e98:	ddf8      	ble.n	8001e8c <i2c_bus_recover+0xac>
    for (int i = 0; i < 9; ++i) {
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	ddd8      	ble.n	8001e58 <i2c_bus_recover+0x78>
 8001ea6:	e000      	b.n	8001eaa <i2c_bus_recover+0xca>
            break; // SDA released
 8001ea8:	bf00      	nop
    }

    // Generate a STOP: SDA low then SCL high then SDA high
    GPIOB->BSRR = GPIO_BSRR_BR7; // SDA low
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001eac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eb0:	619a      	str	r2, [r3, #24]
    for (volatile int d = 0; d < 200; ++d) { __NOP(); }
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e003      	b.n	8001ec0 <i2c_bus_recover+0xe0>
 8001eb8:	bf00      	nop
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ec4:	ddf8      	ble.n	8001eb8 <i2c_bus_recover+0xd8>
    GPIOB->BSRR = GPIO_BSRR_BS6; // SCL high
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001ec8:	2240      	movs	r2, #64	@ 0x40
 8001eca:	619a      	str	r2, [r3, #24]
    for (volatile int d = 0; d < 200; ++d) { __NOP(); }
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	e003      	b.n	8001eda <i2c_bus_recover+0xfa>
 8001ed2:	bf00      	nop
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2bc7      	cmp	r3, #199	@ 0xc7
 8001ede:	ddf8      	ble.n	8001ed2 <i2c_bus_recover+0xf2>
    GPIOB->BSRR = GPIO_BSRR_BS7; // SDA high
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	619a      	str	r2, [r3, #24]

    // Restore previous configuration
    GPIOB->AFR[0] = afr0;
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	6213      	str	r3, [r2, #32]
    GPIOB->PUPDR = pupdr;
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	60d3      	str	r3, [r2, #12]
    GPIOB->OSPEEDR = ospeedr;
 8001ef2:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]
    GPIOB->OTYPER = otyper;
 8001ef8:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	6053      	str	r3, [r2, #4]
    GPIOB->MODER = moder;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <i2c_bus_recover+0x130>)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	372c      	adds	r7, #44	@ 0x2c
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	48000400 	.word	0x48000400

08001f14 <i2c_soft_reset_and_reinit>:

static void i2c_soft_reset_and_reinit(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
#ifdef RCC_APB1RSTR1_I2C1RST
    RCC->APB1RSTR1 |= RCC_APB1RSTR1_I2C1RST;
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f26:	6393      	str	r3, [r2, #56]	@ 0x38
    RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_I2C1RST;
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f36:	6393      	str	r3, [r2, #56]	@ 0x38
    I2C1->CR1 &= ~I2C_CR1_PE;
    for (volatile uint32_t d = 0; d < 1000; ++d) { __NOP(); }
    I2C1->CR1 |= I2C_CR1_PE;
#endif
    // Try to recover bus if a slave is holding SDA low
    i2c_bus_recover();
 8001f38:	f7ff ff52 	bl	8001de0 <i2c_bus_recover>
    TMP275_I2C_Init();
 8001f3c:	f000 fc12 	bl	8002764 <TMP275_I2C_Init>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <I2C_WriteRegister>:

static TMP275_Status_t I2C_WriteRegister(TMP275_Handle_t* htmp275, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	460b      	mov	r3, r1
 8001f52:	72fb      	strb	r3, [r7, #11]
 8001f54:	4613      	mov	r3, r2
 8001f56:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef* I2Cx = htmp275->i2c_instance;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	623b      	str	r3, [r7, #32]
    uint8_t device_address = htmp275->device_address << 1;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	77fb      	strb	r3, [r7, #31]

    // Wait for bus ready with robust timeout and single recovery attempt
    timeout_ctx_t t; timeout_begin(&t);
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff feeb 	bl	8001d46 <timeout_begin>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 8001f70:	e022      	b.n	8001fb8 <I2C_WriteRegister+0x74>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) {
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	4993      	ldr	r1, [pc, #588]	@ (80021c4 <I2C_WriteRegister+0x280>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fef9 	bl	8001d70 <timeout_expired>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d019      	beq.n	8001fb8 <I2C_WriteRegister+0x74>
            i2c_soft_reset_and_reinit();
 8001f84:	f7ff ffc6 	bl	8001f14 <i2c_soft_reset_and_reinit>
            timeout_begin(&t);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff feda 	bl	8001d46 <timeout_begin>
            while (I2Cx->ISR & I2C_ISR_BUSY) {
 8001f92:	e00a      	b.n	8001faa <I2C_WriteRegister+0x66>
                if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	498a      	ldr	r1, [pc, #552]	@ (80021c4 <I2C_WriteRegister+0x280>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fee8 	bl	8001d70 <timeout_expired>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <I2C_WriteRegister+0x66>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e108      	b.n	80021bc <I2C_WriteRegister+0x278>
            while (I2Cx->ISR & I2C_ISR_BUSY) {
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1ee      	bne.n	8001f94 <I2C_WriteRegister+0x50>
            }
            break;
 8001fb6:	e005      	b.n	8001fc4 <I2C_WriteRegister+0x80>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1d6      	bne.n	8001f72 <I2C_WriteRegister+0x2e>
        }
    }

    i2c_clear_errors(I2Cx);
 8001fc4:	6a38      	ldr	r0, [r7, #32]
 8001fc6:	f7ff fefd 	bl	8001dc4 <i2c_clear_errors>

    I2Cx->CR2 = 0;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 &= ~I2C_CR2_ADD10;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	7ffb      	ldrb	r3, [r7, #31]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= ((length+1) << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 &= ~I2C_CR2_RD_WRN;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= I2C_CR2_START;
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	605a      	str	r2, [r3, #4]

    // Wait TXIS
    timeout_begin(&t);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe94 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 800201e:	e020      	b.n	8002062 <I2C_WriteRegister+0x11e>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4967      	ldr	r1, [pc, #412]	@ (80021c4 <I2C_WriteRegister+0x280>)
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fea2 	bl	8001d70 <timeout_expired>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_WriteRegister+0xf2>
 8002032:	2302      	movs	r3, #2
 8002034:	e0c2      	b.n	80021bc <I2C_WriteRegister+0x278>
        if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <I2C_WriteRegister+0x108>
 8002042:	6a38      	ldr	r0, [r7, #32]
 8002044:	f7ff febe 	bl	8001dc4 <i2c_clear_errors>
 8002048:	2305      	movs	r3, #5
 800204a:	e0b7      	b.n	80021bc <I2C_WriteRegister+0x278>
        if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <I2C_WriteRegister+0x11e>
 8002058:	6a38      	ldr	r0, [r7, #32]
 800205a:	f7ff feb3 	bl	8001dc4 <i2c_clear_errors>
 800205e:	2304      	movs	r3, #4
 8002060:	e0ac      	b.n	80021bc <I2C_WriteRegister+0x278>
    while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0d8      	beq.n	8002020 <I2C_WriteRegister+0xdc>
    }
    I2Cx->TXDR = reg;
 800206e:	7afa      	ldrb	r2, [r7, #11]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28

    // Send data
    for (uint16_t i = 0; i < length; i++) {
 8002074:	2300      	movs	r3, #0
 8002076:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002078:	e036      	b.n	80020e8 <I2C_WriteRegister+0x1a4>
        timeout_begin(&t);
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe61 	bl	8001d46 <timeout_begin>
        while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8002084:	e020      	b.n	80020c8 <I2C_WriteRegister+0x184>
            if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	494e      	ldr	r1, [pc, #312]	@ (80021c4 <I2C_WriteRegister+0x280>)
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fe6f 	bl	8001d70 <timeout_expired>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <I2C_WriteRegister+0x158>
 8002098:	2302      	movs	r3, #2
 800209a:	e08f      	b.n	80021bc <I2C_WriteRegister+0x278>
            if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <I2C_WriteRegister+0x16e>
 80020a8:	6a38      	ldr	r0, [r7, #32]
 80020aa:	f7ff fe8b 	bl	8001dc4 <i2c_clear_errors>
 80020ae:	2305      	movs	r3, #5
 80020b0:	e084      	b.n	80021bc <I2C_WriteRegister+0x278>
            if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <I2C_WriteRegister+0x184>
 80020be:	6a38      	ldr	r0, [r7, #32]
 80020c0:	f7ff fe80 	bl	8001dc4 <i2c_clear_errors>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e079      	b.n	80021bc <I2C_WriteRegister+0x278>
        while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0d8      	beq.n	8002086 <I2C_WriteRegister+0x142>
        }
        I2Cx->TXDR = data[i];
 80020d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	629a      	str	r2, [r3, #40]	@ 0x28
    for (uint16_t i = 0; i < length; i++) {
 80020e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020e4:	3301      	adds	r3, #1
 80020e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80020e8:	7abb      	ldrb	r3, [r7, #10]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3c3      	bcc.n	800207a <I2C_WriteRegister+0x136>
    }

    // Wait TC
    timeout_begin(&t);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe25 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_TC)) {
 80020fc:	e020      	b.n	8002140 <I2C_WriteRegister+0x1fc>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4930      	ldr	r1, [pc, #192]	@ (80021c4 <I2C_WriteRegister+0x280>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe33 	bl	8001d70 <timeout_expired>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <I2C_WriteRegister+0x1d0>
 8002110:	2302      	movs	r3, #2
 8002112:	e053      	b.n	80021bc <I2C_WriteRegister+0x278>
        if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <I2C_WriteRegister+0x1e6>
 8002120:	6a38      	ldr	r0, [r7, #32]
 8002122:	f7ff fe4f 	bl	8001dc4 <i2c_clear_errors>
 8002126:	2305      	movs	r3, #5
 8002128:	e048      	b.n	80021bc <I2C_WriteRegister+0x278>
        if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <I2C_WriteRegister+0x1fc>
 8002136:	6a38      	ldr	r0, [r7, #32]
 8002138:	f7ff fe44 	bl	8001dc4 <i2c_clear_errors>
 800213c:	2304      	movs	r3, #4
 800213e:	e03d      	b.n	80021bc <I2C_WriteRegister+0x278>
    while (!(I2Cx->ISR & I2C_ISR_TC)) {
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0d8      	beq.n	80020fe <I2C_WriteRegister+0x1ba>
    }

    // STOP
    I2Cx->CR2 |= I2C_CR2_STOP;
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	605a      	str	r2, [r3, #4]
    timeout_begin(&t);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fdf2 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_STOPF)) {
 8002162:	e00a      	b.n	800217a <I2C_WriteRegister+0x236>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	4916      	ldr	r1, [pc, #88]	@ (80021c4 <I2C_WriteRegister+0x280>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fe00 	bl	8001d70 <timeout_expired>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <I2C_WriteRegister+0x236>
 8002176:	2302      	movs	r3, #2
 8002178:	e020      	b.n	80021bc <I2C_WriteRegister+0x278>
    while (!(I2Cx->ISR & I2C_ISR_STOPF)) {
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ee      	beq.n	8002164 <I2C_WriteRegister+0x220>
    }
#ifdef I2C_ICR_STOPCF
    I2Cx->ICR = I2C_ICR_STOPCF;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	2220      	movs	r2, #32
 800218a:	61da      	str	r2, [r3, #28]
#endif

    // Wait bus idle
    timeout_begin(&t);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fdd8 	bl	8001d46 <timeout_begin>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 8002196:	e00a      	b.n	80021ae <I2C_WriteRegister+0x26a>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4909      	ldr	r1, [pc, #36]	@ (80021c4 <I2C_WriteRegister+0x280>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fde6 	bl	8001d70 <timeout_expired>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <I2C_WriteRegister+0x26a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e006      	b.n	80021bc <I2C_WriteRegister+0x278>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1ee      	bne.n	8002198 <I2C_WriteRegister+0x254>
    }
    return TMP275_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3728      	adds	r7, #40	@ 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	000186a0 	.word	0x000186a0

080021c8 <I2C_ReadRegister>:

static TMP275_Status_t I2C_ReadRegister(TMP275_Handle_t* htmp275, uint8_t reg, uint8_t *buffer, uint8_t length)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	@ 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	72fb      	strb	r3, [r7, #11]
 80021d8:	4613      	mov	r3, r2
 80021da:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef* I2Cx = htmp275->i2c_instance;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	623b      	str	r3, [r7, #32]
    uint8_t device_address = htmp275->device_address << 1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	791b      	ldrb	r3, [r3, #4]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	77fb      	strb	r3, [r7, #31]

    timeout_ctx_t t; timeout_begin(&t);
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fda9 	bl	8001d46 <timeout_begin>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 80021f4:	e022      	b.n	800223c <I2C_ReadRegister+0x74>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) {
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	49a0      	ldr	r1, [pc, #640]	@ (800247c <I2C_ReadRegister+0x2b4>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fdb7 	bl	8001d70 <timeout_expired>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d019      	beq.n	800223c <I2C_ReadRegister+0x74>
            i2c_soft_reset_and_reinit();
 8002208:	f7ff fe84 	bl	8001f14 <i2c_soft_reset_and_reinit>
            timeout_begin(&t);
 800220c:	f107 0310 	add.w	r3, r7, #16
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fd98 	bl	8001d46 <timeout_begin>
            while (I2Cx->ISR & I2C_ISR_BUSY) {
 8002216:	e00a      	b.n	800222e <I2C_ReadRegister+0x66>
                if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	4997      	ldr	r1, [pc, #604]	@ (800247c <I2C_ReadRegister+0x2b4>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fda6 	bl	8001d70 <timeout_expired>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <I2C_ReadRegister+0x66>
 800222a:	2302      	movs	r3, #2
 800222c:	e122      	b.n	8002474 <I2C_ReadRegister+0x2ac>
            while (I2Cx->ISR & I2C_ISR_BUSY) {
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ee      	bne.n	8002218 <I2C_ReadRegister+0x50>
            }
            break;
 800223a:	e005      	b.n	8002248 <I2C_ReadRegister+0x80>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1d6      	bne.n	80021f6 <I2C_ReadRegister+0x2e>
        }
    }

    i2c_clear_errors(I2Cx);
 8002248:	6a38      	ldr	r0, [r7, #32]
 800224a:	f7ff fdbb 	bl	8001dc4 <i2c_clear_errors>

    // Write pointer register
    I2Cx->CR2 = 0;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 &= ~I2C_CR2_ADD10;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	431a      	orrs	r2, r3
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= (1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 &= ~I2C_CR2_RD_WRN;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= I2C_CR2_START;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	605a      	str	r2, [r3, #4]

    timeout_begin(&t);
 8002290:	f107 0310 	add.w	r3, r7, #16
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fd56 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 800229a:	e020      	b.n	80022de <I2C_ReadRegister+0x116>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4976      	ldr	r1, [pc, #472]	@ (800247c <I2C_ReadRegister+0x2b4>)
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fd64 	bl	8001d70 <timeout_expired>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_ReadRegister+0xea>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0e0      	b.n	8002474 <I2C_ReadRegister+0x2ac>
        if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <I2C_ReadRegister+0x100>
 80022be:	6a38      	ldr	r0, [r7, #32]
 80022c0:	f7ff fd80 	bl	8001dc4 <i2c_clear_errors>
 80022c4:	2305      	movs	r3, #5
 80022c6:	e0d5      	b.n	8002474 <I2C_ReadRegister+0x2ac>
        if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <I2C_ReadRegister+0x116>
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f7ff fd75 	bl	8001dc4 <i2c_clear_errors>
 80022da:	2304      	movs	r3, #4
 80022dc:	e0ca      	b.n	8002474 <I2C_ReadRegister+0x2ac>
    while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0d8      	beq.n	800229c <I2C_ReadRegister+0xd4>
    }
    I2Cx->TXDR = reg;
 80022ea:	7afa      	ldrb	r2, [r7, #11]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

    timeout_begin(&t);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fd26 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_TC)) {
 80022fa:	e020      	b.n	800233e <I2C_ReadRegister+0x176>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	495e      	ldr	r1, [pc, #376]	@ (800247c <I2C_ReadRegister+0x2b4>)
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fd34 	bl	8001d70 <timeout_expired>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <I2C_ReadRegister+0x14a>
 800230e:	2302      	movs	r3, #2
 8002310:	e0b0      	b.n	8002474 <I2C_ReadRegister+0x2ac>
        if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <I2C_ReadRegister+0x160>
 800231e:	6a38      	ldr	r0, [r7, #32]
 8002320:	f7ff fd50 	bl	8001dc4 <i2c_clear_errors>
 8002324:	2305      	movs	r3, #5
 8002326:	e0a5      	b.n	8002474 <I2C_ReadRegister+0x2ac>
        if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <I2C_ReadRegister+0x176>
 8002334:	6a38      	ldr	r0, [r7, #32]
 8002336:	f7ff fd45 	bl	8001dc4 <i2c_clear_errors>
 800233a:	2304      	movs	r3, #4
 800233c:	e09a      	b.n	8002474 <I2C_ReadRegister+0x2ac>
    while (!(I2Cx->ISR & I2C_ISR_TC)) {
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0d8      	beq.n	80022fc <I2C_ReadRegister+0x134>
    }

    // Read phase
    I2Cx->CR2 = 0;
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	7ffb      	ldrb	r3, [r7, #31]
 8002356:	431a      	orrs	r2, r3
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= (length << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	7abb      	ldrb	r3, [r7, #10]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002368:	431a      	orrs	r2, r3
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	605a      	str	r2, [r3, #4]
    I2Cx->CR2 |= I2C_CR2_START;
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	605a      	str	r2, [r3, #4]

    for (uint16_t i = 0; i < length; i++) {
 8002386:	2300      	movs	r3, #0
 8002388:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800238a:	e036      	b.n	80023fa <I2C_ReadRegister+0x232>
        timeout_begin(&t);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fcd8 	bl	8001d46 <timeout_begin>
        while (!(I2Cx->ISR & I2C_ISR_RXNE)) {
 8002396:	e020      	b.n	80023da <I2C_ReadRegister+0x212>
            if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4937      	ldr	r1, [pc, #220]	@ (800247c <I2C_ReadRegister+0x2b4>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fce6 	bl	8001d70 <timeout_expired>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <I2C_ReadRegister+0x1e6>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e062      	b.n	8002474 <I2C_ReadRegister+0x2ac>
            if (I2Cx->ISR & I2C_ISR_ARLO) { i2c_clear_errors(I2Cx); return TMP275_BUS_ERROR; }
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <I2C_ReadRegister+0x1fc>
 80023ba:	6a38      	ldr	r0, [r7, #32]
 80023bc:	f7ff fd02 	bl	8001dc4 <i2c_clear_errors>
 80023c0:	2305      	movs	r3, #5
 80023c2:	e057      	b.n	8002474 <I2C_ReadRegister+0x2ac>
            if (I2Cx->ISR & I2C_ISR_NACKF) { i2c_clear_errors(I2Cx); return TMP275_NACK; }
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <I2C_ReadRegister+0x212>
 80023d0:	6a38      	ldr	r0, [r7, #32]
 80023d2:	f7ff fcf7 	bl	8001dc4 <i2c_clear_errors>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e04c      	b.n	8002474 <I2C_ReadRegister+0x2ac>
        while (!(I2Cx->ISR & I2C_ISR_RXNE)) {
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0d8      	beq.n	8002398 <I2C_ReadRegister+0x1d0>
        }
        buffer[i] = I2Cx->RXDR;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80023f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023f6:	3301      	adds	r3, #1
 80023f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80023fa:	7abb      	ldrb	r3, [r7, #10]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002400:	429a      	cmp	r2, r3
 8002402:	d3c3      	bcc.n	800238c <I2C_ReadRegister+0x1c4>
    }

    I2Cx->CR2 |= I2C_CR2_STOP;
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	605a      	str	r2, [r3, #4]
    timeout_begin(&t);
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fc96 	bl	8001d46 <timeout_begin>
    while (!(I2Cx->ISR & I2C_ISR_STOPF)) {
 800241a:	e00a      	b.n	8002432 <I2C_ReadRegister+0x26a>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4916      	ldr	r1, [pc, #88]	@ (800247c <I2C_ReadRegister+0x2b4>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fca4 	bl	8001d70 <timeout_expired>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <I2C_ReadRegister+0x26a>
 800242e:	2302      	movs	r3, #2
 8002430:	e020      	b.n	8002474 <I2C_ReadRegister+0x2ac>
    while (!(I2Cx->ISR & I2C_ISR_STOPF)) {
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ee      	beq.n	800241c <I2C_ReadRegister+0x254>
    }
#ifdef I2C_ICR_STOPCF
    I2Cx->ICR = I2C_ICR_STOPCF;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	2220      	movs	r2, #32
 8002442:	61da      	str	r2, [r3, #28]
#endif

    timeout_begin(&t);
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fc7c 	bl	8001d46 <timeout_begin>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 800244e:	e00a      	b.n	8002466 <I2C_ReadRegister+0x29e>
        if (timeout_expired(&t, TMP275_I2C_TIMEOUT)) return TMP275_TIMEOUT;
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4909      	ldr	r1, [pc, #36]	@ (800247c <I2C_ReadRegister+0x2b4>)
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fc8a 	bl	8001d70 <timeout_expired>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_ReadRegister+0x29e>
 8002462:	2302      	movs	r3, #2
 8002464:	e006      	b.n	8002474 <I2C_ReadRegister+0x2ac>
    while (I2Cx->ISR & I2C_ISR_BUSY) {
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1ee      	bne.n	8002450 <I2C_ReadRegister+0x288>
    }

    return TMP275_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3728      	adds	r7, #40	@ 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	000186a0 	.word	0x000186a0

08002480 <TMP275_ConvertRawToTemperature>:

float TMP275_ConvertRawToTemperature(int16_t raw_temp, TMP275_Resolution_t resolution) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	80fb      	strh	r3, [r7, #6]
 800248c:	4613      	mov	r3, r2
 800248e:	717b      	strb	r3, [r7, #5]
	return (float)raw_temp * resolution_factors[resolution];
 8002490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fabb 	bl	8000a10 <__aeabi_i2f>
 800249a:	4602      	mov	r2, r0
 800249c:	797b      	ldrb	r3, [r7, #5]
 800249e:	4906      	ldr	r1, [pc, #24]	@ (80024b8 <TMP275_ConvertRawToTemperature+0x38>)
 80024a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4610      	mov	r0, r2
 80024a8:	f7fe fb06 	bl	8000ab8 <__aeabi_fmul>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	0800dbf0 	.word	0x0800dbf0

080024bc <TMP275_ConvertTemperatureToRaw>:

int16_t TMP275_ConvertTemperatureToRaw(float temperature, TMP275_Resolution_t resolution) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	70fb      	strb	r3, [r7, #3]
	return (int16_t)(temperature / resolution_factors[resolution]);
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	4a08      	ldr	r2, [pc, #32]	@ (80024ec <TMP275_ConvertTemperatureToRaw+0x30>)
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fba4 	bl	8000c20 <__aeabi_fdiv>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fc3c 	bl	8000d58 <__aeabi_f2iz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b21b      	sxth	r3, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	0800dbf0 	.word	0x0800dbf0

080024f0 <TMP275_Init>:

/* ===== IMPLÉMENTATION DES FONCTIONS PUBLIQUES ===== */

TMP275_Status_t TMP275_Init(TMP275_Handle_t* htmp275) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	if (htmp275 == NULL) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <TMP275_Init+0x12>
		return TMP275_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e01d      	b.n	800253e <TMP275_Init+0x4e>
	}

	htmp275->initialized = false;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	761a      	strb	r2, [r3, #24]

	// Tester la communication
	uint8_t config_reg;
	if (I2C_ReadRegister(htmp275, TMP275_REG_CONFIG, &config_reg, 1) != TMP275_OK) {
 8002508:	f107 020f 	add.w	r2, r7, #15
 800250c:	2301      	movs	r3, #1
 800250e:	2101      	movs	r1, #1
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fe59 	bl	80021c8 <I2C_ReadRegister>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <TMP275_Init+0x30>
		return TMP275_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00e      	b.n	800253e <TMP275_Init+0x4e>
	}

	// Appliquer la configuration par défaut
	if (TMP275_Configure(htmp275, &htmp275->config) != TMP275_OK) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3308      	adds	r3, #8
 8002524:	4619      	mov	r1, r3
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f80d 	bl	8002546 <TMP275_Configure>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <TMP275_Init+0x46>
		return TMP275_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e003      	b.n	800253e <TMP275_Init+0x4e>
	}

	htmp275->initialized = true;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	761a      	strb	r2, [r3, #24]
	return TMP275_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <TMP275_Configure>:

	htmp275->initialized = false;
	return TMP275_OK;
}

TMP275_Status_t TMP275_Configure(TMP275_Handle_t* htmp275, TMP275_Config_t* config) {
 8002546:	b590      	push	{r4, r7, lr}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	if (htmp275 == NULL || config == NULL) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <TMP275_Configure+0x16>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <TMP275_Configure+0x1a>
		return TMP275_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e098      	b.n	8002692 <TMP275_Configure+0x14c>
	}

	uint8_t config_reg = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	757b      	strb	r3, [r7, #21]

	// Construire le registre de configuration
	if (config->mode == TMP275_MODE_SHUTDOWN) {
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d104      	bne.n	8002576 <TMP275_Configure+0x30>
		config_reg |= TMP275_CONFIG_SD_BIT;
 800256c:	7d7b      	ldrb	r3, [r7, #21]
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	757b      	strb	r3, [r7, #21]
	}

	if (config->alert_mode == TMP275_INTERRUPT_MODE) {
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	789b      	ldrb	r3, [r3, #2]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d104      	bne.n	8002588 <TMP275_Configure+0x42>
		config_reg |= TMP275_CONFIG_TM_BIT;
 800257e:	7d7b      	ldrb	r3, [r7, #21]
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	757b      	strb	r3, [r7, #21]
	}

	if (config->alert_polarity_high) {
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <TMP275_Configure+0x54>
		config_reg |= TMP275_CONFIG_POL_BIT;
 8002590:	7d7b      	ldrb	r3, [r7, #21]
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	b2db      	uxtb	r3, r3
 8002598:	757b      	strb	r3, [r7, #21]
	}

	// Configuration de la queue de fautes
	switch (config->fault_queue) {
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	78db      	ldrb	r3, [r3, #3]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d012      	beq.n	80025c8 <TMP275_Configure+0x82>
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	dc16      	bgt.n	80025d4 <TMP275_Configure+0x8e>
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d002      	beq.n	80025b0 <TMP275_Configure+0x6a>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d006      	beq.n	80025bc <TMP275_Configure+0x76>
	case 2: config_reg |= TMP275_CONFIG_F0_BIT; break;
	case 4: config_reg |= TMP275_CONFIG_F1_BIT; break;
	case 6: config_reg |= TMP275_CONFIG_F1_BIT | TMP275_CONFIG_F0_BIT; break;
	default: break; // 1 fault (par défaut)
 80025ae:	e011      	b.n	80025d4 <TMP275_Configure+0x8e>
	case 2: config_reg |= TMP275_CONFIG_F0_BIT; break;
 80025b0:	7d7b      	ldrb	r3, [r7, #21]
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	757b      	strb	r3, [r7, #21]
 80025ba:	e00c      	b.n	80025d6 <TMP275_Configure+0x90>
	case 4: config_reg |= TMP275_CONFIG_F1_BIT; break;
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	f043 0310 	orr.w	r3, r3, #16
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	757b      	strb	r3, [r7, #21]
 80025c6:	e006      	b.n	80025d6 <TMP275_Configure+0x90>
	case 6: config_reg |= TMP275_CONFIG_F1_BIT | TMP275_CONFIG_F0_BIT; break;
 80025c8:	7d7b      	ldrb	r3, [r7, #21]
 80025ca:	f043 0318 	orr.w	r3, r3, #24
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	757b      	strb	r3, [r7, #21]
 80025d2:	e000      	b.n	80025d6 <TMP275_Configure+0x90>
	default: break; // 1 fault (par défaut)
 80025d4:	bf00      	nop
	}

	// Configuration de la résolution
	config_reg |= config->resolution << 5;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	015b      	lsls	r3, r3, #5
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	7d7b      	ldrb	r3, [r7, #21]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	757b      	strb	r3, [r7, #21]

	// Écrire la configuration
	if (I2C_WriteRegister(htmp275, TMP275_REG_CONFIG, &config_reg, 1) != TMP275_OK) {
 80025ec:	f107 0215 	add.w	r2, r7, #21
 80025f0:	2301      	movs	r3, #1
 80025f2:	2101      	movs	r1, #1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fca5 	bl	8001f44 <I2C_WriteRegister>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <TMP275_Configure+0xbe>
		return TMP275_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e046      	b.n	8002692 <TMP275_Configure+0x14c>
	}

	// Configurer les seuils
	int16_t raw_temp = TMP275_ConvertTemperatureToRaw(htmp275->config.temp_low_threshold, htmp275->config.resolution);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7a1b      	ldrb	r3, [r3, #8]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7ff ff54 	bl	80024bc <TMP275_ConvertTemperatureToRaw>
 8002614:	4603      	mov	r3, r0
 8002616:	82fb      	strh	r3, [r7, #22]
	if (I2C_WriteRegister(htmp275, TMP275_REG_TLOW, (uint8_t[]){raw_temp >> 8, raw_temp}, 2) != TMP275_OK) {
 8002618:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800261c:	121b      	asrs	r3, r3, #8
 800261e:	b21b      	sxth	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	743b      	strb	r3, [r7, #16]
 8002624:	8afb      	ldrh	r3, [r7, #22]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	747b      	strb	r3, [r7, #17]
 800262a:	f107 0210 	add.w	r2, r7, #16
 800262e:	2302      	movs	r3, #2
 8002630:	2102      	movs	r1, #2
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fc86 	bl	8001f44 <I2C_WriteRegister>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <TMP275_Configure+0xfc>
		return TMP275_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e027      	b.n	8002692 <TMP275_Configure+0x14c>
	}

	raw_temp = TMP275_ConvertTemperatureToRaw(htmp275->config.temp_high_threshold, htmp275->config.resolution);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7a1b      	ldrb	r3, [r3, #8]
 800264a:	4619      	mov	r1, r3
 800264c:	4610      	mov	r0, r2
 800264e:	f7ff ff35 	bl	80024bc <TMP275_ConvertTemperatureToRaw>
 8002652:	4603      	mov	r3, r0
 8002654:	82fb      	strh	r3, [r7, #22]
	if (I2C_WriteRegister(htmp275, TMP275_REG_THIGH, (uint8_t[]){raw_temp >> 8, raw_temp}, 2) != TMP275_OK) {
 8002656:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800265a:	121b      	asrs	r3, r3, #8
 800265c:	b21b      	sxth	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	733b      	strb	r3, [r7, #12]
 8002662:	8afb      	ldrh	r3, [r7, #22]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	737b      	strb	r3, [r7, #13]
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	2302      	movs	r3, #2
 800266e:	2103      	movs	r1, #3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fc67 	bl	8001f44 <I2C_WriteRegister>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <TMP275_Configure+0x13a>
		return TMP275_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e008      	b.n	8002692 <TMP275_Configure+0x14c>
	}

	// Sauvegarder la configuration
	htmp275->config = *config;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	f103 0408 	add.w	r4, r3, #8
 8002688:	4613      	mov	r3, r2
 800268a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return TMP275_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}

0800269a <TMP275_ReadTemperature>:

TMP275_Status_t TMP275_ReadTemperature(TMP275_Handle_t* htmp275, float* temperature) {
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
	if (htmp275 == NULL || temperature == NULL || !htmp275->initialized) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <TMP275_ReadTemperature+0x24>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <TMP275_ReadTemperature+0x24>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <TMP275_ReadTemperature+0x28>
		return TMP275_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e016      	b.n	80026f0 <TMP275_ReadTemperature+0x56>
	}

	int16_t raw_temp;
	TMP275_Status_t status = TMP275_ReadTemperatureRaw(htmp275, &raw_temp);
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f815 	bl	80026f8 <TMP275_ReadTemperatureRaw>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]

	if (status == TMP275_OK) {
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <TMP275_ReadTemperature+0x54>
		*temperature = TMP275_ConvertRawToTemperature(raw_temp, htmp275->config.resolution);
 80026d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7a1b      	ldrb	r3, [r3, #8]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7ff fecc 	bl	8002480 <TMP275_ConvertRawToTemperature>
 80026e8:	4602      	mov	r2, r0
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	601a      	str	r2, [r3, #0]
	}

	return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <TMP275_ReadTemperatureRaw>:

TMP275_Status_t TMP275_ReadTemperatureRaw(TMP275_Handle_t* htmp275, int16_t* temp_raw) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	if (htmp275 == NULL || temp_raw == NULL || !htmp275->initialized) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <TMP275_ReadTemperatureRaw+0x24>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <TMP275_ReadTemperatureRaw+0x24>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <TMP275_ReadTemperatureRaw+0x28>
		return TMP275_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e01c      	b.n	800275a <TMP275_ReadTemperatureRaw+0x62>
	}

	uint8_t _raw[2];
	TMP275_Status_t status = I2C_ReadRegister(htmp275, TMP275_REG_TEMP, _raw, 2);
 8002720:	f107 020c 	add.w	r2, r7, #12
 8002724:	2302      	movs	r3, #2
 8002726:	2100      	movs	r1, #0
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fd4d 	bl	80021c8 <I2C_ReadRegister>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]

	if (status != TMP275_OK) *temp_raw = 0;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <TMP275_ReadTemperatureRaw+0x48>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e00b      	b.n	8002758 <TMP275_ReadTemperatureRaw+0x60>
	else *temp_raw = (int16_t)((_raw[0] << 8) | _raw[1]) >> 4;
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b21b      	sxth	r3, r3
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	7b7b      	ldrb	r3, [r7, #13]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	111b      	asrs	r3, r3, #4
 8002752:	b21a      	sxth	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	801a      	strh	r2, [r3, #0]

	return status;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <TMP275_I2C_Init>:

bool TMP275_IsInitialized(TMP275_Handle_t* htmp275) {
	return (htmp275 != NULL) && htmp275->initialized;
}

void TMP275_I2C_Init(void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8002768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002772:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002776:	6593      	str	r3, [r2, #88]	@ 0x58

    I2C1->CR1 &= ~I2C_CR1_PE;
 8002778:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

    I2C1->TIMINGR = I2C_TIMING_32MHZ_100K;
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 8002786:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <TMP275_I2C_Init+0x40>)
 8002788:	611a      	str	r2, [r3, #16]

    // Clear residual flags before enabling
    i2c_clear_errors(I2C1);
 800278a:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 800278c:	f7ff fb1a 	bl	8001dc4 <i2c_clear_errors>

    I2C1->CR1 |= I2C_CR1_PE;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a02      	ldr	r2, [pc, #8]	@ (80027a0 <TMP275_I2C_Init+0x3c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40005400 	.word	0x40005400
 80027a4:	00707cbb 	.word	0x00707cbb

080027a8 <TMP275_GPIO_Init>:

void TMP275_GPIO_Init(void) {
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Configuration PB6 (SCL) et PB7 (SDA) pour I2C1
	// Mode alternatif
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027c6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027ce:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80027d2:	6013      	str	r3, [r2, #0]
	// Open-drain
	GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027de:	6053      	str	r3, [r2, #4]
	// Vitesse élevée
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 80027e0:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027e6:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80027ea:	6093      	str	r3, [r2, #8]
	// Pull-up interne (optionnel si pull-up externes présentes)
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027f6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 80027fe:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8002802:	60d3      	str	r3, [r2, #12]
	// Fonction alternative AF4 pour I2C1
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8002804:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a06      	ldr	r2, [pc, #24]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 800280a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800280e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((0x4 << GPIO_AFRL_AFSEL6_Pos) | (0x4 << GPIO_AFRL_AFSEL7_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a03      	ldr	r2, [pc, #12]	@ (8002824 <TMP275_GPIO_Init+0x7c>)
 8002816:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800281a:	6213      	str	r3, [r2, #32]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	48000400 	.word	0x48000400

08002828 <LL_AHB2_GRP1_EnableClock>:
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002834:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4313      	orrs	r3, r2
 800283e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002844:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_APB2_GRP1_EnableClock>:
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002864:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4313      	orrs	r3, r2
 800286e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 800288e:	4a26      	ldr	r2, [pc, #152]	@ (8002928 <MX_USART1_UART_Init+0xa0>)
 8002890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002892:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 8002894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a0:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028ae:	220c      	movs	r2, #12
 80028b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028be:	4b19      	ldr	r3, [pc, #100]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ca:	4b16      	ldr	r3, [pc, #88]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028d0:	4814      	ldr	r0, [pc, #80]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028d2:	f003 feb5 	bl	8006640 <HAL_UART_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028dc:	f7fe ff20 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e0:	2100      	movs	r1, #0
 80028e2:	4810      	ldr	r0, [pc, #64]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028e4:	f005 ff37 	bl	8008756 <HAL_UARTEx_SetTxFifoThreshold>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80028ee:	f7fe ff17 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f2:	2100      	movs	r1, #0
 80028f4:	480b      	ldr	r0, [pc, #44]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 80028f6:	f005 ff6c 	bl	80087d2 <HAL_UARTEx_SetRxFifoThreshold>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002900:	f7fe ff0e 	bl	8001720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002904:	4807      	ldr	r0, [pc, #28]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 8002906:	f005 feee 	bl	80086e6 <HAL_UARTEx_DisableFifoMode>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002910:	f7fe ff06 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	4905      	ldr	r1, [pc, #20]	@ (800292c <MX_USART1_UART_Init+0xa4>)
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <MX_USART1_UART_Init+0x9c>)
 800291a:	f003 ff77 	bl	800680c <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200002c0 	.word	0x200002c0
 8002928:	40013800 	.word	0x40013800
 800292c:	20000254 	.word	0x20000254

08002930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b096      	sub	sp, #88	@ 0x58
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2238      	movs	r2, #56	@ 0x38
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f00a fa05 	bl	800cd60 <memset>
  if(uartHandle->Instance==USART1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	@ (80029c8 <HAL_UART_MspInit+0x98>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d12f      	bne.n	80029c0 <HAL_UART_MspInit+0x90>
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002960:	2301      	movs	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002964:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002968:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fefe 	bl	8005770 <HAL_RCCEx_PeriphCLKConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800297a:	f7fe fed1 	bl	8001720 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800297e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002982:	f7ff ff69 	bl	8002858 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2001      	movs	r0, #1
 8002988:	f7ff ff4e 	bl	8002828 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800298c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800299e:	2307      	movs	r3, #7
 80029a0:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029a6:	4619      	mov	r1, r3
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ac:	f001 fae0 	bl	8003f70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2102      	movs	r1, #2
 80029b4:	2024      	movs	r0, #36	@ 0x24
 80029b6:	f001 f9ea 	bl	8003d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ba:	2024      	movs	r0, #36	@ 0x24
 80029bc:	f001 fa01 	bl	8003dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
  /* USER CODE END USART1_MspInit 1 */
  }
}
 80029c0:	bf00      	nop
 80029c2:	3758      	adds	r7, #88	@ 0x58
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40013800 	.word	0x40013800

080029cc <USART1_Interrupt>:
  }
}

/* USER CODE BEGIN 1 */
void USART1_Interrupt(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	if(uart1_rx_index == 0)
 80029d0:	4b32      	ldr	r3, [pc, #200]	@ (8002a9c <USART1_Interrupt+0xd0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10c      	bne.n	80029f2 <USART1_Interrupt+0x26>
	{
		if(waiting_for_ack) ack_code = 0;
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <USART1_Interrupt+0xd4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <USART1_Interrupt+0x1c>
 80029e2:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <USART1_Interrupt+0xd8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
		memset(uart1_rx_buffer, 0, UART1_RX_BUFFER_MAX_SIZE);
 80029e8:	2264      	movs	r2, #100	@ 0x64
 80029ea:	2100      	movs	r1, #0
 80029ec:	482e      	ldr	r0, [pc, #184]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 80029ee:	f00a f9b7 	bl	800cd60 <memset>
	}

	if((uart1_rx_index + 1) > UART1_RX_BUFFER_MAX_SIZE)
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <USART1_Interrupt+0xd0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b63      	cmp	r3, #99	@ 0x63
 80029f8:	d905      	bls.n	8002a06 <USART1_Interrupt+0x3a>
	{
		//overflow
		uart1_rx_index = 0;
 80029fa:	4b28      	ldr	r3, [pc, #160]	@ (8002a9c <USART1_Interrupt+0xd0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
		waiting_for_ack = 0;
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <USART1_Interrupt+0xd4>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
	}

	uart1_rx_buffer[uart1_rx_index] = uart1_rx_data;
 8002a06:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <USART1_Interrupt+0xe0>)
 8002a0e:	7819      	ldrb	r1, [r3, #0]
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a12:	5499      	strb	r1, [r3, r2]
	uart1_rx_index++;
 8002a14:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a1e:	701a      	strb	r2, [r3, #0]

	// Ensure we have at least 3 bytes before checking the 3x 0xFF terminator
	if (uart1_rx_index >= 3 &&
 8002a20:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d932      	bls.n	8002a8e <USART1_Interrupt+0xc2>
		uart1_rx_buffer[uart1_rx_index-1] == 0xFF &&
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
	if (uart1_rx_index >= 3 &&
 8002a32:	2bff      	cmp	r3, #255	@ 0xff
 8002a34:	d12b      	bne.n	8002a8e <USART1_Interrupt+0xc2>
		uart1_rx_buffer[uart1_rx_index-2] == 0xFF &&
 8002a36:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	3b02      	subs	r3, #2
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
		uart1_rx_buffer[uart1_rx_index-1] == 0xFF &&
 8002a40:	2bff      	cmp	r3, #255	@ 0xff
 8002a42:	d124      	bne.n	8002a8e <USART1_Interrupt+0xc2>
		uart1_rx_buffer[uart1_rx_index-3] == 0xFF)
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
		uart1_rx_buffer[uart1_rx_index-2] == 0xFF &&
 8002a4e:	2bff      	cmp	r3, #255	@ 0xff
 8002a50:	d11d      	bne.n	8002a8e <USART1_Interrupt+0xc2>
	{
		//command received
		if(uart1_rx_index == 4 && waiting_for_ack)
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d10c      	bne.n	8002a74 <USART1_Interrupt+0xa8>
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <USART1_Interrupt+0xd4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <USART1_Interrupt+0xa8>
		{
			//ACK (e.g., 0x01 0xFF 0xFF 0xFF)
			ack_code = uart1_rx_buffer[0];
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <USART1_Interrupt+0xd8>)
 8002a6a:	701a      	strb	r2, [r3, #0]
			waiting_for_ack = 0;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <USART1_Interrupt+0xd4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e009      	b.n	8002a88 <USART1_Interrupt+0xbc>
		}
		else if(uart1_rx_index > 4)
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d905      	bls.n	8002a88 <USART1_Interrupt+0xbc>
		{
			//command with payload, forward to app with length for validation
			SubghzApp_UART_RxDone(uart1_rx_buffer, uart1_rx_index);
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	4809      	ldr	r0, [pc, #36]	@ (8002aa8 <USART1_Interrupt+0xdc>)
 8002a84:	f009 fd7e 	bl	800c584 <SubghzApp_UART_RxDone>
		}
		else
		{
			//error non-available command
		}
		uart1_rx_index = 0;
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <USART1_Interrupt+0xd0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	}
	//relancer l'écoute
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4906      	ldr	r1, [pc, #24]	@ (8002aac <USART1_Interrupt+0xe0>)
 8002a92:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <USART1_Interrupt+0xe4>)
 8002a94:	f003 feba 	bl	800680c <HAL_UART_Receive_IT>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200002bc 	.word	0x200002bc
 8002aa0:	200001d4 	.word	0x200001d4
 8002aa4:	200001d5 	.word	0x200001d5
 8002aa8:	20000258 	.word	0x20000258
 8002aac:	20000254 	.word	0x20000254
 8002ab0:	200002c0 	.word	0x200002c0

08002ab4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ab4:	480d      	ldr	r0, [pc, #52]	@ (8002aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ab8:	f7ff f8d0 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	@ (8002af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <LoopForever+0xe>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b00 <LoopForever+0x16>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ae2:	f00a f94b 	bl	800cd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ae6:	f7fe fcf3 	bl	80014d0 <main>

08002aea <LoopForever>:

LoopForever:
    b LoopForever
 8002aea:	e7fe      	b.n	8002aea <LoopForever>
  ldr   r0, =_estack
 8002aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002af8:	0800ddac 	.word	0x0800ddac
  ldr r2, =_sbss
 8002afc:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002b00:	200006dc 	.word	0x200006dc

08002b04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b12:	2003      	movs	r0, #3
 8002b14:	f001 f930 	bl	8003d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b18:	f002 fc4c 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4a09      	ldr	r2, [pc, #36]	@ (8002b44 <HAL_Init+0x3c>)
 8002b20:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 f810 	bl	8002b48 <HAL_InitTick>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	71fb      	strb	r3, [r7, #7]
 8002b32:	e001      	b.n	8002b38 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b34:	f7fe ffc4 	bl	8001ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b38:	79fb      	ldrb	r3, [r7, #7]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000000 	.word	0x20000000

08002b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b54:	4b17      	ldr	r3, [pc, #92]	@ (8002bb4 <HAL_InitTick+0x6c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d024      	beq.n	8002ba6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b5c:	f002 fc2a 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <HAL_InitTick+0x6c>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f932 	bl	8003dde <HAL_SYSTICK_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	d809      	bhi.n	8002b9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b86:	2200      	movs	r2, #0
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8e:	f001 f8fe 	bl	8003d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b92:	4a09      	ldr	r2, [pc, #36]	@ (8002bb8 <HAL_InitTick+0x70>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e007      	b.n	8002baa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e004      	b.n	8002baa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e001      	b.n	8002baa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	2000005c 	.word	0x2000005c
 8002bb8:	20000058 	.word	0x20000058

08002bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_IncTick+0x1c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a03      	ldr	r2, [pc, #12]	@ (8002bdc <HAL_IncTick+0x20>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	2000005c 	.word	0x2000005c
 8002bdc:	2000038c 	.word	0x2000038c

08002be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return uwTick;
 8002be4:	4b02      	ldr	r3, [pc, #8]	@ (8002bf0 <HAL_GetTick+0x10>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	2000038c 	.word	0x2000038c

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffe0 	bl	8002be0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000005c 	.word	0x2000005c

08002c3c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2107      	movs	r1, #7
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	401a      	ands	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2107      	movs	r1, #7
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	210f      	movs	r1, #15
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	401a      	ands	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0e9b      	lsrs	r3, r3, #26
 8002d2e:	f003 010f 	and.w	r1, r3, #15
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0219      	lsls	r1, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	400b      	ands	r3, r1
 8002db6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002dba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002dde:	f023 0317 	bic.w	r3, r3, #23
 8002de2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e2a:	f023 0317 	bic.w	r3, r3, #23
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e50:	f023 0317 	bic.w	r3, r3, #23
 8002e54:	f043 0202 	orr.w	r2, r3, #2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_IsEnabled+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_IsEnabled+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d101      	bne.n	8002ea2 <LL_ADC_IsDisableOngoing+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_ADC_IsDisableOngoing+0x1a>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ebe:	f023 0317 	bic.w	r3, r3, #23
 8002ec2:	f043 0204 	orr.w	r2, r3, #4
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ee4:	f023 0317 	bic.w	r3, r3, #23
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e17e      	b.n	8003240 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fe f97d 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff43 	bl	8002df4 <LL_ADC_IsInternalRegulatorEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff28 	bl	8002dce <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80031f8 <HAL_ADC_Init+0x2d8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	099b      	lsrs	r3, r3, #6
 8002f84:	4a9d      	ldr	r2, [pc, #628]	@ (80031fc <HAL_ADC_Init+0x2dc>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f92:	e002      	b.n	8002f9a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff25 	bl	8002df4 <LL_ADC_IsInternalRegulatorEnabled>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff92 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 8002fd6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f040 8124 	bne.w	800322e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 8120 	bne.w	800322e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff2f 	bl	8002e66 <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 80a7 	bne.w	800315e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7e1b      	ldrb	r3, [r3, #24]
 8003018:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800301a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e5b      	ldrb	r3, [r3, #25]
 8003020:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003022:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7e9b      	ldrb	r3, [r3, #26]
 8003028:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800302a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003030:	2a00      	cmp	r2, #0
 8003032:	d002      	beq.n	800303a <HAL_ADC_Init+0x11a>
 8003034:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003038:	e000      	b.n	800303c <HAL_ADC_Init+0x11c>
 800303a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800303c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003042:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da04      	bge.n	8003056 <HAL_ADC_Init+0x136>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003054:	e001      	b.n	800305a <HAL_ADC_Init+0x13a>
 8003056:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800305a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003062:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003064:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d114      	bne.n	80030a0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7e9b      	ldrb	r3, [r3, #26]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d104      	bne.n	8003088 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e00b      	b.n	80030a0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80030b4:	4313      	orrs	r3, r2
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80030c6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	69b9      	ldr	r1, [r7, #24]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030e0:	4313      	orrs	r3, r2
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d111      	bne.n	8003116 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030fe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003104:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800310a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	4313      	orrs	r3, r2
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b38      	ldr	r3, [pc, #224]	@ (8003200 <HAL_ADC_Init+0x2e0>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	6979      	ldr	r1, [r7, #20]
 8003126:	430b      	orrs	r3, r1
 8003128:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003132:	d014      	beq.n	800315e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313c:	d00f      	beq.n	800315e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003146:	d00a      	beq.n	800315e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003148:	4b2e      	ldr	r3, [pc, #184]	@ (8003204 <HAL_ADC_Init+0x2e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003158:	492a      	ldr	r1, [pc, #168]	@ (8003204 <HAL_ADC_Init+0x2e4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	461a      	mov	r2, r3
 8003168:	2100      	movs	r1, #0
 800316a:	f7ff fd86 	bl	8002c7a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	461a      	mov	r2, r3
 8003178:	4923      	ldr	r1, [pc, #140]	@ (8003208 <HAL_ADC_Init+0x2e8>)
 800317a:	f7ff fd7e 	bl	8002c7a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f062 020f 	orn	r2, r2, #15
 8003194:	629a      	str	r2, [r3, #40]	@ 0x28
 8003196:	e017      	b.n	80031c8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a0:	d112      	bne.n	80031c8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	f003 031c 	and.w	r3, r3, #28
 80031b4:	f06f 020f 	mvn.w	r2, #15
 80031b8:	fa02 f103 	lsl.w	r1, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd71 	bl	8002cb6 <LL_ADC_GetSamplingTimeCommonChannels>
 80031d4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d116      	bne.n	800320c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	f023 0303 	bic.w	r3, r3, #3
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031f4:	e023      	b.n	800323e <HAL_ADC_Init+0x31e>
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000
 80031fc:	053e2d63 	.word	0x053e2d63
 8003200:	1ffffc02 	.word	0x1ffffc02
 8003204:	40012708 	.word	0x40012708
 8003208:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f023 0312 	bic.w	r3, r3, #18
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800322c:	e007      	b.n	800323e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800323e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fe50 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d132      	bne.n	80032c6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADC_Start+0x26>
 800326a:	2302      	movs	r3, #2
 800326c:	e02e      	b.n	80032cc <HAL_ADC_Start+0x84>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa80 	bl	800377c <ADC_Enable>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11a      	bne.n	80032bc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	221c      	movs	r2, #28
 80032a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fdfa 	bl	8002eae <LL_ADC_REG_StartConversion>
 80032ba:	e006      	b.n	80032ca <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80032c4:	e001      	b.n	80032ca <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_Stop+0x16>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e022      	b.n	8003330 <HAL_ADC_Stop+0x5c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9fc 	bl	80036f0 <ADC_ConversionStop>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d111      	bne.n	8003326 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fac0 	bl	8003888 <ADC_Disable>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d102      	bne.n	8003350 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800334a:	2308      	movs	r3, #8
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e010      	b.n	8003372 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e077      	b.n	800345e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800336e:	2304      	movs	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003372:	f7ff fc35 	bl	8002be0 <HAL_GetTick>
 8003376:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003378:	e021      	b.n	80033be <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d01d      	beq.n	80033be <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003382:	f7ff fc2d 	bl	8002be0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <HAL_ADC_PollForConversion+0x60>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d112      	bne.n	80033be <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e04f      	b.n	800345e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0d6      	beq.n	800337a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc82 	bl	8002ce6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d031      	beq.n	800344c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7e9b      	ldrb	r3, [r3, #26]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d12d      	bne.n	800344c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d126      	bne.n	800344c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fd79 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d112      	bne.n	8003434 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 020c 	bic.w	r2, r2, #12
 800341c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	@ 0x58
 8003432:	e00b      	b.n	800344c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	220c      	movs	r2, #12
 800345a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
	...

08003480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x28>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e110      	b.n	80036ca <HAL_ADC_ConfigChannel+0x24a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fd20 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 80f7 	bne.w	80036b0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	f000 80b1 	beq.w	800362e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034d4:	d004      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_ADC_ConfigChannel+0x254>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7ff fc2e 	bl	8002d4c <LL_ADC_REG_SetSequencerChAdd>
 80034f0:	e041      	b.n	8003576 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	210f      	movs	r1, #15
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_ADC_ConfigChannel+0xa0>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	e011      	b.n	8003544 <HAL_ADC_ConfigChannel+0xc4>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	6849      	ldr	r1, [r1, #4]
 8003548:	f001 011f 	and.w	r1, r1, #31
 800354c:	408b      	lsls	r3, r1
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	429a      	cmp	r2, r3
 8003562:	d808      	bhi.n	8003576 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	f7ff fbca 	bl	8002d0a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	461a      	mov	r2, r3
 8003584:	f7ff fc07 	bl	8002d96 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f280 8097 	bge.w	80036c0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003592:	4851      	ldr	r0, [pc, #324]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003594:	f7ff fb64 	bl	8002c60 <LL_ADC_GetCommonPathInternalCh>
 8003598:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a4f      	ldr	r2, [pc, #316]	@ (80036dc <HAL_ADC_ConfigChannel+0x25c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d120      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11b      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035b4:	4619      	mov	r1, r3
 80035b6:	4848      	ldr	r0, [pc, #288]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 80035b8:	f7ff fb40 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035bc:	4b48      	ldr	r3, [pc, #288]	@ (80036e0 <HAL_ADC_ConfigChannel+0x260>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a48      	ldr	r2, [pc, #288]	@ (80036e4 <HAL_ADC_ConfigChannel+0x264>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035d6:	e002      	b.n	80035de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3b01      	subs	r3, #1
 80035dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f9      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035e4:	e06c      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a3f      	ldr	r2, [pc, #252]	@ (80036e8 <HAL_ADC_ConfigChannel+0x268>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10c      	bne.n	800360a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003600:	4619      	mov	r1, r3
 8003602:	4835      	ldr	r0, [pc, #212]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003604:	f7ff fb1a 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
 8003608:	e05a      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a37      	ldr	r2, [pc, #220]	@ (80036ec <HAL_ADC_ConfigChannel+0x26c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d155      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d150      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003624:	4619      	mov	r1, r3
 8003626:	482c      	ldr	r0, [pc, #176]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003628:	f7ff fb08 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
 800362c:	e048      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003636:	d004      	beq.n	8003642 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800363c:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <HAL_ADC_ConfigChannel+0x254>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f7ff fb8f 	bl	8002d70 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	da32      	bge.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800365a:	481f      	ldr	r0, [pc, #124]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 800365c:	f7ff fb00 	bl	8002c60 <LL_ADC_GetCommonPathInternalCh>
 8003660:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1d      	ldr	r2, [pc, #116]	@ (80036dc <HAL_ADC_ConfigChannel+0x25c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d107      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003672:	4619      	mov	r1, r3
 8003674:	4818      	ldr	r0, [pc, #96]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003676:	f7ff fae1 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
 800367a:	e021      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_ADC_ConfigChannel+0x268>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d107      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800368c:	4619      	mov	r1, r3
 800368e:	4812      	ldr	r0, [pc, #72]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003690:	f7ff fad4 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
 8003694:	e014      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <HAL_ADC_ConfigChannel+0x26c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10f      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80036a6:	4619      	mov	r1, r3
 80036a8:	480b      	ldr	r0, [pc, #44]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 80036aa:	f7ff fac7 	bl	8002c3c <LL_ADC_SetCommonPathInternalCh>
 80036ae:	e007      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80036c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	80000004 	.word	0x80000004
 80036d8:	40012708 	.word	0x40012708
 80036dc:	b0001000 	.word	0xb0001000
 80036e0:	20000000 	.word	0x20000000
 80036e4:	053e2d63 	.word	0x053e2d63
 80036e8:	b8004000 	.word	0xb8004000
 80036ec:	b4002000 	.word	0xb4002000

080036f0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fbfc 	bl	8002efa <LL_ADC_REG_IsConversionOngoing>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d033      	beq.n	8003770 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fbbc 	bl	8002e8a <LL_ADC_IsDisableOngoing>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fbd9 	bl	8002ed4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003722:	f7ff fa5d 	bl	8002be0 <HAL_GetTick>
 8003726:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003728:	e01b      	b.n	8003762 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800372a:	f7ff fa59 	bl	8002be0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d914      	bls.n	8003762 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e007      	b.n	8003772 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1dc      	bne.n	800372a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fb6a 	bl	8002e66 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d169      	bne.n	800386c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	4b36      	ldr	r3, [pc, #216]	@ (8003878 <ADC_Enable+0xfc>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f043 0210 	orr.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e055      	b.n	800386e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fb27 	bl	8002e1a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80037cc:	482b      	ldr	r0, [pc, #172]	@ (800387c <ADC_Enable+0x100>)
 80037ce:	f7ff fa47 	bl	8002c60 <LL_ADC_GetCommonPathInternalCh>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00f      	beq.n	80037fc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <ADC_Enable+0x104>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <ADC_Enable+0x108>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80037ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037ee:	e002      	b.n	80037f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f9      	bne.n	80037f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7e5b      	ldrb	r3, [r3, #25]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d033      	beq.n	800386c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003804:	f7ff f9ec 	bl	8002be0 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380a:	e028      	b.n	800385e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb28 	bl	8002e66 <LL_ADC_IsEnabled>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fafa 	bl	8002e1a <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003826:	f7ff f9db 	bl	8002be0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d914      	bls.n	800385e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00d      	beq.n	800385e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	f043 0210 	orr.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e007      	b.n	800386e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d1cf      	bne.n	800380c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	80000017 	.word	0x80000017
 800387c:	40012708 	.word	0x40012708
 8003880:	20000000 	.word	0x20000000
 8003884:	053e2d63 	.word	0x053e2d63

08003888 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff faf8 	bl	8002e8a <LL_ADC_IsDisableOngoing>
 800389a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fae0 	bl	8002e66 <LL_ADC_IsEnabled>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d047      	beq.n	800393c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d144      	bne.n	800393c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0305 	and.w	r3, r3, #5
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10c      	bne.n	80038da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fabb 	bl	8002e40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2203      	movs	r2, #3
 80038d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038d2:	f7ff f985 	bl	8002be0 <HAL_GetTick>
 80038d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038d8:	e029      	b.n	800392e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e023      	b.n	800393e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038f6:	f7ff f973 	bl	8002be0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d914      	bls.n	800392e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	f043 0210 	orr.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e007      	b.n	800393e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1dc      	bne.n	80038f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <LL_ADC_SetCalibrationFactor>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003956:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr

0800396e <LL_ADC_GetCalibrationFactor>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800397c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <LL_ADC_Enable>:
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800399a:	f023 0317 	bic.w	r3, r3, #23
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <LL_ADC_Disable>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039c0:	f023 0317 	bic.w	r3, r3, #23
 80039c4:	f043 0202 	orr.w	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <LL_ADC_IsEnabled>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <LL_ADC_IsEnabled+0x18>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <LL_ADC_IsEnabled+0x1a>
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_StartCalibration>:
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a0a:	f023 0317 	bic.w	r3, r3, #23
 8003a0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a34:	d101      	bne.n	8003a3a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b088      	sub	sp, #32
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADCEx_Calibration_Start+0x1e>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e0b9      	b.n	8003bd8 <HAL_ADCEx_Calibration_Start+0x192>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff0b 	bl	8003888 <ADC_Disable>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ffab 	bl	80039d6 <LL_ADC_IsEnabled>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 809d 	bne.w	8003bc2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a90:	f043 0202 	orr.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ab4:	f023 0303 	bic.w	r3, r3, #3
 8003ab8:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e02e      	b.n	8003b1e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff98 	bl	80039fa <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003aca:	e014      	b.n	8003af6 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003ad8:	d30d      	bcc.n	8003af6 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	f023 0312 	bic.w	r3, r3, #18
 8003ae2:	f043 0210 	orr.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e070      	b.n	8003bd8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff90 	bl	8003a20 <LL_ADC_IsCalibrationOnGoing>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e2      	bne.n	8003acc <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff ff2f 	bl	800396e <LL_ADC_GetCalibrationFactor>
 8003b10:	4602      	mov	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b07      	cmp	r3, #7
 8003b22:	d9cd      	bls.n	8003ac0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff29 	bl	800398a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ff01 	bl	8003946 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff ff31 	bl	80039b0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b4e:	f7ff f847 	bl	8002be0 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b54:	e01c      	b.n	8003b90 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b56:	f7ff f843 	bl	8002be0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d915      	bls.n	8003b90 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff34 	bl	80039d6 <LL_ADC_IsEnabled>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00d      	beq.n	8003b90 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b78:	f043 0210 	orr.w	r2, r3, #16
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e023      	b.n	8003bd8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff1e 	bl	80039d6 <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1da      	bne.n	8003b56 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f023 0303 	bic.w	r3, r3, #3
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bc0:	e005      	b.n	8003bce <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4906      	ldr	r1, [pc, #24]	@ (8003c78 <__NVIC_EnableIRQ+0x34>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	@ (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	@ 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d44:	d301      	bcc.n	8003d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d74 <SysTick_Config+0x40>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d52:	210f      	movs	r1, #15
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	f7ff ff90 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d5c:	4b05      	ldr	r3, [pc, #20]	@ (8003d74 <SysTick_Config+0x40>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d62:	4b04      	ldr	r3, [pc, #16]	@ (8003d74 <SysTick_Config+0x40>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000e010 	.word	0xe000e010

08003d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff2d 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d9c:	f7ff ff44 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6978      	ldr	r0, [r7, #20]
 8003da8:	f7ff ff92 	bl	8003cd0 <NVIC_EncodePriority>
 8003dac:	4602      	mov	r2, r0
 8003dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff61 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	4603      	mov	r3, r0
 8003dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff37 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ffa4 	bl	8003d34 <SysTick_Config>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e04f      	b.n	8003ea8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d008      	beq.n	8003e26 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e040      	b.n	8003ea8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 020e 	bic.w	r2, r2, #14
 8003e34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f003 021c 	and.w	r2, r3, #28
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2101      	movs	r1, #1
 8003e64:	fa01 f202 	lsl.w	r2, r1, r2
 8003e68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d005      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e047      	b.n	8003f66 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 020e 	bic.w	r2, r2, #14
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f003 021c 	and.w	r2, r3, #28
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f202 	lsl.w	r2, r1, r2
 8003f18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
    }
  }
  return status;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f7e:	e140      	b.n	8004202 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8132 	beq.w	80041fc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d005      	beq.n	8003fb0 <HAL_GPIO_Init+0x40>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d130      	bne.n	8004012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	f003 0201 	and.w	r2, r3, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d017      	beq.n	800404e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d123      	bne.n	80040a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	08da      	lsrs	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	220f      	movs	r2, #15
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	6939      	ldr	r1, [r7, #16]
 800409e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2203      	movs	r2, #3
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 808c 	beq.w	80041fc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80040e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004220 <HAL_GPIO_Init+0x2b0>)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	2207      	movs	r2, #7
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800410e:	d00d      	beq.n	800412c <HAL_GPIO_Init+0x1bc>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a44      	ldr	r2, [pc, #272]	@ (8004224 <HAL_GPIO_Init+0x2b4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <HAL_GPIO_Init+0x1b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a43      	ldr	r2, [pc, #268]	@ (8004228 <HAL_GPIO_Init+0x2b8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_GPIO_Init+0x1b4>
 8004120:	2302      	movs	r3, #2
 8004122:	e004      	b.n	800412e <HAL_GPIO_Init+0x1be>
 8004124:	2307      	movs	r3, #7
 8004126:	e002      	b.n	800412e <HAL_GPIO_Init+0x1be>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_GPIO_Init+0x1be>
 800412c:	2300      	movs	r3, #0
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	f002 0203 	and.w	r2, r2, #3
 8004134:	0092      	lsls	r2, r2, #2
 8004136:	4093      	lsls	r3, r2
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800413e:	4938      	ldr	r1, [pc, #224]	@ (8004220 <HAL_GPIO_Init+0x2b0>)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	3302      	adds	r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800414c:	4b37      	ldr	r3, [pc, #220]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004170:	4a2e      	ldr	r2, [pc, #184]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800419a:	4a24      	ldr	r2, [pc, #144]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80041a0:	4b22      	ldr	r3, [pc, #136]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80041c6:	4a19      	ldr	r2, [pc, #100]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80041ce:	4b17      	ldr	r3, [pc, #92]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80041f4:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f aeb7 	bne.w	8003f80 <HAL_GPIO_Init+0x10>
  }
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010000 	.word	0x40010000
 8004224:	48000400 	.word	0x48000400
 8004228:	48000800 	.word	0x48000800
 800422c:	58000800 	.word	0x58000800

08004230 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e001      	b.n	8004252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]
 800426a:	4613      	mov	r3, r2
 800426c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426e:	787b      	ldrb	r3, [r7, #1]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004274:	887a      	ldrh	r2, [r7, #2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800427a:	e002      	b.n	8004282 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e041      	b.n	8004322 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80042a6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f245 5255 	movw	r2, #21845	@ 0x5555
 80042b0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6852      	ldr	r2, [r2, #4]
 80042ba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80042c6:	f7fe fc8b 	bl	8002be0 <HAL_GetTick>
 80042ca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80042cc:	e00f      	b.n	80042ee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80042ce:	f7fe fc87 	bl	8002be0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b31      	cmp	r3, #49	@ 0x31
 80042da:	d908      	bls.n	80042ee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e019      	b.n	8004322 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e8      	bne.n	80042ce <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	429a      	cmp	r2, r3
 8004308:	d005      	beq.n	8004316 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68d2      	ldr	r2, [r2, #12]
 8004312:	611a      	str	r2, [r3, #16]
 8004314:	e004      	b.n	8004320 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800433a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <HAL_PWR_EnableBkUpAccess+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a03      	ldr	r2, [pc, #12]	@ (8004360 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	58000400 	.word	0x58000400

08004364 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <HAL_PWREx_GetVoltageRange+0x14>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr
 8004378:	58000400 	.word	0x58000400

0800437c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438c:	d101      	bne.n	8004392 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	58000400 	.word	0x58000400

080043a0 <LL_RCC_HSE_EnableTcxo>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <LL_RCC_HSE_DisableTcxo>:
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043ce:	6013      	str	r3, [r2, #0]
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80043dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ea:	d101      	bne.n	80043f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <LL_RCC_HSE_Enable>:
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800440c:	6013      	str	r3, [r2, #0]
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_RCC_HSE_Disable>:
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
}
 800442a:	bf00      	nop
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <LL_RCC_HSE_IsReady>:
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004444:	d101      	bne.n	800444a <LL_RCC_HSE_IsReady+0x18>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_RCC_HSE_IsReady+0x1a>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <LL_RCC_HSI_Enable>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <LL_RCC_HSI_Disable>:
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800447e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004482:	6013      	str	r3, [r2, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <LL_RCC_HSI_IsReady>:
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449e:	d101      	bne.n	80044a4 <LL_RCC_HSI_IsReady+0x18>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <LL_RCC_HSI_IsReady+0x1a>
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_HSI_SetCalibTrimming>:
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_LSE_IsReady>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <LL_RCC_LSE_IsReady+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_RCC_LSE_IsReady+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_LSI_Enable>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <LL_RCC_LSI_Disable>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <LL_RCC_LSI_IsReady>:
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800453c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d101      	bne.n	8004550 <LL_RCC_LSI_IsReady+0x18>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <LL_RCC_LSI_IsReady+0x1a>
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <LL_RCC_MSI_Enable>:
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <LL_RCC_MSI_Disable>:
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6013      	str	r3, [r2, #0]
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <LL_RCC_MSI_IsReady>:
{
 8004592:	b480      	push	{r7}
 8004594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d101      	bne.n	80045a8 <LL_RCC_MSI_IsReady+0x16>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <LL_RCC_MSI_IsReady+0x18>
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d101      	bne.n	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <LL_RCC_MSI_GetRange>:
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80045d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80045ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <LL_RCC_SetSysClkSource>:
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <LL_RCC_GetSysClkSource>:
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <LL_RCC_SetAHBPrescaler>:
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800466c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <LL_C2_RCC_SetAHBPrescaler>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004696:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800469a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800469e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_SetAHB3Prescaler>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80046c4:	f023 020f 	bic.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_SetAPB1Prescaler>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <LL_RCC_SetAPB2Prescaler>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <LL_RCC_GetAHBPrescaler>:
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <LL_RCC_GetAHB3Prescaler>:
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <LL_RCC_GetAPB1Prescaler>:
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800476a:	4618      	mov	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <LL_RCC_GetAPB2Prescaler>:
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047d2:	d101      	bne.n	80047d8 <LL_RCC_PLL_IsReady+0x18>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <LL_RCC_PLL_IsReady+0x1a>
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d101      	bne.n	8004854 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004866:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004872:	d101      	bne.n	8004878 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800488e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004896:	d101      	bne.n	800489c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048b8:	d101      	bne.n	80048be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048da:	d101      	bne.n	80048e0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e36f      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	f7ff fea6 	bl	800464e <LL_RCC_GetSysClkSource>
 8004902:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004904:	f7ff ff8f 	bl	8004826 <LL_RCC_PLL_GetMainSource>
 8004908:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80c4 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_RCC_OscConfig+0x3e>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d176      	bne.n	8004a12 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d173      	bne.n	8004a12 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e353      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x68>
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004952:	e006      	b.n	8004962 <HAL_RCC_OscConfig+0x76>
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004962:	4293      	cmp	r3, r2
 8004964:	d222      	bcs.n	80049ac <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd5a 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e331      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004984:	f043 0308 	orr.w	r3, r3, #8
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fe2b 	bl	8004600 <LL_RCC_MSI_SetCalibTrimming>
 80049aa:	e021      	b.n	80049f0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049b6:	f043 0308 	orr.w	r3, r3, #8
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fe12 	bl	8004600 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd1f 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e2f6      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049f0:	f000 fce0 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4aa7      	ldr	r2, [pc, #668]	@ (8004c94 <HAL_RCC_OscConfig+0x3a8>)
 80049f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80049fa:	4ba7      	ldr	r3, [pc, #668]	@ (8004c98 <HAL_RCC_OscConfig+0x3ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f8a2 	bl	8002b48 <HAL_InitTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d047      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	e2e5      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a1a:	f7ff fd9e 	bl	800455a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe f8df 	bl	8002be0 <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a26:	f7fe f8db 	bl	8002be0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e2d2      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a38:	f7ff fdab 	bl	8004592 <LL_RCC_MSI_IsReady>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f1      	beq.n	8004a26 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a64:	4313      	orrs	r3, r2
 8004a66:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fdc7 	bl	8004600 <LL_RCC_MSI_SetCalibTrimming>
 8004a72:	e015      	b.n	8004aa0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a74:	f7ff fd7f 	bl	8004576 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a78:	f7fe f8b2 	bl	8002be0 <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a80:	f7fe f8ae 	bl	8002be0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e2a5      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a92:	f7ff fd7e 	bl	8004592 <LL_RCC_MSI_IsReady>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f1      	bne.n	8004a80 <HAL_RCC_OscConfig+0x194>
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a9e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d058      	beq.n	8004b5e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_OscConfig+0x1d2>
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d108      	bne.n	8004aca <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d105      	bne.n	8004aca <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d14b      	bne.n	8004b5e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e289      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae8:	d102      	bne.n	8004af0 <HAL_RCC_OscConfig+0x204>
 8004aea:	f7ff fc86 	bl	80043fa <LL_RCC_HSE_Enable>
 8004aee:	e00d      	b.n	8004b0c <HAL_RCC_OscConfig+0x220>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004af8:	d104      	bne.n	8004b04 <HAL_RCC_OscConfig+0x218>
 8004afa:	f7ff fc51 	bl	80043a0 <LL_RCC_HSE_EnableTcxo>
 8004afe:	f7ff fc7c 	bl	80043fa <LL_RCC_HSE_Enable>
 8004b02:	e003      	b.n	8004b0c <HAL_RCC_OscConfig+0x220>
 8004b04:	f7ff fc87 	bl	8004416 <LL_RCC_HSE_Disable>
 8004b08:	f7ff fc58 	bl	80043bc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fe f864 	bl	8002be0 <HAL_GetTick>
 8004b18:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fe f860 	bl	8002be0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	@ 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e257      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b2e:	f7ff fc80 	bl	8004432 <LL_RCC_HSE_IsReady>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f1      	beq.n	8004b1c <HAL_RCC_OscConfig+0x230>
 8004b38:	e011      	b.n	8004b5e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fe f851 	bl	8002be0 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b42:	f7fe f84d 	bl	8002be0 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	@ 0x64
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e244      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b54:	f7ff fc6d 	bl	8004432 <LL_RCC_HSE_IsReady>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f1      	bne.n	8004b42 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d046      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_OscConfig+0x290>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d10e      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e22a      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fc8e 	bl	80044ae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b92:	e031      	b.n	8004bf8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d019      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9c:	f7ff fc5a 	bl	8004454 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe f81e 	bl	8002be0 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fe f81a 	bl	8002be0 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e211      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004bba:	f7ff fc67 	bl	800448c <LL_RCC_HSI_IsReady>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f1      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fc70 	bl	80044ae <LL_RCC_HSI_SetCalibTrimming>
 8004bce:	e013      	b.n	8004bf8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd0:	f7ff fc4e 	bl	8004470 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fe f804 	bl	8002be0 <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bdc:	f7fe f800 	bl	8002be0 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1f7      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bee:	f7ff fc4d 	bl	800448c <LL_RCC_HSI_IsReady>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f1      	bne.n	8004bdc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d06e      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d056      	beq.n	8004cba <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c14:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d031      	beq.n	8004c88 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e1d0      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004c46:	f7ff fc67 	bl	8004518 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c4a:	f7fd ffc9 	bl	8002be0 <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c52:	f7fd ffc5 	bl	8002be0 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b11      	cmp	r3, #17
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e1bc      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004c64:	f7ff fc68 	bl	8004538 <LL_RCC_LSI_IsReady>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f1      	bne.n	8004c52 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c76:	f023 0210 	bic.w	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c88:	f7ff fc36 	bl	80044f8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd ffa8 	bl	8002be0 <HAL_GetTick>
 8004c90:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004c92:	e00c      	b.n	8004cae <HAL_RCC_OscConfig+0x3c2>
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000058 	.word	0x20000058
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fd ffa0 	bl	8002be0 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b11      	cmp	r3, #17
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e197      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004cae:	f7ff fc43 	bl	8004538 <LL_RCC_LSI_IsReady>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f1      	beq.n	8004c9c <HAL_RCC_OscConfig+0x3b0>
 8004cb8:	e013      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cba:	f7ff fc2d 	bl	8004518 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbe:	f7fd ff8f 	bl	8002be0 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc6:	f7fd ff8b 	bl	8002be0 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b11      	cmp	r3, #17
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e182      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004cd8:	f7ff fc2e 	bl	8004538 <LL_RCC_LSI_IsReady>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f1      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80d8 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004cf0:	f7ff fb44 	bl	800437c <LL_PWR_IsEnabledBkUpAccess>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d113      	bne.n	8004d22 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cfa:	f7ff fb25 	bl	8004348 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd ff6f 	bl	8002be0 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd ff6b 	bl	8002be0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e162      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004d18:	f7ff fb30 	bl	800437c <LL_PWR_IsEnabledBkUpAccess>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f1      	beq.n	8004d06 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d07b      	beq.n	8004e22 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b85      	cmp	r3, #133	@ 0x85
 8004d30:	d003      	beq.n	8004d3a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d46:	f043 0304 	orr.w	r3, r3, #4
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4e:	f7fd ff47 	bl	8002be0 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fd ff39 	bl	8002be0 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e12e      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d80:	f7ff fba9 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ef      	beq.n	8004d6a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b81      	cmp	r3, #129	@ 0x81
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b85      	cmp	r3, #133	@ 0x85
 8004d98:	d121      	bne.n	8004dde <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fd ff21 	bl	8002be0 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd ff13 	bl	8002be0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e108      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ec      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ddc:	e060      	b.n	8004ea0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dde:	f7fd feff 	bl	8002be0 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004df8:	e00a      	b.n	8004e10 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfa:	f7fd fef1 	bl	8002be0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e0e6      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ec      	bne.n	8004dfa <HAL_RCC_OscConfig+0x50e>
 8004e20:	e03e      	b.n	8004ea0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fd fedd 	bl	8002be0 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fd fecf 	bl	8002be0 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0c4      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ec      	bne.n	8004e3e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e64:	f7fd febc 	bl	8002be0 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7fd feae 	bl	8002be0 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e0a3      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e96:	f7ff fb1e 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ef      	bne.n	8004e80 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8099 	beq.w	8004fdc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d06c      	beq.n	8004f8a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d14b      	bne.n	8004f50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb8:	f7ff fc74 	bl	80047a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fd fe90 	bl	8002be0 <HAL_GetTick>
 8004ec0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fd fe8c 	bl	8002be0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b0a      	cmp	r3, #10
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e083      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ed6:	f7ff fc73 	bl	80047c0 <LL_RCC_PLL_IsReady>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f1      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	4b40      	ldr	r3, [pc, #256]	@ (8004fe8 <HAL_RCC_OscConfig+0x6fc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ef8:	0212      	lsls	r2, r2, #8
 8004efa:	4311      	orrs	r1, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f06:	4311      	orrs	r1, r2
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f16:	f7ff fc37 	bl	8004788 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd fe59 	bl	8002be0 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fd fe55 	bl	8002be0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b0a      	cmp	r3, #10
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e04c      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004f44:	f7ff fc3c 	bl	80047c0 <LL_RCC_PLL_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f1      	beq.n	8004f32 <HAL_RCC_OscConfig+0x646>
 8004f4e:	e045      	b.n	8004fdc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f50:	f7ff fc28 	bl	80047a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd fe44 	bl	8002be0 <HAL_GetTick>
 8004f58:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd fe40 	bl	8002be0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b0a      	cmp	r3, #10
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e037      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004f6e:	f7ff fc27 	bl	80047c0 <LL_RCC_PLL_IsReady>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f82:	4b1a      	ldr	r3, [pc, #104]	@ (8004fec <HAL_RCC_OscConfig+0x700>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	60cb      	str	r3, [r1, #12]
 8004f88:	e028      	b.n	8004fdc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e023      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d115      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	11c1808c 	.word	0x11c1808c
 8004fec:	eefefffc 	.word	0xeefefffc

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e12c      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b98      	ldr	r3, [pc, #608]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d91b      	bls.n	800504a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b95      	ldr	r3, [pc, #596]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4993      	ldr	r1, [pc, #588]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005022:	f7fd fddd 	bl	8002be0 <HAL_GetTick>
 8005026:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005028:	e008      	b.n	800503c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800502a:	f7fd fdd9 	bl	8002be0 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e110      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503c:	4b8a      	ldr	r3, [pc, #552]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1ef      	bne.n	800502a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fb02 	bl	8004664 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005060:	f7fd fdbe 	bl	8002be0 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005068:	f7fd fdba 	bl	8002be0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0f1      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800507a:	f7ff fbdf 	bl	800483c <LL_RCC_IsActiveFlag_HPRE>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f1      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d016      	beq.n	80050be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff faf8 	bl	800468a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800509a:	f7fd fda1 	bl	8002be0 <HAL_GetTick>
 800509e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050a2:	f7fd fd9d 	bl	8002be0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0d4      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050b4:	f7ff fbd3 	bl	800485e <LL_RCC_IsActiveFlag_C2HPRE>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f1      	beq.n	80050a2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff faf0 	bl	80046b4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fd84 	bl	8002be0 <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050dc:	f7fd fd80 	bl	8002be0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0b7      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050ee:	f7ff fbc8 	bl	8004882 <LL_RCC_IsActiveFlag_SHDHPRE>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f1      	beq.n	80050dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d016      	beq.n	8005132 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fae9 	bl	80046e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800510e:	f7fd fd67 	bl	8002be0 <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005116:	f7fd fd63 	bl	8002be0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e09a      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005128:	f7ff fbbd 	bl	80048a6 <LL_RCC_IsActiveFlag_PPRE1>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f1      	beq.n	8005116 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fade 	bl	8004706 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800514a:	f7fd fd49 	bl	8002be0 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005152:	f7fd fd45 	bl	8002be0 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e07c      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005164:	f7ff fbb0 	bl	80048c8 <LL_RCC_IsActiveFlag_PPRE2>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f1      	beq.n	8005152 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d043      	beq.n	8005202 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d106      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005182:	f7ff f956 	bl	8004432 <LL_RCC_HSE_IsReady>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d11e      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e066      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005198:	f7ff fb12 	bl	80047c0 <LL_RCC_PLL_IsReady>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e05b      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80051ae:	f7ff f9f0 	bl	8004592 <LL_RCC_MSI_IsReady>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e050      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80051bc:	f7ff f966 	bl	800448c <LL_RCC_HSI_IsReady>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fa2a 	bl	8004628 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d4:	f7fd fd04 	bl	8002be0 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fd fd00 	bl	8002be0 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e035      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	f7ff fa2c 	bl	800464e <LL_RCC_GetSysClkSource>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	429a      	cmp	r2, r3
 8005200:	d1ec      	bne.n	80051dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005202:	4b19      	ldr	r3, [pc, #100]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d21b      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005210:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 0207 	bic.w	r2, r3, #7
 8005218:	4913      	ldr	r1, [pc, #76]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005220:	f7fd fcde 	bl	8002be0 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	e008      	b.n	800523a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005228:	f7fd fcda 	bl	8002be0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e011      	b.n	800525e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCC_ClockConfig+0x278>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1ef      	bne.n	8005228 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005248:	f000 f8b4 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 800524c:	4603      	mov	r3, r0
 800524e:	4a07      	ldr	r2, [pc, #28]	@ (800526c <HAL_RCC_ClockConfig+0x27c>)
 8005250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005252:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <HAL_RCC_ClockConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7fd fc76 	bl	8002b48 <HAL_InitTick>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	58004000 	.word	0x58004000
 800526c:	20000000 	.word	0x20000000
 8005270:	20000058 	.word	0x20000058

08005274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005282:	f7ff f9e4 	bl	800464e <LL_RCC_GetSysClkSource>
 8005286:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005288:	f7ff facd 	bl	8004826 <LL_RCC_PLL_GetMainSource>
 800528c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x2c>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d139      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d136      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80052a0:	f7ff f987 	bl	80045b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d115      	bne.n	80052d6 <HAL_RCC_GetSysClockFreq+0x62>
 80052aa:	f7ff f982 	bl	80045b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_GetSysClockFreq+0x4e>
 80052b4:	f7ff f98d 	bl	80045d2 <LL_RCC_MSI_GetRange>
 80052b8:	4603      	mov	r3, r0
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	e005      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x5a>
 80052c2:	f7ff f991 	bl	80045e8 <LL_RCC_MSI_GetRangeAfterStandby>
 80052c6:	4603      	mov	r3, r0
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	4a36      	ldr	r2, [pc, #216]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x134>)
 80052d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d4:	e014      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x8c>
 80052d6:	f7ff f96c 	bl	80045b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <HAL_RCC_GetSysClockFreq+0x7a>
 80052e0:	f7ff f977 	bl	80045d2 <LL_RCC_MSI_GetRange>
 80052e4:	4603      	mov	r3, r0
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	e005      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x86>
 80052ee:	f7ff f97b 	bl	80045e8 <LL_RCC_MSI_GetRangeAfterStandby>
 80052f2:	4603      	mov	r3, r0
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a2b      	ldr	r2, [pc, #172]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x134>)
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d115      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800530c:	e012      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d102      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x138>)
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e00c      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d109      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005320:	f7ff f85a 	bl	80043d8 <LL_RCC_HSE_IsEnabledDiv2>
 8005324:	4603      	mov	r3, r0
 8005326:	2b01      	cmp	r3, #1
 8005328:	d102      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800532a:	4b20      	ldr	r3, [pc, #128]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x138>)
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e001      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005330:	4b1f      	ldr	r3, [pc, #124]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005332:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005334:	f7ff f98b 	bl	800464e <LL_RCC_GetSysClkSource>
 8005338:	4603      	mov	r3, r0
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d12f      	bne.n	800539e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800533e:	f7ff fa72 	bl	8004826 <LL_RCC_PLL_GetMainSource>
 8005342:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d003      	beq.n	8005352 <HAL_RCC_GetSysClockFreq+0xde>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d003      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0xe4>
 8005350:	e00d      	b.n	800536e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005352:	4b16      	ldr	r3, [pc, #88]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x138>)
 8005354:	60fb      	str	r3, [r7, #12]
        break;
 8005356:	e00d      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005358:	f7ff f83e 	bl	80043d8 <LL_RCC_HSE_IsEnabledDiv2>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d102      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x138>)
 8005364:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005366:	e005      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005368:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800536a:	60fb      	str	r3, [r7, #12]
        break;
 800536c:	e002      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	60fb      	str	r3, [r7, #12]
        break;
 8005372:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005374:	f7ff fa35 	bl	80047e2 <LL_RCC_PLL_GetN>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	fb03 f402 	mul.w	r4, r3, r2
 8005380:	f7ff fa46 	bl	8004810 <LL_RCC_PLL_GetDivider>
 8005384:	4603      	mov	r3, r0
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	3301      	adds	r3, #1
 800538a:	fbb4 f4f3 	udiv	r4, r4, r3
 800538e:	f7ff fa34 	bl	80047fa <LL_RCC_PLL_GetR>
 8005392:	4603      	mov	r3, r0
 8005394:	0f5b      	lsrs	r3, r3, #29
 8005396:	3301      	adds	r3, #1
 8005398:	fbb4 f3f3 	udiv	r3, r4, r3
 800539c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800539e:	697b      	ldr	r3, [r7, #20]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	0800db74 	.word	0x0800db74
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	01e84800 	.word	0x01e84800

080053b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b4:	b598      	push	{r3, r4, r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80053b8:	f7ff ff5c 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 80053bc:	4604      	mov	r4, r0
 80053be:	f7ff f9b5 	bl	800472c <LL_RCC_GetAHBPrescaler>
 80053c2:	4603      	mov	r3, r0
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	4a03      	ldr	r2, [pc, #12]	@ (80053d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd98      	pop	{r3, r4, r7, pc}
 80053d8:	0800db14 	.word	0x0800db14

080053dc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053dc:	b598      	push	{r3, r4, r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053e0:	f7ff ffe8 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80053e4:	4604      	mov	r4, r0
 80053e6:	f7ff f9b9 	bl	800475c <LL_RCC_GetAPB1Prescaler>
 80053ea:	4603      	mov	r3, r0
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	4a03      	ldr	r2, [pc, #12]	@ (80053fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd98      	pop	{r3, r4, r7, pc}
 80053fc:	0800db54 	.word	0x0800db54

08005400 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b598      	push	{r3, r4, r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005404:	f7ff ffd6 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8005408:	4604      	mov	r4, r0
 800540a:	f7ff f9b2 	bl	8004772 <LL_RCC_GetAPB2Prescaler>
 800540e:	4603      	mov	r3, r0
 8005410:	0adb      	lsrs	r3, r3, #11
 8005412:	4a03      	ldr	r2, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	fa24 f303 	lsr.w	r3, r4, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd98      	pop	{r3, r4, r7, pc}
 8005420:	0800db54 	.word	0x0800db54

08005424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	4a10      	ldr	r2, [pc, #64]	@ (8005478 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800543c:	f7ff f981 	bl	8004742 <LL_RCC_GetAHB3Prescaler>
 8005440:	4603      	mov	r3, r0
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	4a0c      	ldr	r2, [pc, #48]	@ (800547c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a09      	ldr	r2, [pc, #36]	@ (8005480 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800545a:	fba2 2303 	umull	r2, r3, r2, r3
 800545e:	0c9c      	lsrs	r4, r3, #18
 8005460:	f7fe ff80 	bl	8004364 <HAL_PWREx_GetVoltageRange>
 8005464:	4603      	mov	r3, r0
 8005466:	4619      	mov	r1, r3
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f80b 	bl	8005484 <RCC_SetFlashLatency>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}
 8005478:	0800db74 	.word	0x0800db74
 800547c:	0800db14 	.word	0x0800db14
 8005480:	431bde83 	.word	0x431bde83

08005484 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	@ 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800548e:	4a3a      	ldr	r2, [pc, #232]	@ (8005578 <RCC_SetFlashLatency+0xf4>)
 8005490:	f107 0320 	add.w	r3, r7, #32
 8005494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005498:	6018      	str	r0, [r3, #0]
 800549a:	3304      	adds	r3, #4
 800549c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800549e:	4a37      	ldr	r2, [pc, #220]	@ (800557c <RCC_SetFlashLatency+0xf8>)
 80054a0:	f107 0318 	add.w	r3, r7, #24
 80054a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054a8:	6018      	str	r0, [r3, #0]
 80054aa:	3304      	adds	r3, #4
 80054ac:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80054ae:	4a34      	ldr	r2, [pc, #208]	@ (8005580 <RCC_SetFlashLatency+0xfc>)
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80054b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c4:	d11b      	bne.n	80054fe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ca:	e014      	b.n	80054f6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	3338      	adds	r3, #56	@ 0x38
 80054d2:	443b      	add	r3, r7
 80054d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4293      	cmp	r3, r2
 80054de:	d807      	bhi.n	80054f0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	3338      	adds	r3, #56	@ 0x38
 80054e6:	443b      	add	r3, r7
 80054e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80054ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054ee:	e021      	b.n	8005534 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80054f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f2:	3301      	adds	r3, #1
 80054f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d9e7      	bls.n	80054cc <RCC_SetFlashLatency+0x48>
 80054fc:	e01a      	b.n	8005534 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005502:	e014      	b.n	800552e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	3338      	adds	r3, #56	@ 0x38
 800550a:	443b      	add	r3, r7
 800550c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005510:	461a      	mov	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4293      	cmp	r3, r2
 8005516:	d807      	bhi.n	8005528 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	3338      	adds	r3, #56	@ 0x38
 800551e:	443b      	add	r3, r7
 8005520:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005526:	e005      	b.n	8005534 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552a:	3301      	adds	r3, #1
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	2b02      	cmp	r3, #2
 8005532:	d9e7      	bls.n	8005504 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005534:	4b13      	ldr	r3, [pc, #76]	@ (8005584 <RCC_SetFlashLatency+0x100>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 0207 	bic.w	r2, r3, #7
 800553c:	4911      	ldr	r1, [pc, #68]	@ (8005584 <RCC_SetFlashLatency+0x100>)
 800553e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005544:	f7fd fb4c 	bl	8002be0 <HAL_GetTick>
 8005548:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800554a:	e008      	b.n	800555e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800554c:	f7fd fb48 	bl	8002be0 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e007      	b.n	800556e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <RCC_SetFlashLatency+0x100>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005568:	429a      	cmp	r2, r3
 800556a:	d1ef      	bne.n	800554c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3738      	adds	r7, #56	@ 0x38
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	0800d6a4 	.word	0x0800d6a4
 800557c:	0800d6ac 	.word	0x0800d6ac
 8005580:	0800d6b4 	.word	0x0800d6b4
 8005584:	58004000 	.word	0x58004000

08005588 <LL_RCC_LSE_IsReady>:
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d101      	bne.n	80055a0 <LL_RCC_LSE_IsReady+0x18>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <LL_RCC_LSE_IsReady+0x1a>
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <LL_RCC_SetUSARTClockSource>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	43db      	mvns	r3, r3
 80055c0:	401a      	ands	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <LL_RCC_SetI2SClockSource>:
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <LL_RCC_SetLPUARTClockSource>:
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <LL_RCC_SetI2CClockSource>:
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005646:	43db      	mvns	r3, r3
 8005648:	401a      	ands	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr

08005666 <LL_RCC_SetLPTIMClockSource>:
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005672:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	43db      	mvns	r3, r3
 800567e:	401a      	ands	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <LL_RCC_SetRNGClockSource>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80056ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <LL_RCC_SetADCClockSource>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80056ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80056d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <LL_RCC_SetRTCClockSource>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <LL_RCC_GetRTCClockSource>:
{
 8005716:	b480      	push	{r7}
 8005718:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800571a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <LL_RCC_ForceBackupDomainReset>:
{
 800572e:	b480      	push	{r7}
 8005730:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800573e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005746:	bf00      	nop
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <LL_RCC_ReleaseBackupDomainReset>:
{
 800574e:	b480      	push	{r7}
 8005750:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800575e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005762:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
	...

08005770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800577c:	2300      	movs	r3, #0
 800577e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005780:	2300      	movs	r3, #0
 8005782:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d058      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005790:	f7fe fdda 	bl	8004348 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005794:	f7fd fa24 	bl	8002be0 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800579a:	e009      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800579c:	f7fd fa20 	bl	8002be0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	74fb      	strb	r3, [r7, #19]
        break;
 80057ae:	e006      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80057b0:	4b7b      	ldr	r3, [pc, #492]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057bc:	d1ee      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d13c      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80057c4:	f7ff ffa7 	bl	8005716 <LL_RCC_GetRTCClockSource>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d00f      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057e0:	f7ff ffa5 	bl	800572e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057e4:	f7ff ffb3 	bl	800574e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d014      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fd f9f0 	bl	8002be0 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005802:	e00b      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fd f9ec 	bl	8002be0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d902      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	74fb      	strb	r3, [r7, #19]
            break;
 800581a:	e004      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800581c:	f7ff feb4 	bl	8005588 <LL_RCC_LSE_IsReady>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d1ee      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005826:	7cfb      	ldrb	r3, [r7, #19]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ff5b 	bl	80056ec <LL_RCC_SetRTCClockSource>
 8005836:	e004      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
 800583c:	e001      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fea9 	bl	80055aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fe9e 	bl	80055aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fec0 	bl	8005604 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fee6 	bl	8005666 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fedb 	bl	8005666 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fed0 	bl	8005666 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fea9 	bl	800562e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fe9e 	bl	800562e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fe93 	bl	800562e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b00      	cmp	r3, #0
 8005912:	d011      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fe5e 	bl	80055da <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005936:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fea5 	bl	8005698 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005964:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fea3 	bl	80056c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005984:	d107      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005996:	7cbb      	ldrb	r3, [r7, #18]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	58000400 	.word	0x58000400

080059a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d071      	beq.n	8005a9a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fc f84c 	bl	8001a68 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059d8:	4b32      	ldr	r3, [pc, #200]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d051      	beq.n	8005a88 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e4:	4b2f      	ldr	r3, [pc, #188]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 80059e6:	22ca      	movs	r2, #202	@ 0xca
 80059e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ea:	4b2e      	ldr	r3, [pc, #184]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 80059ec:	2253      	movs	r2, #83	@ 0x53
 80059ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f87f 	bl	8005af4 <RTC_EnterInitMode>
 80059f6:	4603      	mov	r3, r0
 80059f8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d13f      	bne.n	8005a80 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005a00:	4b28      	ldr	r3, [pc, #160]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	4a27      	ldr	r2, [pc, #156]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a06:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005a10:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6859      	ldr	r1, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	4319      	orrs	r1, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	430b      	orrs	r3, r1
 8005a24:	491f      	ldr	r1, [pc, #124]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	491b      	ldr	r1, [pc, #108]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	4915      	ldr	r1, [pc, #84]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f882 	bl	8005b5c <RTC_ExitInitMode>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10e      	bne.n	8005a80 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a19      	ldr	r1, [r3, #32]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4319      	orrs	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	490a      	ldr	r1, [pc, #40]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <HAL_RTC_Init+0x100>)
 8005a82:	22ff      	movs	r2, #255	@ 0xff
 8005a84:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a86:	e001      	b.n	8005a8c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40002800 	.word	0x40002800

08005aa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8005af0 <HAL_RTC_WaitForSynchro+0x48>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8005af0 <HAL_RTC_WaitForSynchro+0x48>)
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005abc:	f7fd f890 	bl	8002be0 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005ac2:	e009      	b.n	8005ad8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ac4:	f7fd f88c 	bl	8002be0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e006      	b.n	8005ae6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RTC_WaitForSynchro+0x48>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ef      	beq.n	8005ac4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40002800 	.word	0x40002800

08005af4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005b00:	4b15      	ldr	r3, [pc, #84]	@ (8005b58 <RTC_EnterInitMode+0x64>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d120      	bne.n	8005b4e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b0c:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <RTC_EnterInitMode+0x64>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a11      	ldr	r2, [pc, #68]	@ (8005b58 <RTC_EnterInitMode+0x64>)
 8005b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b16:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005b18:	f7fd f862 	bl	8002be0 <HAL_GetTick>
 8005b1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b1e:	e00d      	b.n	8005b3c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b20:	f7fd f85e 	bl	8002be0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b2e:	d905      	bls.n	8005b3c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2203      	movs	r2, #3
 8005b38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <RTC_EnterInitMode+0x64>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <RTC_EnterInitMode+0x5a>
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d1e8      	bne.n	8005b20 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40002800 	.word	0x40002800

08005b5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b72:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b74:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10c      	bne.n	8005b9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff91 	bl	8005aa8 <HAL_RTC_WaitForSynchro>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e017      	b.n	8005bca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005ba0:	f023 0320 	bic.w	r3, r3, #32
 8005ba4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff7e 	bl	8005aa8 <HAL_RTC_WaitForSynchro>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bbe:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	4a04      	ldr	r2, [pc, #16]	@ (8005bd4 <RTC_ExitInitMode+0x78>)
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40002800 	.word	0x40002800

08005bd8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005be8:	4904      	ldr	r1, [pc, #16]	@ (8005bfc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	58000400 	.word	0x58000400

08005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	4a04      	ldr	r2, [pc, #16]	@ (8005c1c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	58000400 	.word	0x58000400

08005c20 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c24:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2a:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005c2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	58000400 	.word	0x58000400

08005c40 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005c44:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c4a:	619a      	str	r2, [r3, #24]
}
 8005c4c:	bf00      	nop
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	58000400 	.word	0x58000400

08005c58 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d101      	bne.n	8005c6c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	58000400 	.word	0x58000400

08005c7c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005c80:	4b06      	ldr	r3, [pc, #24]	@ (8005c9c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d101      	bne.n	8005c90 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	58000400 	.word	0x58000400

08005ca0 <LL_RCC_RF_DisableReset>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <LL_RCC_IsRFUnderReset>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cd4:	d101      	bne.n	8005cda <LL_RCC_IsRFUnderReset+0x1a>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <LL_RCC_IsRFUnderReset+0x1c>
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005cec:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <LL_EXTI_EnableIT_32_63+0x24>)
 8005cee:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005cf2:	4905      	ldr	r1, [pc, #20]	@ (8005d08 <LL_EXTI_EnableIT_32_63+0x24>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	58000800 	.word	0x58000800

08005d0c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	73fb      	strb	r3, [r7, #15]
    return status;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	e078      	b.n	8005e14 <HAL_SUBGHZ_Init+0x108>
  }
  else
  {
    status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	799b      	ldrb	r3, [r3, #6]
 8005d2a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005d2c:	7bbb      	ldrb	r3, [r7, #14]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_SUBGHZ_Init+0x2c>
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d12f      	bne.n	8005d98 <HAL_SUBGHZ_Init+0x8c>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1)
    /* Init the SUBGHZ Legacy weak Callback settings */
    hsubghz->TxCpltCallback              = HAL_SUBGHZ_TxCpltCallback;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a36      	ldr	r2, [pc, #216]	@ (8005e1c <HAL_SUBGHZ_Init+0x110>)
 8005d42:	60da      	str	r2, [r3, #12]
    hsubghz->RxCpltCallback              = HAL_SUBGHZ_RxCpltCallback;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a36      	ldr	r2, [pc, #216]	@ (8005e20 <HAL_SUBGHZ_Init+0x114>)
 8005d48:	611a      	str	r2, [r3, #16]
    hsubghz->PreambleDetectedCallback    = HAL_SUBGHZ_PreambleDetectedCallback;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <HAL_SUBGHZ_Init+0x118>)
 8005d4e:	615a      	str	r2, [r3, #20]
    hsubghz->SyncWordValidCallback       = HAL_SUBGHZ_SyncWordValidCallback;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a35      	ldr	r2, [pc, #212]	@ (8005e28 <HAL_SUBGHZ_Init+0x11c>)
 8005d54:	619a      	str	r2, [r3, #24]
    hsubghz->HeaderValidCallback         = HAL_SUBGHZ_HeaderValidCallback;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a34      	ldr	r2, [pc, #208]	@ (8005e2c <HAL_SUBGHZ_Init+0x120>)
 8005d5a:	61da      	str	r2, [r3, #28]
    hsubghz->HeaderErrorCallback         = HAL_SUBGHZ_HeaderErrorCallback;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a34      	ldr	r2, [pc, #208]	@ (8005e30 <HAL_SUBGHZ_Init+0x124>)
 8005d60:	621a      	str	r2, [r3, #32]
    hsubghz->CRCErrorCallback            = HAL_SUBGHZ_CRCErrorCallback;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a33      	ldr	r2, [pc, #204]	@ (8005e34 <HAL_SUBGHZ_Init+0x128>)
 8005d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hsubghz->CADStatusCallback           = HAL_SUBGHZ_CADStatusCallback;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a33      	ldr	r2, [pc, #204]	@ (8005e38 <HAL_SUBGHZ_Init+0x12c>)
 8005d6c:	629a      	str	r2, [r3, #40]	@ 0x28
    hsubghz->RxTxTimeoutCallback         = HAL_SUBGHZ_RxTxTimeoutCallback;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a32      	ldr	r2, [pc, #200]	@ (8005e3c <HAL_SUBGHZ_Init+0x130>)
 8005d72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsubghz->LrFhssHopCallback           = HAL_SUBGHZ_LrFhssHopCallback;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a32      	ldr	r2, [pc, #200]	@ (8005e40 <HAL_SUBGHZ_Init+0x134>)
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hsubghz->MspInitCallback == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <HAL_SUBGHZ_Init+0x7c>
    {
      hsubghz->MspInitCallback = HAL_SUBGHZ_MspInit; /* Legacy weak MspInit  */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	@ (8005e44 <HAL_SUBGHZ_Init+0x138>)
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005d90:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005d94:	f7ff ffa6 	bl	8005ce4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d126      	bne.n	8005dec <HAL_SUBGHZ_Init+0xe0>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005da4:	f7ff ff7c 	bl	8005ca0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005da8:	4b27      	ldr	r3, [pc, #156]	@ (8005e48 <HAL_SUBGHZ_Init+0x13c>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	0cdb      	lsrs	r3, r3, #19
 8005db6:	2264      	movs	r2, #100	@ 0x64
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <HAL_SUBGHZ_Init+0xc4>
      {
        status  = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	609a      	str	r2, [r3, #8]
        break;
 8005dce:	e007      	b.n	8005de0 <HAL_SUBGHZ_Init+0xd4>
      }
      count--;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005dd6:	f7ff ff73 	bl	8005cc0 <LL_RCC_IsRFUnderReset>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1ee      	bne.n	8005dbe <HAL_SUBGHZ_Init+0xb2>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005de0:	f7ff ff0e 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005de4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005de8:	f7ff fef6 	bl	8005bd8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005dec:	f7ff ff28 	bl	8005c40 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <HAL_SUBGHZ_Init+0x100>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fade 	bl	80063bc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	719a      	strb	r2, [r3, #6]

  return status;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	0800b935 	.word	0x0800b935
 8005e20:	0800b951 	.word	0x0800b951
 8005e24:	0800ba01 	.word	0x0800ba01
 8005e28:	0800ba1d 	.word	0x0800ba1d
 8005e2c:	0800ba39 	.word	0x0800ba39
 8005e30:	0800b9e5 	.word	0x0800b9e5
 8005e34:	0800b96d 	.word	0x0800b96d
 8005e38:	0800b989 	.word	0x0800b989
 8005e3c:	0800b9c5 	.word	0x0800b9c5
 8005e40:	0800ba55 	.word	0x0800ba55
 8005e44:	08001bbd 	.word	0x08001bbd
 8005e48:	20000000 	.word	0x20000000

08005e4c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	461a      	mov	r2, r3
 8005e58:	460b      	mov	r3, r1
 8005e5a:	817b      	strh	r3, [r7, #10]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	799b      	ldrb	r3, [r3, #6]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d14a      	bne.n	8005f00 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e045      	b.n	8005f02 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fb68 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e88:	f7ff feca 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005e8c:	210d      	movs	r1, #13
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fab4 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005e94:	897b      	ldrh	r3, [r7, #10]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 faac 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005ea4:	897b      	ldrh	r3, [r7, #10]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 faa6 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	82bb      	strh	r3, [r7, #20]
 8005eb4:	e00a      	b.n	8005ecc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005eb6:	8abb      	ldrh	r3, [r7, #20]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fa9b 	bl	80063fc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ec6:	8abb      	ldrh	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	82bb      	strh	r3, [r7, #20]
 8005ecc:	8aba      	ldrh	r2, [r7, #20]
 8005ece:	893b      	ldrh	r3, [r7, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d3f0      	bcc.n	8005eb6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ed4:	f7ff fe94 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fb61 	bl	80065a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
 8005eea:	e001      	b.n	8005ef0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	715a      	strb	r2, [r3, #5]

    return status;
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	e000      	b.n	8005f02 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	461a      	mov	r2, r3
 8005f16:	460b      	mov	r3, r1
 8005f18:	817b      	strh	r3, [r7, #10]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	799b      	ldrb	r3, [r3, #6]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d14a      	bne.n	8005fc2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	795b      	ldrb	r3, [r3, #5]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e045      	b.n	8005fc4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fb0a 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f44:	f7ff fe6c 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005f48:	211d      	movs	r1, #29
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa56 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005f50:	897b      	ldrh	r3, [r7, #10]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa4e 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005f60:	897b      	ldrh	r3, [r7, #10]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	4619      	mov	r1, r3
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 fa48 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa44 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	82fb      	strh	r3, [r7, #22]
 8005f78:	e009      	b.n	8005f8e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fa93 	bl	80064a8 <SUBGHZSPI_Receive>
      pData++;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005f88:	8afb      	ldrh	r3, [r7, #22]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	82fb      	strh	r3, [r7, #22]
 8005f8e:	8afa      	ldrh	r2, [r7, #22]
 8005f90:	893b      	ldrh	r3, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d3f1      	bcc.n	8005f7a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f96:	f7ff fe33 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fb00 	bl	80065a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e001      	b.n	8005fb2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	715a      	strb	r2, [r3, #5]

    return status;
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	e000      	b.n	8005fc4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	460b      	mov	r3, r1
 8005fda:	72fb      	strb	r3, [r7, #11]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	799b      	ldrb	r3, [r3, #6]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d14a      	bne.n	8006080 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	795b      	ldrb	r3, [r3, #5]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e045      	b.n	8006082 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 faab 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006002:	7afb      	ldrb	r3, [r7, #11]
 8006004:	2b84      	cmp	r3, #132	@ 0x84
 8006006:	d002      	beq.n	800600e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	2b94      	cmp	r3, #148	@ 0x94
 800600c:	d103      	bne.n	8006016 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	711a      	strb	r2, [r3, #4]
 8006014:	e002      	b.n	800601c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800601c:	f7ff fe00 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006020:	7afb      	ldrb	r3, [r7, #11]
 8006022:	4619      	mov	r1, r3
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f9e9 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800602a:	2300      	movs	r3, #0
 800602c:	82bb      	strh	r3, [r7, #20]
 800602e:	e00a      	b.n	8006046 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006030:	8abb      	ldrh	r3, [r7, #20]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f9de 	bl	80063fc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006040:	8abb      	ldrh	r3, [r7, #20]
 8006042:	3301      	adds	r3, #1
 8006044:	82bb      	strh	r3, [r7, #20]
 8006046:	8aba      	ldrh	r2, [r7, #20]
 8006048:	893b      	ldrh	r3, [r7, #8]
 800604a:	429a      	cmp	r2, r3
 800604c:	d3f0      	bcc.n	8006030 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800604e:	f7ff fdd7 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	2b84      	cmp	r3, #132	@ 0x84
 8006056:	d002      	beq.n	800605e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 faa1 	bl	80065a0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
 800606a:	e001      	b.n	8006070 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	715a      	strb	r2, [r3, #5]

    return status;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	e000      	b.n	8006082 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b088      	sub	sp, #32
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	461a      	mov	r2, r3
 8006096:	460b      	mov	r3, r1
 8006098:	72fb      	strb	r3, [r7, #11]
 800609a:	4613      	mov	r3, r2
 800609c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	799b      	ldrb	r3, [r3, #6]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d13d      	bne.n	8006128 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	795b      	ldrb	r3, [r3, #5]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e038      	b.n	800612a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fa4a 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80060c4:	f7ff fdac 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80060c8:	7afb      	ldrb	r3, [r7, #11]
 80060ca:	4619      	mov	r1, r3
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f995 	bl	80063fc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80060d2:	2100      	movs	r1, #0
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f991 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	82fb      	strh	r3, [r7, #22]
 80060de:	e009      	b.n	80060f4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f9e0 	bl	80064a8 <SUBGHZSPI_Receive>
      pData++;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	3301      	adds	r3, #1
 80060f2:	82fb      	strh	r3, [r7, #22]
 80060f4:	8afa      	ldrh	r2, [r7, #22]
 80060f6:	893b      	ldrh	r3, [r7, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3f1      	bcc.n	80060e0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060fc:	f7ff fd80 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fa4d 	bl	80065a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e001      	b.n	8006118 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	715a      	strb	r2, [r3, #5]

    return status;
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	e000      	b.n	800612a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
  }
}
 800612a:	4618      	mov	r0, r3
 800612c:	3720      	adds	r7, #32
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b086      	sub	sp, #24
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	461a      	mov	r2, r3
 800613e:	460b      	mov	r3, r1
 8006140:	72fb      	strb	r3, [r7, #11]
 8006142:	4613      	mov	r3, r2
 8006144:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	799b      	ldrb	r3, [r3, #6]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d13e      	bne.n	80061ce <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	795b      	ldrb	r3, [r3, #5]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006158:	2302      	movs	r3, #2
 800615a:	e039      	b.n	80061d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f9f8 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006168:	f7ff fd5a 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800616c:	210e      	movs	r1, #14
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f944 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	4619      	mov	r1, r3
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f93f 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	82bb      	strh	r3, [r7, #20]
 8006182:	e00a      	b.n	800619a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006184:	8abb      	ldrh	r3, [r7, #20]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4413      	add	r3, r2
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f934 	bl	80063fc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006194:	8abb      	ldrh	r3, [r7, #20]
 8006196:	3301      	adds	r3, #1
 8006198:	82bb      	strh	r3, [r7, #20]
 800619a:	8aba      	ldrh	r2, [r7, #20]
 800619c:	893b      	ldrh	r3, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d3f0      	bcc.n	8006184 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80061a2:	f7ff fd2d 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f9fa 	bl	80065a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
 80061b8:	e001      	b.n	80061be <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	715a      	strb	r2, [r3, #5]

    return status;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	e000      	b.n	80061d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	461a      	mov	r2, r3
 80061e4:	460b      	mov	r3, r1
 80061e6:	72fb      	strb	r3, [r7, #11]
 80061e8:	4613      	mov	r3, r2
 80061ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	799b      	ldrb	r3, [r3, #6]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d141      	bne.n	800627e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	795b      	ldrb	r3, [r3, #5]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006202:	2302      	movs	r3, #2
 8006204:	e03c      	b.n	8006280 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 f9a3 	bl	8006558 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006212:	f7ff fd05 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006216:	211e      	movs	r1, #30
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8ef 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	4619      	mov	r1, r3
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f8ea 	bl	80063fc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f8e6 	bl	80063fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006230:	2300      	movs	r3, #0
 8006232:	82fb      	strh	r3, [r7, #22]
 8006234:	e009      	b.n	800624a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f935 	bl	80064a8 <SUBGHZSPI_Receive>
      pData++;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006244:	8afb      	ldrh	r3, [r7, #22]
 8006246:	3301      	adds	r3, #1
 8006248:	82fb      	strh	r3, [r7, #22]
 800624a:	8afa      	ldrh	r2, [r7, #22]
 800624c:	893b      	ldrh	r3, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d3f1      	bcc.n	8006236 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006252:	f7ff fcd5 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f9a2 	bl	80065a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e001      	b.n	800626e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	715a      	strb	r2, [r3, #5]

    return status;
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	e000      	b.n	8006280 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800627e:	2302      	movs	r3, #2
  }
}
 8006280:	4618      	mov	r0, r3
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006290:	2300      	movs	r3, #0
 8006292:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006294:	f107 020c 	add.w	r2, r7, #12
 8006298:	2302      	movs	r3, #2
 800629a:	2112      	movs	r1, #18
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff fef4 	bl	800608a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80062a2:	7b3b      	ldrb	r3, [r7, #12]
 80062a4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80062a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	b21a      	sxth	r2, r3
 80062ae:	7b7b      	ldrb	r3, [r7, #13]
 80062b0:	b21b      	sxth	r3, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b21b      	sxth	r3, r3
 80062b6:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80062b8:	f107 020c 	add.w	r2, r7, #12
 80062bc:	2302      	movs	r3, #2
 80062be:	2102      	movs	r1, #2
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff fe83 	bl	8005fcc <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80062c6:	89fb      	ldrh	r3, [r7, #14]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_SUBGHZ_IRQHandler+0x70>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	099b      	lsrs	r3, r3, #6
 80062e8:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800630c:	89fb      	ldrh	r3, [r7, #14]
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006334:	89fb      	ldrh	r3, [r7, #14]
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_SUBGHZ_IRQHandler+0xc0>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006348:	89fb      	ldrh	r3, [r7, #14]
 800634a:	099b      	lsrs	r3, r3, #6
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800635c:	89fb      	ldrh	r3, [r7, #14]
 800635e:	09db      	lsrs	r3, r3, #7
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006368:	89fb      	ldrh	r3, [r7, #14]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_SUBGHZ_IRQHandler+0xf8>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
 800637e:	e004      	b.n	800638a <HAL_SUBGHZ_IRQHandler+0x102>
    }
    else
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006384:	2100      	movs	r1, #0
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800638a:	89fb      	ldrh	r3, [r7, #14]
 800638c:	0a5b      	lsrs	r3, r3, #9
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_SUBGHZ_IRQHandler+0x116>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800639e:	89fb      	ldrh	r3, [r7, #14]
 80063a0:	0b9b      	lsrs	r3, r3, #14
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_SUBGHZ_IRQHandler+0x12a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80063c4:	4b0c      	ldr	r3, [pc, #48]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a0b      	ldr	r2, [pc, #44]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ce:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80063d0:	4a09      	ldr	r2, [pc, #36]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80063d8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80063da:	4b07      	ldr	r3, [pc, #28]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063dc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80063e0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80063e2:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a04      	ldr	r2, [pc, #16]	@ (80063f8 <SUBGHZSPI_Init+0x3c>)
 80063e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ec:	6013      	str	r3, [r2, #0]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr
 80063f8:	58010000 	.word	0x58010000

080063fc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800640c:	4b23      	ldr	r3, [pc, #140]	@ (800649c <SUBGHZSPI_Transmit+0xa0>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	0cdb      	lsrs	r3, r3, #19
 800641a:	2264      	movs	r2, #100	@ 0x64
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	609a      	str	r2, [r3, #8]
      break;
 8006432:	e008      	b.n	8006446 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b01      	subs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800643a:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <SUBGHZSPI_Transmit+0xa4>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b02      	cmp	r3, #2
 8006444:	d1ed      	bne.n	8006422 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006446:	4b17      	ldr	r3, [pc, #92]	@ (80064a4 <SUBGHZSPI_Transmit+0xa8>)
 8006448:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	78fa      	ldrb	r2, [r7, #3]
 800644e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006450:	4b12      	ldr	r3, [pc, #72]	@ (800649c <SUBGHZSPI_Transmit+0xa0>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	0cdb      	lsrs	r3, r3, #19
 800645e:	2264      	movs	r2, #100	@ 0x64
 8006460:	fb02 f303 	mul.w	r3, r2, r3
 8006464:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	609a      	str	r2, [r3, #8]
      break;
 8006476:	e008      	b.n	800648a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3b01      	subs	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800647e:	4b08      	ldr	r3, [pc, #32]	@ (80064a0 <SUBGHZSPI_Transmit+0xa4>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d1ed      	bne.n	8006466 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800648a:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <SUBGHZSPI_Transmit+0xa4>)
 800648c:	68db      	ldr	r3, [r3, #12]

  return status;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006490:	4618      	mov	r0, r3
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	20000000 	.word	0x20000000
 80064a0:	58010000 	.word	0x58010000
 80064a4:	5801000c 	.word	0x5801000c

080064a8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80064b6:	4b25      	ldr	r3, [pc, #148]	@ (800654c <SUBGHZSPI_Receive+0xa4>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	0cdb      	lsrs	r3, r3, #19
 80064c4:	2264      	movs	r2, #100	@ 0x64
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	609a      	str	r2, [r3, #8]
      break;
 80064dc:	e008      	b.n	80064f0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80064e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006550 <SUBGHZSPI_Receive+0xa8>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d1ed      	bne.n	80064cc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80064f0:	4b18      	ldr	r3, [pc, #96]	@ (8006554 <SUBGHZSPI_Receive+0xac>)
 80064f2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	22ff      	movs	r2, #255	@ 0xff
 80064f8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80064fa:	4b14      	ldr	r3, [pc, #80]	@ (800654c <SUBGHZSPI_Receive+0xa4>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	0cdb      	lsrs	r3, r3, #19
 8006508:	2264      	movs	r2, #100	@ 0x64
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	609a      	str	r2, [r3, #8]
      break;
 8006520:	e008      	b.n	8006534 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3b01      	subs	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006528:	4b09      	ldr	r3, [pc, #36]	@ (8006550 <SUBGHZSPI_Receive+0xa8>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d1ed      	bne.n	8006510 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <SUBGHZSPI_Receive+0xa8>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	701a      	strb	r2, [r3, #0]

  return status;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000000 	.word	0x20000000
 8006550:	58010000 	.word	0x58010000
 8006554:	5801000c 	.word	0x5801000c

08006558 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	791b      	ldrb	r3, [r3, #4]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d111      	bne.n	800658c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006568:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <SUBGHZ_CheckDeviceReady+0x44>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4413      	add	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006578:	f7ff fb52 	bl	8005c20 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b01      	subs	r3, #1
 8006580:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f9      	bne.n	800657c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006588:	f7ff fb3a 	bl	8005c00 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f807 	bl	80065a0 <SUBGHZ_WaitOnBusy>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000000 	.word	0x20000000

080065a0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80065ac:	4b12      	ldr	r3, [pc, #72]	@ (80065f8 <SUBGHZ_WaitOnBusy+0x58>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	4413      	add	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	0d1b      	lsrs	r3, r3, #20
 80065ba:	2264      	movs	r2, #100	@ 0x64
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80065c2:	f7ff fb5b 	bl	8005c7c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80065c6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	609a      	str	r2, [r3, #8]
      break;
 80065d8:	e009      	b.n	80065ee <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b01      	subs	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80065e0:	f7ff fb3a 	bl	8005c58 <LL_PWR_IsActiveFlag_RFBUSYS>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d0e9      	beq.n	80065c2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000000 	.word	0x20000000

080065fc <LL_RCC_GetUSARTClockSource>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006608:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	401a      	ands	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	4313      	orrs	r3, r2
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <LL_RCC_GetLPUARTClockSource>:
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4013      	ands	r3, r2
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
	...

08006640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e050      	b.n	80066f4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006658:	2b00      	cmp	r3, #0
 800665a:	d114      	bne.n	8006686 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fca5 	bl	8006fb4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a21      	ldr	r2, [pc, #132]	@ (80066fc <HAL_UART_Init+0xbc>)
 8006678:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2224      	movs	r2, #36	@ 0x24
 800668a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 ff4a 	bl	8007540 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fcd3 	bl	8007058 <UART_SetConfig>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e01b      	b.n	80066f4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 ffc8 	bl	8007682 <UART_CheckIdleState>
 80066f2:	4603      	mov	r3, r0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08002931 	.word	0x08002931

08006700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	@ 0x28
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006716:	2b20      	cmp	r3, #32
 8006718:	d173      	bne.n	8006802 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_UART_Transmit+0x26>
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e06c      	b.n	8006804 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	@ 0x21
 8006736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673a:	f7fc fa51 	bl	8002be0 <HAL_GetTick>
 800673e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	88fa      	ldrh	r2, [r7, #6]
 800674c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006758:	d108      	bne.n	800676c <HAL_UART_Transmit+0x6c>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e003      	b.n	8006774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006774:	e02c      	b.n	80067d0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	@ 0x80
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 ffcc 	bl	800771e <UART_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e039      	b.n	8006804 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	3302      	adds	r3, #2
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	e007      	b.n	80067be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	3301      	adds	r3, #1
 80067bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1cc      	bne.n	8006776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2200      	movs	r2, #0
 80067e4:	2140      	movs	r1, #64	@ 0x40
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 ff99 	bl	800771e <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e006      	b.n	8006804 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	e000      	b.n	8006804 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006802:	2302      	movs	r3, #2
  }
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	@ 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006820:	2b20      	cmp	r3, #32
 8006822:	d137      	bne.n	8006894 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive_IT+0x24>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e030      	b.n	8006896 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a18      	ldr	r2, [pc, #96]	@ (80068a0 <HAL_UART_Receive_IT+0x94>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d01f      	beq.n	8006884 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	613b      	str	r3, [r7, #16]
   return(result);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	69f9      	ldr	r1, [r7, #28]
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	61bb      	str	r3, [r7, #24]
   return(result);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e6      	bne.n	8006852 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	461a      	mov	r2, r3
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f001 f816 	bl	80078bc <UART_Start_Receive_IT>
 8006890:	4603      	mov	r3, r0
 8006892:	e000      	b.n	8006896 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3728      	adds	r7, #40	@ 0x28
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40008000 	.word	0x40008000

080068a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b0ba      	sub	sp, #232	@ 0xe8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80068ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80068d2:	4013      	ands	r3, r2
 80068d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80068d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11b      	bne.n	8006918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 82f3 	beq.w	8006ef4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
      }
      return;
 8006916:	e2ed      	b.n	8006ef4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8129 	beq.w	8006b74 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006926:	4b90      	ldr	r3, [pc, #576]	@ (8006b68 <HAL_UART_IRQHandler+0x2c4>)
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800692e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006932:	4b8e      	ldr	r3, [pc, #568]	@ (8006b6c <HAL_UART_IRQHandler+0x2c8>)
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 811c 	beq.w	8006b74 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_UART_IRQHandler+0xc8>
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006962:	f043 0201 	orr.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0xf8>
 8006978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2202      	movs	r2, #2
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	f043 0204 	orr.w	r2, r3, #4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0x128>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2204      	movs	r2, #4
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c2:	f043 0202 	orr.w	r2, r3, #2
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d017      	beq.n	8006a08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80069e8:	4b5f      	ldr	r3, [pc, #380]	@ (8006b68 <HAL_UART_IRQHandler+0x2c4>)
 80069ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2208      	movs	r2, #8
 80069f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <HAL_UART_IRQHandler+0x196>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00c      	beq.n	8006a3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8259 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d013      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d058      	beq.n	8006b50 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 f82c 	bl	8007afc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b40      	cmp	r3, #64	@ 0x40
 8006ab0:	d148      	bne.n	8006b44 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ade:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d017      	beq.n	8006b38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0e:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <HAL_UART_IRQHandler+0x2cc>)
 8006b10:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd f9ca 	bl	8003eb2 <HAL_DMA_Abort_IT>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01f      	beq.n	8006b64 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b36:	e015      	b.n	8006b64 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b42:	e00f      	b.n	8006b64 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b4e:	e009      	b.n	8006b64 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b62:	e1c9      	b.n	8006ef8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	bf00      	nop
    return;
 8006b66:	e1c7      	b.n	8006ef8 <HAL_UART_IRQHandler+0x654>
 8006b68:	10000001 	.word	0x10000001
 8006b6c:	04000120 	.word	0x04000120
 8006b70:	08007bc7 	.word	0x08007bc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	f040 8157 	bne.w	8006e2c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 8150 	beq.w	8006e2c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8149 	beq.w	8006e2c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b40      	cmp	r3, #64	@ 0x40
 8006bae:	f040 80bd 	bne.w	8006d2c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8199 	beq.w	8006efc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	f080 8191 	bcs.w	8006efc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006be0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 8087 	bne.w	8006d06 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1da      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e1      	bne.n	8006c42 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ca8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e3      	bne.n	8006c7e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd4:	f023 0310 	bic.w	r3, r3, #16
 8006cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ce8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e4      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd f878 	bl	8003df6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006d1e:	b292      	uxth	r2, r2
 8006d20:	1a8a      	subs	r2, r1, r2
 8006d22:	b292      	uxth	r2, r2
 8006d24:	4611      	mov	r1, r2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d2a:	e0e7      	b.n	8006efc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80d9 	beq.w	8006f00 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8006d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80d4 	beq.w	8006f00 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e4      	bne.n	8006d58 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006db6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e1      	bne.n	8006d8e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0310 	bic.w	r3, r3, #16
 8006df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e00:	61fb      	str	r3, [r7, #28]
 8006e02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	69b9      	ldr	r1, [r7, #24]
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e4      	bne.n	8006dde <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006e20:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006e24:	4611      	mov	r1, r2
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e2a:	e069      	b.n	8006f00 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_UART_IRQHandler+0x5b6>
 8006e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e4c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e58:	e055      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d014      	beq.n	8006e90 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d105      	bne.n	8006e7e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03e      	beq.n	8006f04 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
    }
    return;
 8006e8e:	e039      	b.n	8006f04 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x60c>
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fea4 	bl	8007bf6 <UART_EndTransmit_IT>
    return;
 8006eae:	e02a      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x630>
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ed2:	e018      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d012      	beq.n	8006f06 <HAL_UART_IRQHandler+0x662>
 8006ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da0e      	bge.n	8006f06 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef2:	e008      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
      return;
 8006ef4:	bf00      	nop
 8006ef6:	e006      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
    return;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
      return;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
      return;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <HAL_UART_IRQHandler+0x662>
    return;
 8006f04:	bf00      	nop
  }
}
 8006f06:	37e8      	adds	r7, #232	@ 0xe8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr

08006f42 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr

08006f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr

08006f66 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr
	...

08006fb4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007028 <UART_InitCallbacksToDefault+0x74>)
 8006fc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a19      	ldr	r2, [pc, #100]	@ (800702c <UART_InitCallbacksToDefault+0x78>)
 8006fc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a18      	ldr	r2, [pc, #96]	@ (8007030 <UART_InitCallbacksToDefault+0x7c>)
 8006fd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a17      	ldr	r2, [pc, #92]	@ (8007034 <UART_InitCallbacksToDefault+0x80>)
 8006fd8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a16      	ldr	r2, [pc, #88]	@ (8007038 <UART_InitCallbacksToDefault+0x84>)
 8006fe0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a15      	ldr	r2, [pc, #84]	@ (800703c <UART_InitCallbacksToDefault+0x88>)
 8006fe8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a14      	ldr	r2, [pc, #80]	@ (8007040 <UART_InitCallbacksToDefault+0x8c>)
 8006ff0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a13      	ldr	r2, [pc, #76]	@ (8007044 <UART_InitCallbacksToDefault+0x90>)
 8006ff8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	@ (8007048 <UART_InitCallbacksToDefault+0x94>)
 8007000:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a11      	ldr	r2, [pc, #68]	@ (800704c <UART_InitCallbacksToDefault+0x98>)
 8007008:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <UART_InitCallbacksToDefault+0x9c>)
 8007010:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a0f      	ldr	r2, [pc, #60]	@ (8007054 <UART_InitCallbacksToDefault+0xa0>)
 8007018:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	08006f1f 	.word	0x08006f1f
 800702c:	08006f0d 	.word	0x08006f0d
 8007030:	08006f43 	.word	0x08006f43
 8007034:	08006f31 	.word	0x08006f31
 8007038:	08006f55 	.word	0x08006f55
 800703c:	08006f67 	.word	0x08006f67
 8007040:	08006f79 	.word	0x08006f79
 8007044:	08006f8b 	.word	0x08006f8b
 8007048:	080086b1 	.word	0x080086b1
 800704c:	080086c3 	.word	0x080086c3
 8007050:	080086d5 	.word	0x080086d5
 8007054:	08006f9d 	.word	0x08006f9d

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800705c:	b08c      	sub	sp, #48	@ 0x30
 800705e:	af00      	add	r7, sp, #0
 8007060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	431a      	orrs	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	431a      	orrs	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4313      	orrs	r3, r2
 800707e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b94      	ldr	r3, [pc, #592]	@ (80072d8 <UART_SetConfig+0x280>)
 8007088:	4013      	ands	r3, r2
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007090:	430b      	orrs	r3, r1
 8007092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a89      	ldr	r2, [pc, #548]	@ (80072dc <UART_SetConfig+0x284>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c0:	4313      	orrs	r3, r2
 80070c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070d8:	430b      	orrs	r3, r1
 80070da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	f023 010f 	bic.w	r1, r3, #15
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7a      	ldr	r2, [pc, #488]	@ (80072e0 <UART_SetConfig+0x288>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d127      	bne.n	800714c <UART_SetConfig+0xf4>
 80070fc:	2003      	movs	r0, #3
 80070fe:	f7ff fa7d 	bl	80065fc <LL_RCC_GetUSARTClockSource>
 8007102:	4603      	mov	r3, r0
 8007104:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007108:	2b03      	cmp	r3, #3
 800710a:	d81b      	bhi.n	8007144 <UART_SetConfig+0xec>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <UART_SetConfig+0xbc>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007125 	.word	0x08007125
 8007118:	08007135 	.word	0x08007135
 800711c:	0800712d 	.word	0x0800712d
 8007120:	0800713d 	.word	0x0800713d
 8007124:	2301      	movs	r3, #1
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712a:	e080      	b.n	800722e <UART_SetConfig+0x1d6>
 800712c:	2302      	movs	r3, #2
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007132:	e07c      	b.n	800722e <UART_SetConfig+0x1d6>
 8007134:	2304      	movs	r3, #4
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800713a:	e078      	b.n	800722e <UART_SetConfig+0x1d6>
 800713c:	2308      	movs	r3, #8
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e074      	b.n	800722e <UART_SetConfig+0x1d6>
 8007144:	2310      	movs	r3, #16
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e070      	b.n	800722e <UART_SetConfig+0x1d6>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a64      	ldr	r2, [pc, #400]	@ (80072e4 <UART_SetConfig+0x28c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d138      	bne.n	80071c8 <UART_SetConfig+0x170>
 8007156:	200c      	movs	r0, #12
 8007158:	f7ff fa50 	bl	80065fc <LL_RCC_GetUSARTClockSource>
 800715c:	4603      	mov	r3, r0
 800715e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007162:	2b0c      	cmp	r3, #12
 8007164:	d82c      	bhi.n	80071c0 <UART_SetConfig+0x168>
 8007166:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <UART_SetConfig+0x114>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080071c1 	.word	0x080071c1
 8007174:	080071c1 	.word	0x080071c1
 8007178:	080071c1 	.word	0x080071c1
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071c1 	.word	0x080071c1
 8007184:	080071c1 	.word	0x080071c1
 8007188:	080071c1 	.word	0x080071c1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071c1 	.word	0x080071c1
 8007194:	080071c1 	.word	0x080071c1
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071b9 	.word	0x080071b9
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a6:	e042      	b.n	800722e <UART_SetConfig+0x1d6>
 80071a8:	2302      	movs	r3, #2
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ae:	e03e      	b.n	800722e <UART_SetConfig+0x1d6>
 80071b0:	2304      	movs	r3, #4
 80071b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b6:	e03a      	b.n	800722e <UART_SetConfig+0x1d6>
 80071b8:	2308      	movs	r3, #8
 80071ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071be:	e036      	b.n	800722e <UART_SetConfig+0x1d6>
 80071c0:	2310      	movs	r3, #16
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e032      	b.n	800722e <UART_SetConfig+0x1d6>
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a43      	ldr	r2, [pc, #268]	@ (80072dc <UART_SetConfig+0x284>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d12a      	bne.n	8007228 <UART_SetConfig+0x1d0>
 80071d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80071d6:	f7ff fa23 	bl	8006620 <LL_RCC_GetLPUARTClockSource>
 80071da:	4603      	mov	r3, r0
 80071dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071e0:	d01a      	beq.n	8007218 <UART_SetConfig+0x1c0>
 80071e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071e6:	d81b      	bhi.n	8007220 <UART_SetConfig+0x1c8>
 80071e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ec:	d00c      	beq.n	8007208 <UART_SetConfig+0x1b0>
 80071ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f2:	d815      	bhi.n	8007220 <UART_SetConfig+0x1c8>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <UART_SetConfig+0x1a8>
 80071f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071fc:	d008      	beq.n	8007210 <UART_SetConfig+0x1b8>
 80071fe:	e00f      	b.n	8007220 <UART_SetConfig+0x1c8>
 8007200:	2300      	movs	r3, #0
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007206:	e012      	b.n	800722e <UART_SetConfig+0x1d6>
 8007208:	2302      	movs	r3, #2
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720e:	e00e      	b.n	800722e <UART_SetConfig+0x1d6>
 8007210:	2304      	movs	r3, #4
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e00a      	b.n	800722e <UART_SetConfig+0x1d6>
 8007218:	2308      	movs	r3, #8
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e006      	b.n	800722e <UART_SetConfig+0x1d6>
 8007220:	2310      	movs	r3, #16
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e002      	b.n	800722e <UART_SetConfig+0x1d6>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2a      	ldr	r2, [pc, #168]	@ (80072dc <UART_SetConfig+0x284>)
 8007234:	4293      	cmp	r3, r2
 8007236:	f040 80a4 	bne.w	8007382 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800723a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800723e:	2b08      	cmp	r3, #8
 8007240:	d823      	bhi.n	800728a <UART_SetConfig+0x232>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <UART_SetConfig+0x1f0>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800728b 	.word	0x0800728b
 8007250:	08007275 	.word	0x08007275
 8007254:	0800728b 	.word	0x0800728b
 8007258:	0800727b 	.word	0x0800727b
 800725c:	0800728b 	.word	0x0800728b
 8007260:	0800728b 	.word	0x0800728b
 8007264:	0800728b 	.word	0x0800728b
 8007268:	08007283 	.word	0x08007283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fe f8b6 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007270:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007272:	e010      	b.n	8007296 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007274:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <UART_SetConfig+0x290>)
 8007276:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007278:	e00d      	b.n	8007296 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727a:	f7fd fffb 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 800727e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007280:	e009      	b.n	8007296 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007286:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007288:	e005      	b.n	8007296 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8137 	beq.w	800750c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a2:	4a12      	ldr	r2, [pc, #72]	@ (80072ec <UART_SetConfig+0x294>)
 80072a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	4413      	add	r3, r2
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d305      	bcc.n	80072ce <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d910      	bls.n	80072f0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80072d4:	e11a      	b.n	800750c <UART_SetConfig+0x4b4>
 80072d6:	bf00      	nop
 80072d8:	cfff69f3 	.word	0xcfff69f3
 80072dc:	40008000 	.word	0x40008000
 80072e0:	40013800 	.word	0x40013800
 80072e4:	40004400 	.word	0x40004400
 80072e8:	00f42400 	.word	0x00f42400
 80072ec:	0800dc00 	.word	0x0800dc00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	2200      	movs	r2, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	60fa      	str	r2, [r7, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007538 <UART_SetConfig+0x4e0>)
 80072fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007302:	b29b      	uxth	r3, r3
 8007304:	2200      	movs	r2, #0
 8007306:	603b      	str	r3, [r7, #0]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007312:	f7f9 fd67 	bl	8000de4 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	020b      	lsls	r3, r1, #8
 8007328:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800732c:	0202      	lsls	r2, r0, #8
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	6849      	ldr	r1, [r1, #4]
 8007332:	0849      	lsrs	r1, r1, #1
 8007334:	2000      	movs	r0, #0
 8007336:	460c      	mov	r4, r1
 8007338:	4605      	mov	r5, r0
 800733a:	eb12 0804 	adds.w	r8, r2, r4
 800733e:	eb43 0905 	adc.w	r9, r3, r5
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	469a      	mov	sl, r3
 800734a:	4693      	mov	fp, r2
 800734c:	4652      	mov	r2, sl
 800734e:	465b      	mov	r3, fp
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f9 fd46 	bl	8000de4 <__aeabi_uldivmod>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4613      	mov	r3, r2
 800735e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007366:	d308      	bcc.n	800737a <UART_SetConfig+0x322>
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736e:	d204      	bcs.n	800737a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e0c8      	b.n	800750c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007380:	e0c4      	b.n	800750c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800738a:	d167      	bne.n	800745c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800738c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007390:	2b08      	cmp	r3, #8
 8007392:	d828      	bhi.n	80073e6 <UART_SetConfig+0x38e>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <UART_SetConfig+0x344>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073e7 	.word	0x080073e7
 80073ac:	080073d7 	.word	0x080073d7
 80073b0:	080073e7 	.word	0x080073e7
 80073b4:	080073e7 	.word	0x080073e7
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	080073df 	.word	0x080073df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fe f80c 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 80073c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073c6:	e014      	b.n	80073f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c8:	f7fe f81a 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 80073cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ce:	e010      	b.n	80073f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b5a      	ldr	r3, [pc, #360]	@ (800753c <UART_SetConfig+0x4e4>)
 80073d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073d4:	e00d      	b.n	80073f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fd ff4d 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 80073da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073e4:	e005      	b.n	80073f2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8089 	beq.w	800750c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fe:	4a4e      	ldr	r2, [pc, #312]	@ (8007538 <UART_SetConfig+0x4e0>)
 8007400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007404:	461a      	mov	r2, r3
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	fbb3 f3f2 	udiv	r3, r3, r2
 800740c:	005a      	lsls	r2, r3, #1
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	441a      	add	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	fbb2 f3f3 	udiv	r3, r2, r3
 800741e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2b0f      	cmp	r3, #15
 8007424:	d916      	bls.n	8007454 <UART_SetConfig+0x3fc>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d212      	bcs.n	8007454 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	b29b      	uxth	r3, r3
 8007432:	f023 030f 	bic.w	r3, r3, #15
 8007436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	b29a      	uxth	r2, r3
 8007444:	8bfb      	ldrh	r3, [r7, #30]
 8007446:	4313      	orrs	r3, r2
 8007448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	8bfa      	ldrh	r2, [r7, #30]
 8007450:	60da      	str	r2, [r3, #12]
 8007452:	e05b      	b.n	800750c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800745a:	e057      	b.n	800750c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800745c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007460:	2b08      	cmp	r3, #8
 8007462:	d828      	bhi.n	80074b6 <UART_SetConfig+0x45e>
 8007464:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <UART_SetConfig+0x414>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	080074b7 	.word	0x080074b7
 800747c:	080074a7 	.word	0x080074a7
 8007480:	080074b7 	.word	0x080074b7
 8007484:	080074b7 	.word	0x080074b7
 8007488:	080074b7 	.word	0x080074b7
 800748c:	080074af 	.word	0x080074af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007490:	f7fd ffa4 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
 8007494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007496:	e014      	b.n	80074c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fd ffb2 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 800749c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800749e:	e010      	b.n	80074c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a0:	4b26      	ldr	r3, [pc, #152]	@ (800753c <UART_SetConfig+0x4e4>)
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074a4:	e00d      	b.n	80074c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a6:	f7fd fee5 	bl	8005274 <HAL_RCC_GetSysClockFreq>
 80074aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ac:	e009      	b.n	80074c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074b4:	e005      	b.n	80074c2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074c0:	bf00      	nop
    }

    if (pclk != 0U)
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d021      	beq.n	800750c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007538 <UART_SetConfig+0x4e0>)
 80074ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	441a      	add	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d909      	bls.n	8007506 <UART_SetConfig+0x4ae>
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074f8:	d205      	bcs.n	8007506 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60da      	str	r2, [r3, #12]
 8007504:	e002      	b.n	800750c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2201      	movs	r2, #1
 8007510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2201      	movs	r2, #1
 8007518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2200      	movs	r2, #0
 8007520:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2200      	movs	r2, #0
 8007526:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007528:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800752c:	4618      	mov	r0, r3
 800752e:	3730      	adds	r7, #48	@ 0x30
 8007530:	46bd      	mov	sp, r7
 8007532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007536:	bf00      	nop
 8007538:	0800dc00 	.word	0x0800dc00
 800753c:	00f42400 	.word	0x00f42400

08007540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01a      	beq.n	8007656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763e:	d10a      	bne.n	8007656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr

08007682 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af02      	add	r7, sp, #8
 8007688:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007692:	f7fb faa5 	bl	8002be0 <HAL_GetTick>
 8007696:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d10e      	bne.n	80076c4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f832 	bl	800771e <UART_WaitOnFlagUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e028      	b.n	8007716 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d10e      	bne.n	80076f0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f81c 	bl	800771e <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e012      	b.n	8007716 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b09c      	sub	sp, #112	@ 0x70
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	4613      	mov	r3, r2
 800772c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	e0af      	b.n	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	f000 80ab 	beq.w	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773a:	f7fb fa51 	bl	8002be0 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <UART_WaitOnFlagUntilTimeout+0x32>
 800774a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800774c:	2b00      	cmp	r3, #0
 800774e:	d140      	bne.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800775e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007760:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007764:	667b      	str	r3, [r7, #100]	@ 0x64
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800776e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007770:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007774:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800777c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	663b      	str	r3, [r7, #96]	@ 0x60
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077a2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077a4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e5      	bne.n	8007782 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e06f      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d057      	beq.n	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b80      	cmp	r3, #128	@ 0x80
 80077e4:	d054      	beq.n	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b40      	cmp	r3, #64	@ 0x40
 80077ea:	d051      	beq.n	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077fa:	d149      	bne.n	8007890 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007804:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800781a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800782a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	613b      	str	r3, [r7, #16]
   return(result);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007858:	623a      	str	r2, [r7, #32]
 800785a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69f9      	ldr	r1, [r7, #28]
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	61bb      	str	r3, [r7, #24]
   return(result);
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e010      	b.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	f43f af40 	beq.w	8007730 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3770      	adds	r7, #112	@ 0x70
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078bc:	b480      	push	{r7}
 80078be:	b0a3      	sub	sp, #140	@ 0x8c
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ee:	d10e      	bne.n	800790e <UART_Start_Receive_IT+0x52>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d105      	bne.n	8007904 <UART_Start_Receive_IT+0x48>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007902:	e02d      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	22ff      	movs	r2, #255	@ 0xff
 8007908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800790c:	e028      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10d      	bne.n	8007932 <UART_Start_Receive_IT+0x76>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <UART_Start_Receive_IT+0x6c>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	22ff      	movs	r2, #255	@ 0xff
 8007922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007926:	e01b      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	227f      	movs	r2, #127	@ 0x7f
 800792c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007930:	e016      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800793a:	d10d      	bne.n	8007958 <UART_Start_Receive_IT+0x9c>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d104      	bne.n	800794e <UART_Start_Receive_IT+0x92>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	227f      	movs	r2, #127	@ 0x7f
 8007948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800794c:	e008      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	223f      	movs	r2, #63	@ 0x3f
 8007952:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007956:	e003      	b.n	8007960 <UART_Start_Receive_IT+0xa4>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2222      	movs	r2, #34	@ 0x22
 800796c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007994:	673a      	str	r2, [r7, #112]	@ 0x70
 8007996:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007998:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800799a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800799c:	e841 2300 	strex	r3, r2, [r1]
 80079a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80079a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1e3      	bne.n	8007970 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d14f      	bne.n	8007a52 <UART_Start_Receive_IT+0x196>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d349      	bcc.n	8007a52 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c6:	d107      	bne.n	80079d8 <UART_Start_Receive_IT+0x11c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a46      	ldr	r2, [pc, #280]	@ (8007aec <UART_Start_Receive_IT+0x230>)
 80079d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80079d6:	e002      	b.n	80079de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a45      	ldr	r2, [pc, #276]	@ (8007af0 <UART_Start_Receive_IT+0x234>)
 80079dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01a      	beq.n	8007a1c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a0a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e4      	bne.n	80079e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3308      	adds	r3, #8
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a3c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a3e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_Start_Receive_IT+0x160>
 8007a50:	e046      	b.n	8007ae0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5a:	d107      	bne.n	8007a6c <UART_Start_Receive_IT+0x1b0>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d103      	bne.n	8007a6c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4a23      	ldr	r2, [pc, #140]	@ (8007af4 <UART_Start_Receive_IT+0x238>)
 8007a68:	675a      	str	r2, [r3, #116]	@ 0x74
 8007a6a:	e002      	b.n	8007a72 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a22      	ldr	r2, [pc, #136]	@ (8007af8 <UART_Start_Receive_IT+0x23c>)
 8007a70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d019      	beq.n	8007aae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007a8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e6      	bne.n	8007a7a <UART_Start_Receive_IT+0x1be>
 8007aac:	e018      	b.n	8007ae0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	613b      	str	r3, [r7, #16]
   return(result);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f043 0320 	orr.w	r3, r3, #32
 8007ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007acc:	623b      	str	r3, [r7, #32]
 8007ace:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69f9      	ldr	r1, [r7, #28]
 8007ad2:	6a3a      	ldr	r2, [r7, #32]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e6      	bne.n	8007aae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	378c      	adds	r7, #140	@ 0x8c
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr
 8007aec:	0800833d 	.word	0x0800833d
 8007af0:	08007fd1 	.word	0x08007fd1
 8007af4:	08007e11 	.word	0x08007e11
 8007af8:	08007c51 	.word	0x08007c51

08007afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b095      	sub	sp, #84	@ 0x54
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e6      	bne.n	8007b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e3      	bne.n	8007b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d118      	bne.n	8007ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bbc:	bf00      	nop
 8007bbe:	3754      	adds	r7, #84	@ 0x54
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b088      	sub	sp, #32
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e6      	bne.n	8007bfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b09c      	sub	sp, #112	@ 0x70
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c68:	2b22      	cmp	r3, #34	@ 0x22
 8007c6a:	f040 80c2 	bne.w	8007df2 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c7c:	b2d9      	uxtb	r1, r3
 8007c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c88:	400a      	ands	r2, r1
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80a5 	bne.w	8007e02 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a35      	ldr	r2, [pc, #212]	@ (8007e0c <UART_RxISR_8BIT+0x1bc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d01f      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	623b      	str	r3, [r7, #32]
   return(result);
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d130      	bne.n	8007de6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	617b      	str	r3, [r7, #20]
   return(result);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d103      	bne.n	8007dd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007dde:	4611      	mov	r1, r2
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007de4:	e00d      	b.n	8007e02 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
}
 8007df0:	e007      	b.n	8007e02 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699a      	ldr	r2, [r3, #24]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0208 	orr.w	r2, r2, #8
 8007e00:	619a      	str	r2, [r3, #24]
}
 8007e02:	bf00      	nop
 8007e04:	3770      	adds	r7, #112	@ 0x70
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40008000 	.word	0x40008000

08007e10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b09c      	sub	sp, #112	@ 0x70
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e28:	2b22      	cmp	r3, #34	@ 0x22
 8007e2a:	f040 80c2 	bne.w	8007fb2 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e46:	4013      	ands	r3, r2
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e52:	1c9a      	adds	r2, r3, #2
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 80a5 	bne.w	8007fc2 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e98:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e6      	bne.n	8007e78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007eca:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <UART_RxISR_16BIT+0x1bc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d01f      	beq.n	8007f3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d018      	beq.n	8007f3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d130      	bne.n	8007fa6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0310 	bic.w	r3, r3, #16
 8007f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e6      	bne.n	8007f4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d103      	bne.n	8007f92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fa4:	e00d      	b.n	8007fc2 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
}
 8007fb0:	e007      	b.n	8007fc2 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0208 	orr.w	r2, r2, #8
 8007fc0:	619a      	str	r2, [r3, #24]
}
 8007fc2:	bf00      	nop
 8007fc4:	3770      	adds	r7, #112	@ 0x70
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	40008000 	.word	0x40008000

08007fd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fde:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008006:	2b22      	cmp	r3, #34	@ 0x22
 8008008:	f040 8188 	bne.w	800831c <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008012:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008016:	e12b      	b.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008022:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008026:	b2d9      	uxtb	r1, r3
 8008028:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800802c:	b2da      	uxtb	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008032:	400a      	ands	r2, r1
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800805e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	2b00      	cmp	r3, #0
 8008068:	d055      	beq.n	8008116 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800806a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d011      	beq.n	800809a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2201      	movs	r2, #1
 8008088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008090:	f043 0201 	orr.w	r2, r3, #1
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800809a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d011      	beq.n	80080ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80080a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2202      	movs	r2, #2
 80080b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c0:	f043 0204 	orr.w	r2, r3, #4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80080d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2204      	movs	r2, #4
 80080e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f0:	f043 0202 	orr.w	r2, r3, #2
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	f040 80a6 	bne.w	8008270 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008148:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800814c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e4      	bne.n	8008124 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800816a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800816c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3308      	adds	r3, #8
 800817e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008182:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008184:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008188:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e1      	bne.n	800815a <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a61      	ldr	r2, [pc, #388]	@ (8008334 <UART_RxISR_8BIT_FIFOEN+0x364>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d021      	beq.n	80081f8 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01a      	beq.n	80081f8 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80081d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80081e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80081f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e4      	bne.n	80081c2 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d132      	bne.n	8008266 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	f023 0310 	bic.w	r3, r3, #16
 800821a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008228:	643b      	str	r3, [r7, #64]	@ 0x40
 800822a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800822e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e4      	bne.n	8008206 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f003 0310 	and.w	r3, r3, #16
 8008246:	2b10      	cmp	r3, #16
 8008248:	d103      	bne.n	8008252 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2210      	movs	r2, #16
 8008250:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800825e:	4611      	mov	r1, r2
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	e004      	b.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x2a0>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008270:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008274:	2b00      	cmp	r3, #0
 8008276:	d006      	beq.n	8008286 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8008278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f aec9 	bne.w	8008018 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800828c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008294:	2b00      	cmp	r3, #0
 8008296:	d049      	beq.n	800832c <UART_RxISR_8BIT_FIFOEN+0x35c>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800829e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d242      	bcs.n	800832c <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3308      	adds	r3, #8
 80082ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80082ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e3      	bne.n	80082a6 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a15      	ldr	r2, [pc, #84]	@ (8008338 <UART_RxISR_8BIT_FIFOEN+0x368>)
 80082e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f043 0320 	orr.w	r3, r3, #32
 80082f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	6979      	ldr	r1, [r7, #20]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e4      	bne.n	80082e4 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800831a:	e007      	b.n	800832c <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0208 	orr.w	r2, r2, #8
 800832a:	619a      	str	r2, [r3, #24]
}
 800832c:	bf00      	nop
 800832e:	37b0      	adds	r7, #176	@ 0xb0
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	40008000 	.word	0x40008000
 8008338:	08007c51 	.word	0x08007c51

0800833c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b0ae      	sub	sp, #184	@ 0xb8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800834a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008372:	2b22      	cmp	r3, #34	@ 0x22
 8008374:	f040 818c 	bne.w	8008690 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800837e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008382:	e12f      	b.n	80085e4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008396:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800839a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800839e:	4013      	ands	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ac:	1c9a      	adds	r2, r3, #2
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d055      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <UART_RxISR_16BIT_FIFOEN+0xce>
 80083e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2201      	movs	r2, #1
 80083f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008400:	f043 0201 	orr.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800840a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b00      	cmp	r3, #0
 8008414:	d011      	beq.n	800843a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2202      	movs	r2, #2
 8008428:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008430:	f043 0204 	orr.w	r2, r3, #4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800843a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d011      	beq.n	800846a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2204      	movs	r2, #4
 8008458:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008460:	f043 0202 	orr.w	r2, r3, #2
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 80a8 	bne.w	80085e4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e2      	bne.n	8008494 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3308      	adds	r3, #8
 80084f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80084f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e1      	bne.n	80084ce <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a61      	ldr	r2, [pc, #388]	@ (80086a8 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d021      	beq.n	800856c <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01a      	beq.n	800856c <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008546:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800854a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800855a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800855e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e4      	bne.n	8008536 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d132      	bne.n	80085da <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858a:	f023 0310 	bic.w	r3, r3, #16
 800858e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800859c:	647b      	str	r3, [r7, #68]	@ 0x44
 800859e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 0310 	and.w	r3, r3, #16
 80085ba:	2b10      	cmp	r3, #16
 80085bc:	d103      	bne.n	80085c6 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2210      	movs	r2, #16
 80085c4:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80085d2:	4611      	mov	r1, r2
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
 80085d8:	e004      	b.n	80085e4 <UART_RxISR_16BIT_FIFOEN+0x2a8>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <UART_RxISR_16BIT_FIFOEN+0x2be>
 80085ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f47f aec5 	bne.w	8008384 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008600:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008604:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008608:	2b00      	cmp	r3, #0
 800860a:	d049      	beq.n	80086a0 <UART_RxISR_16BIT_FIFOEN+0x364>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008612:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008616:	429a      	cmp	r2, r3
 8008618:	d242      	bcs.n	80086a0 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	623b      	str	r3, [r7, #32]
   return(result);
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008630:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800863e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800864c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e3      	bne.n	800861a <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a15      	ldr	r2, [pc, #84]	@ (80086ac <UART_RxISR_16BIT_FIFOEN+0x370>)
 8008656:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	60fb      	str	r3, [r7, #12]
   return(result);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f043 0320 	orr.w	r3, r3, #32
 800866c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	69b9      	ldr	r1, [r7, #24]
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	617b      	str	r3, [r7, #20]
   return(result);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e4      	bne.n	8008658 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800868e:	e007      	b.n	80086a0 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0208 	orr.w	r2, r2, #8
 800869e:	619a      	str	r2, [r3, #24]
}
 80086a0:	bf00      	nop
 80086a2:	37b8      	adds	r7, #184	@ 0xb8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40008000 	.word	0x40008000
 80086ac:	08007e11 	.word	0x08007e11

080086b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <HAL_UARTEx_DisableFifoMode+0x16>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e027      	b.n	800874c <HAL_UARTEx_DisableFifoMode+0x66>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2224      	movs	r2, #36	@ 0x24
 8008708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0201 	bic.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800872a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr

08008756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800876a:	2302      	movs	r3, #2
 800876c:	e02d      	b.n	80087ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2224      	movs	r2, #36	@ 0x24
 800877a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0201 	bic.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f850 	bl	8008850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e02d      	b.n	8008846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2224      	movs	r2, #36	@ 0x24
 80087f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f812 	bl	8008850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800885c:	2b00      	cmp	r3, #0
 800885e:	d108      	bne.n	8008872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008870:	e031      	b.n	80088d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008872:	2308      	movs	r3, #8
 8008874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008876:	2308      	movs	r3, #8
 8008878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	0e5b      	lsrs	r3, r3, #25
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f003 0307 	and.w	r3, r3, #7
 8008888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	0f5b      	lsrs	r3, r3, #29
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	7b3a      	ldrb	r2, [r7, #12]
 800889e:	4910      	ldr	r1, [pc, #64]	@ (80088e0 <UARTEx_SetNbDataToProcess+0x90>)
 80088a0:	5c8a      	ldrb	r2, [r1, r2]
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088a6:	7b3a      	ldrb	r2, [r7, #12]
 80088a8:	490e      	ldr	r1, [pc, #56]	@ (80088e4 <UARTEx_SetNbDataToProcess+0x94>)
 80088aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	7b7a      	ldrb	r2, [r7, #13]
 80088bc:	4908      	ldr	r1, [pc, #32]	@ (80088e0 <UARTEx_SetNbDataToProcess+0x90>)
 80088be:	5c8a      	ldrb	r2, [r1, r2]
 80088c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088c4:	7b7a      	ldrb	r2, [r7, #13]
 80088c6:	4907      	ldr	r1, [pc, #28]	@ (80088e4 <UARTEx_SetNbDataToProcess+0x94>)
 80088c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80088d6:	bf00      	nop
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr
 80088e0:	0800dc18 	.word	0x0800dc18
 80088e4:	0800dc20 	.word	0x0800dc20

080088e8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80088f0:	4a24      	ldr	r2, [pc, #144]	@ (8008984 <RadioInit+0x9c>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80088f6:	4b24      	ldr	r3, [pc, #144]	@ (8008988 <RadioInit+0xa0>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80088fc:	4b22      	ldr	r3, [pc, #136]	@ (8008988 <RadioInit+0xa0>)
 80088fe:	2200      	movs	r2, #0
 8008900:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8008902:	4b21      	ldr	r3, [pc, #132]	@ (8008988 <RadioInit+0xa0>)
 8008904:	2200      	movs	r2, #0
 8008906:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008908:	4b1f      	ldr	r3, [pc, #124]	@ (8008988 <RadioInit+0xa0>)
 800890a:	2200      	movs	r2, #0
 800890c:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800890e:	481f      	ldr	r0, [pc, #124]	@ (800898c <RadioInit+0xa4>)
 8008910:	f001 ff8c 	bl	800a82c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008914:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <RadioInit+0xa0>)
 8008916:	2200      	movs	r2, #0
 8008918:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800891a:	4b1b      	ldr	r3, [pc, #108]	@ (8008988 <RadioInit+0xa0>)
 800891c:	2200      	movs	r2, #0
 800891e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8008920:	f002 fa22 	bl	800ad68 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008924:	2100      	movs	r1, #0
 8008926:	2000      	movs	r0, #0
 8008928:	f002 fde8 	bl	800b4fc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800892c:	2204      	movs	r2, #4
 800892e:	2100      	movs	r1, #0
 8008930:	2001      	movs	r0, #1
 8008932:	f002 fbab 	bl	800b08c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008936:	2300      	movs	r3, #0
 8008938:	2200      	movs	r2, #0
 800893a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800893e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008942:	f002 fadb 	bl	800aefc <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008946:	f000 fe91 	bl	800966c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800894a:	2300      	movs	r3, #0
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	4b10      	ldr	r3, [pc, #64]	@ (8008990 <RadioInit+0xa8>)
 8008950:	2200      	movs	r2, #0
 8008952:	f04f 31ff 	mov.w	r1, #4294967295
 8008956:	480f      	ldr	r0, [pc, #60]	@ (8008994 <RadioInit+0xac>)
 8008958:	f003 ffa2 	bl	800c8a0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <RadioInit+0xb0>)
 8008962:	2200      	movs	r2, #0
 8008964:	f04f 31ff 	mov.w	r1, #4294967295
 8008968:	480c      	ldr	r0, [pc, #48]	@ (800899c <RadioInit+0xb4>)
 800896a:	f003 ff99 	bl	800c8a0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800896e:	4809      	ldr	r0, [pc, #36]	@ (8008994 <RadioInit+0xac>)
 8008970:	f004 f83a 	bl	800c9e8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008974:	4809      	ldr	r0, [pc, #36]	@ (800899c <RadioInit+0xb4>)
 8008976:	f004 f837 	bl	800c9e8 <UTIL_TIMER_Stop>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000490 	.word	0x20000490
 8008988:	20000494 	.word	0x20000494
 800898c:	08009a61 	.word	0x08009a61
 8008990:	080099e9 	.word	0x080099e9
 8008994:	200004f0 	.word	0x200004f0
 8008998:	080099fd 	.word	0x080099fd
 800899c:	20000508 	.word	0x20000508

080089a0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80089a4:	f001 ff8a 	bl	800a8bc <SUBGRF_GetOperatingMode>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b07      	cmp	r3, #7
 80089ac:	d00a      	beq.n	80089c4 <RadioGetStatus+0x24>
 80089ae:	2b07      	cmp	r3, #7
 80089b0:	dc0a      	bgt.n	80089c8 <RadioGetStatus+0x28>
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d002      	beq.n	80089bc <RadioGetStatus+0x1c>
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d002      	beq.n	80089c0 <RadioGetStatus+0x20>
 80089ba:	e005      	b.n	80089c8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80089bc:	2302      	movs	r3, #2
 80089be:	e004      	b.n	80089ca <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e002      	b.n	80089ca <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e000      	b.n	80089ca <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80089c8:	2300      	movs	r3, #0
    }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80089da:	4a2a      	ldr	r2, [pc, #168]	@ (8008a84 <RadioSetModem+0xb4>)
 80089dc:	79fb      	ldrb	r3, [r7, #7]
 80089de:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f003 f977 	bl	800bcd6 <RFW_SetRadioModem>
    switch( modem )
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b05      	cmp	r3, #5
 80089ec:	d80e      	bhi.n	8008a0c <RadioSetModem+0x3c>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <RadioSetModem+0x24>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a1b 	.word	0x08008a1b
 80089f8:	08008a29 	.word	0x08008a29
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a4f 	.word	0x08008a4f
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a6b 	.word	0x08008a6b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008a0c:	2003      	movs	r0, #3
 8008a0e:	f002 fb17 	bl	800b040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008a12:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	735a      	strb	r2, [r3, #13]
        break;
 8008a18:	e02f      	b.n	8008a7a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	f002 fb10 	bl	800b040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008a20:	4b18      	ldr	r3, [pc, #96]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	735a      	strb	r2, [r3, #13]
        break;
 8008a26:	e028      	b.n	8008a7a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008a28:	2001      	movs	r0, #1
 8008a2a:	f002 fb09 	bl	800b040 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008a2e:	4b15      	ldr	r3, [pc, #84]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a30:	7b5a      	ldrb	r2, [r3, #13]
 8008a32:	4b14      	ldr	r3, [pc, #80]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a34:	7b1b      	ldrb	r3, [r3, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d01e      	beq.n	8008a78 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008a3a:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a3c:	7b1a      	ldrb	r2, [r3, #12]
 8008a3e:	4b11      	ldr	r3, [pc, #68]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a40:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008a42:	4b10      	ldr	r3, [pc, #64]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a44:	7b5b      	ldrb	r3, [r3, #13]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 ff98 	bl	800997c <RadioSetPublicNetwork>
        }
        break;
 8008a4c:	e014      	b.n	8008a78 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008a4e:	2002      	movs	r0, #2
 8008a50:	f002 faf6 	bl	800b040 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008a54:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	735a      	strb	r2, [r3, #13]
        break;
 8008a5a:	e00e      	b.n	8008a7a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008a5c:	2002      	movs	r0, #2
 8008a5e:	f002 faef 	bl	800b040 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008a62:	4b08      	ldr	r3, [pc, #32]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	735a      	strb	r2, [r3, #13]
        break;
 8008a68:	e007      	b.n	8008a7a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	f002 fae8 	bl	800b040 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008a70:	4b04      	ldr	r3, [pc, #16]	@ (8008a84 <RadioSetModem+0xb4>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	735a      	strb	r2, [r3, #13]
        break;
 8008a76:	e000      	b.n	8008a7a <RadioSetModem+0xaa>
        break;
 8008a78:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000494 	.word	0x20000494

08008a88 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f002 fa8f 	bl	800afb4 <SUBGRF_SetRfFrequency>
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b090      	sub	sp, #64	@ 0x40
 8008aa2:	af0a      	add	r7, sp, #40	@ 0x28
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008aba:	f000 fdea 	bl	8009692 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008abe:	2000      	movs	r0, #0
 8008ac0:	f7ff ff86 	bl	80089d0 <RadioSetModem>

    RadioSetChannel( freq );
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff ffdf 	bl	8008a88 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008aca:	2301      	movs	r3, #1
 8008acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9307      	str	r3, [sp, #28]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9306      	str	r3, [sp, #24]
 8008ada:	2300      	movs	r3, #0
 8008adc:	9305      	str	r3, [sp, #20]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	2303      	movs	r3, #3
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	2300      	movs	r3, #0
 8008af4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	2000      	movs	r0, #0
 8008afc:	f000 f83c 	bl	8008b78 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008b00:	2000      	movs	r0, #0
 8008b02:	f000 fdcd 	bl	80096a0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008b06:	f000 ff67 	bl	80099d8 <RadioGetWakeupTime>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fa f871 	bl	8002bf4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8008b12:	f004 f803 	bl	800cb1c <UTIL_TIMER_GetCurrentTime>
 8008b16:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008b18:	e00d      	b.n	8008b36 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f000 feae 	bl	800987c <RadioRssi>
 8008b20:	4603      	mov	r3, r0
 8008b22:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008b24:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	dd02      	ble.n	8008b36 <RadioIsChannelFree+0x98>
        {
            status = false;
 8008b30:	2300      	movs	r3, #0
 8008b32:	75fb      	strb	r3, [r7, #23]
            break;
 8008b34:	e006      	b.n	8008b44 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f004 f802 	bl	800cb40 <UTIL_TIMER_GetElapsedTime>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d8ea      	bhi.n	8008b1a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008b44:	f000 fda5 	bl	8009692 <RadioStandby>

    return status;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2100      	movs	r1, #0
 8008b62:	2000      	movs	r0, #0
 8008b64:	f002 f9ca 	bl	800aefc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008b68:	f001 ff79 	bl	800aa5e <SUBGRF_GetRandom>
 8008b6c:	6078      	str	r0, [r7, #4]

    return rnd;
 8008b6e:	687b      	ldr	r3, [r7, #4]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	@ 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
 8008b82:	461a      	mov	r2, r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008b8c:	4ab9      	ldr	r2, [pc, #740]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008b8e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008b92:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008b94:	f003 f85d 	bl	800bc52 <RFW_DeInit>
    if( rxContinuous == true )
 8008b98:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008ba4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008bac:	4ab2      	ldr	r2, [pc, #712]	@ (8008e78 <RadioSetRxConfig+0x300>)
 8008bae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008bb2:	7013      	strb	r3, [r2, #0]
 8008bb4:	e002      	b.n	8008bbc <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008bb6:	4bb0      	ldr	r3, [pc, #704]	@ (8008e78 <RadioSetRxConfig+0x300>)
 8008bb8:	22ff      	movs	r2, #255	@ 0xff
 8008bba:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	2b05      	cmp	r3, #5
 8008bc0:	d009      	beq.n	8008bd6 <RadioSetRxConfig+0x5e>
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	f300 81d7 	bgt.w	8008f76 <RadioSetRxConfig+0x3fe>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80bf 	beq.w	8008d4c <RadioSetRxConfig+0x1d4>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	f000 8124 	beq.w	8008e1c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008bd4:	e1cf      	b.n	8008f76 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	f002 f888 	bl	800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008bdc:	4ba5      	ldr	r3, [pc, #660]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008be4:	4aa3      	ldr	r2, [pc, #652]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008bea:	4ba2      	ldr	r3, [pc, #648]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008bec:	2209      	movs	r2, #9
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8008bf2:	4ba0      	ldr	r3, [pc, #640]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008bf4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8008bf8:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008bfa:	68b8      	ldr	r0, [r7, #8]
 8008bfc:	f002 ff5c 	bl	800bab8 <SUBGRF_GetFskBandwidthRegValue>
 8008c00:	4603      	mov	r3, r0
 8008c02:	461a      	mov	r2, r3
 8008c04:	4b9b      	ldr	r3, [pc, #620]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c0a:	4b9a      	ldr	r3, [pc, #616]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008c10:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	4b97      	ldr	r3, [pc, #604]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c18:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008c1a:	4b96      	ldr	r3, [pc, #600]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008c20:	4b94      	ldr	r3, [pc, #592]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c22:	2210      	movs	r2, #16
 8008c24:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008c26:	4b93      	ldr	r3, [pc, #588]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008c2c:	4b91      	ldr	r3, [pc, #580]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008c32:	4b91      	ldr	r3, [pc, #580]	@ (8008e78 <RadioSetRxConfig+0x300>)
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	4b8f      	ldr	r3, [pc, #572]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c38:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008c3a:	4b8e      	ldr	r3, [pc, #568]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008c40:	4b8c      	ldr	r3, [pc, #560]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008c46:	2005      	movs	r0, #5
 8008c48:	f7ff fec2 	bl	80089d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c4c:	488b      	ldr	r0, [pc, #556]	@ (8008e7c <RadioSetRxConfig+0x304>)
 8008c4e:	f002 faeb 	bl	800b228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c52:	488b      	ldr	r0, [pc, #556]	@ (8008e80 <RadioSetRxConfig+0x308>)
 8008c54:	f002 fbb6 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008c58:	4a8a      	ldr	r2, [pc, #552]	@ (8008e84 <RadioSetRxConfig+0x30c>)
 8008c5a:	f107 031c 	add.w	r3, r7, #28
 8008c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c62:	e883 0003 	stmia.w	r3, {r0, r1}
 8008c66:	f107 031c 	add.w	r3, r7, #28
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 fe75 	bl	800a95a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008c70:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008c74:	f001 fec0 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008c78:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008c7c:	f000 fe1c 	bl	80098b8 <RadioRead>
 8008c80:	4603      	mov	r3, r0
 8008c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c8a:	f023 0310 	bic.w	r3, r3, #16
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008c92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c96:	4619      	mov	r1, r3
 8008c98:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008c9c:	f000 fdfa 	bl	8009894 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008ca0:	2104      	movs	r1, #4
 8008ca2:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8008ca6:	f000 fdf5 	bl	8009894 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008caa:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008cae:	f000 fe03 	bl	80098b8 <RadioRead>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cbc:	f023 031c 	bic.w	r3, r3, #28
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cc8:	f043 0308 	orr.w	r3, r3, #8
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008cd4:	f000 fdde 	bl	8009894 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008cd8:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008cdc:	f000 fdec 	bl	80098b8 <RadioRead>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cea:	f023 0318 	bic.w	r3, r3, #24
 8008cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8008cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf6:	f043 0318 	orr.w	r3, r3, #24
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008d02:	f000 fdc7 	bl	8009894 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008d06:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008d0a:	f000 fdd5 	bl	80098b8 <RadioRead>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d24:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008d30:	f000 fdb0 	bl	8009894 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008d34:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d36:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d46:	4a4b      	ldr	r2, [pc, #300]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d48:	6093      	str	r3, [r2, #8]
            break;
 8008d4a:	e115      	b.n	8008f78 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f001 ffcd 	bl	800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008d52:	4b48      	ldr	r3, [pc, #288]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008d5a:	4a46      	ldr	r2, [pc, #280]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008d60:	4b44      	ldr	r3, [pc, #272]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d62:	220b      	movs	r2, #11
 8008d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008d68:	68b8      	ldr	r0, [r7, #8]
 8008d6a:	f002 fea5 	bl	800bab8 <SUBGRF_GetFskBandwidthRegValue>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	461a      	mov	r2, r3
 8008d72:	4b40      	ldr	r3, [pc, #256]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008d78:	4b3e      	ldr	r3, [pc, #248]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008d7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	4b3b      	ldr	r3, [pc, #236]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d86:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008d88:	4b3a      	ldr	r3, [pc, #232]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008d8e:	4b39      	ldr	r3, [pc, #228]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d90:	2218      	movs	r2, #24
 8008d92:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008d94:	4b37      	ldr	r3, [pc, #220]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008d9a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008d9e:	f083 0301 	eor.w	r3, r3, #1
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b33      	ldr	r3, [pc, #204]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008da8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008daa:	4b33      	ldr	r3, [pc, #204]	@ (8008e78 <RadioSetRxConfig+0x300>)
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	4b31      	ldr	r3, [pc, #196]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008db0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008db2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008dba:	4b2e      	ldr	r3, [pc, #184]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008dbc:	22f2      	movs	r2, #242	@ 0xf2
 8008dbe:	75da      	strb	r2, [r3, #23]
 8008dc0:	e002      	b.n	8008dc8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008dce:	f000 fc60 	bl	8009692 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f7ff fdfc 	bl	80089d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008dd8:	4828      	ldr	r0, [pc, #160]	@ (8008e7c <RadioSetRxConfig+0x304>)
 8008dda:	f002 fa25 	bl	800b228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008dde:	4828      	ldr	r0, [pc, #160]	@ (8008e80 <RadioSetRxConfig+0x308>)
 8008de0:	f002 faf0 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008de4:	4a28      	ldr	r2, [pc, #160]	@ (8008e88 <RadioSetRxConfig+0x310>)
 8008de6:	f107 0314 	add.w	r3, r7, #20
 8008dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dee:	e883 0003 	stmia.w	r3, {r0, r1}
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fdaf 	bl	800a95a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008dfc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008e00:	f001 fdfa 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008e04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008e06:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008e0a:	fb02 f303 	mul.w	r3, r2, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e16:	4a17      	ldr	r2, [pc, #92]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e18:	6093      	str	r3, [r2, #8]
            break;
 8008e1a:	e0ad      	b.n	8008f78 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f001 ff65 	bl	800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008e22:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	4b11      	ldr	r3, [pc, #68]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008e34:	4a15      	ldr	r2, [pc, #84]	@ (8008e8c <RadioSetRxConfig+0x314>)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4413      	add	r3, r2
 8008e3a:	781a      	ldrb	r2, [r3, #0]
 8008e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008e42:	4a0c      	ldr	r2, [pc, #48]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d105      	bne.n	8008e5c <RadioSetRxConfig+0x2e4>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b0b      	cmp	r3, #11
 8008e54:	d008      	beq.n	8008e68 <RadioSetRxConfig+0x2f0>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b0c      	cmp	r3, #12
 8008e5a:	d005      	beq.n	8008e68 <RadioSetRxConfig+0x2f0>
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d116      	bne.n	8008e90 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b0c      	cmp	r3, #12
 8008e66:	d113      	bne.n	8008e90 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008e68:	4b02      	ldr	r3, [pc, #8]	@ (8008e74 <RadioSetRxConfig+0x2fc>)
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008e70:	e012      	b.n	8008e98 <RadioSetRxConfig+0x320>
 8008e72:	bf00      	nop
 8008e74:	20000494 	.word	0x20000494
 8008e78:	2000005d 	.word	0x2000005d
 8008e7c:	200004cc 	.word	0x200004cc
 8008e80:	200004a2 	.word	0x200004a2
 8008e84:	0800d6c0 	.word	0x0800d6c0
 8008e88:	0800d6c8 	.word	0x0800d6c8
 8008e8c:	0800dcb4 	.word	0x0800dcb4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008e90:	4b3b      	ldr	r3, [pc, #236]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008e98:	4b39      	ldr	r3, [pc, #228]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008e9e:	4b38      	ldr	r3, [pc, #224]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ea4:	2b05      	cmp	r3, #5
 8008ea6:	d004      	beq.n	8008eb2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008ea8:	4b35      	ldr	r3, [pc, #212]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008eaa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d10a      	bne.n	8008ec8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008eb2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008eb4:	2b0b      	cmp	r3, #11
 8008eb6:	d803      	bhi.n	8008ec0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008eb8:	4b31      	ldr	r3, [pc, #196]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008eba:	220c      	movs	r2, #12
 8008ebc:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008ebe:	e006      	b.n	8008ece <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008ec2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ec4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008ec6:	e002      	b.n	8008ece <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008eca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008ecc:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008ece:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008ed4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f84 <RadioSetRxConfig+0x40c>)
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	4b29      	ldr	r3, [pc, #164]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008edc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008ede:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8008ee2:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008ee4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008ee8:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008eec:	4b24      	ldr	r3, [pc, #144]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008eee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008ef2:	f000 fbce 	bl	8009692 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	f7ff fd6a 	bl	80089d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008efc:	4822      	ldr	r0, [pc, #136]	@ (8008f88 <RadioSetRxConfig+0x410>)
 8008efe:	f002 f993 	bl	800b228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f02:	4822      	ldr	r0, [pc, #136]	@ (8008f8c <RadioSetRxConfig+0x414>)
 8008f04:	f002 fa5e 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008f08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f001 fefc 	bl	800ad0a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8008f12:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008f16:	f002 fbbd 	bl	800b694 <SUBGRF_ReadRegister>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	4619      	mov	r1, r3
 8008f24:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008f28:	f002 fb92 	bl	800b650 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008f2c:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d10d      	bne.n	8008f52 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008f36:	f240 7036 	movw	r0, #1846	@ 0x736
 8008f3a:	f002 fbab 	bl	800b694 <SUBGRF_ReadRegister>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f023 0304 	bic.w	r3, r3, #4
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	4619      	mov	r1, r3
 8008f48:	f240 7036 	movw	r0, #1846	@ 0x736
 8008f4c:	f002 fb80 	bl	800b650 <SUBGRF_WriteRegister>
 8008f50:	e00c      	b.n	8008f6c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008f52:	f240 7036 	movw	r0, #1846	@ 0x736
 8008f56:	f002 fb9d 	bl	800b694 <SUBGRF_ReadRegister>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f043 0304 	orr.w	r3, r3, #4
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	f240 7036 	movw	r0, #1846	@ 0x736
 8008f68:	f002 fb72 	bl	800b650 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008f6c:	4b04      	ldr	r3, [pc, #16]	@ (8008f80 <RadioSetRxConfig+0x408>)
 8008f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f72:	609a      	str	r2, [r3, #8]
            break;
 8008f74:	e000      	b.n	8008f78 <RadioSetRxConfig+0x400>
            break;
 8008f76:	bf00      	nop
    }
}
 8008f78:	bf00      	nop
 8008f7a:	3728      	adds	r7, #40	@ 0x28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000494 	.word	0x20000494
 8008f84:	2000005d 	.word	0x2000005d
 8008f88:	200004cc 	.word	0x200004cc
 8008f8c:	200004a2 	.word	0x200004a2

08008f90 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60ba      	str	r2, [r7, #8]
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008fa2:	f002 fe56 	bl	800bc52 <RFW_DeInit>
    switch( modem )
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	f000 80c7 	beq.w	800913c <RadioSetTxConfig+0x1ac>
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	f300 80d6 	bgt.w	8009160 <RadioSetTxConfig+0x1d0>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <RadioSetTxConfig+0x2e>
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d059      	beq.n	8009070 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008fbc:	e0d0      	b.n	8009160 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fbe:	4b77      	ldr	r3, [pc, #476]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008fc6:	4a75      	ldr	r2, [pc, #468]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008fcc:	4b73      	ldr	r3, [pc, #460]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fce:	220b      	movs	r2, #11
 8008fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f002 fd6f 	bl	800bab8 <SUBGRF_GetFskBandwidthRegValue>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4b6f      	ldr	r3, [pc, #444]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008fe4:	4a6d      	ldr	r2, [pc, #436]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008fea:	4b6c      	ldr	r3, [pc, #432]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008ff0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	4b69      	ldr	r3, [pc, #420]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008ff8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008ffa:	4b68      	ldr	r3, [pc, #416]	@ (800919c <RadioSetTxConfig+0x20c>)
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009000:	4b66      	ldr	r3, [pc, #408]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009002:	2218      	movs	r2, #24
 8009004:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009006:	4b65      	ldr	r3, [pc, #404]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009008:	2200      	movs	r2, #0
 800900a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800900c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009010:	f083 0301 	eor.w	r3, r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	461a      	mov	r2, r3
 8009018:	4b60      	ldr	r3, [pc, #384]	@ (800919c <RadioSetTxConfig+0x20c>)
 800901a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800901c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009024:	4b5d      	ldr	r3, [pc, #372]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009026:	22f2      	movs	r2, #242	@ 0xf2
 8009028:	75da      	strb	r2, [r3, #23]
 800902a:	e002      	b.n	8009032 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800902c:	4b5b      	ldr	r3, [pc, #364]	@ (800919c <RadioSetTxConfig+0x20c>)
 800902e:	2201      	movs	r2, #1
 8009030:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009032:	4b5a      	ldr	r3, [pc, #360]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009034:	2201      	movs	r2, #1
 8009036:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009038:	f000 fb2b 	bl	8009692 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800903c:	2000      	movs	r0, #0
 800903e:	f7ff fcc7 	bl	80089d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009042:	4857      	ldr	r0, [pc, #348]	@ (80091a0 <RadioSetTxConfig+0x210>)
 8009044:	f002 f8f0 	bl	800b228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009048:	4856      	ldr	r0, [pc, #344]	@ (80091a4 <RadioSetTxConfig+0x214>)
 800904a:	f002 f9bb 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800904e:	4a56      	ldr	r2, [pc, #344]	@ (80091a8 <RadioSetTxConfig+0x218>)
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009058:	e883 0003 	stmia.w	r3, {r0, r1}
 800905c:	f107 0310 	add.w	r3, r7, #16
 8009060:	4618      	mov	r0, r3
 8009062:	f001 fc7a 	bl	800a95a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009066:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800906a:	f001 fcc5 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
            break;
 800906e:	e078      	b.n	8009162 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009070:	4b4a      	ldr	r3, [pc, #296]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	b2da      	uxtb	r2, r3
 800907c:	4b47      	ldr	r3, [pc, #284]	@ (800919c <RadioSetTxConfig+0x20c>)
 800907e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009082:	4a4a      	ldr	r2, [pc, #296]	@ (80091ac <RadioSetTxConfig+0x21c>)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4413      	add	r3, r2
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	4b44      	ldr	r3, [pc, #272]	@ (800919c <RadioSetTxConfig+0x20c>)
 800908c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009090:	4a42      	ldr	r2, [pc, #264]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009092:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009096:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d105      	bne.n	80090ac <RadioSetTxConfig+0x11c>
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	2b0b      	cmp	r3, #11
 80090a4:	d008      	beq.n	80090b8 <RadioSetTxConfig+0x128>
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d005      	beq.n	80090b8 <RadioSetTxConfig+0x128>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	2b0c      	cmp	r3, #12
 80090b6:	d104      	bne.n	80090c2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80090b8:	4b38      	ldr	r3, [pc, #224]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80090c0:	e003      	b.n	80090ca <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80090c2:	4b36      	ldr	r3, [pc, #216]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80090ca:	4b34      	ldr	r3, [pc, #208]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80090d0:	4b32      	ldr	r3, [pc, #200]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80090d6:	2b05      	cmp	r3, #5
 80090d8:	d004      	beq.n	80090e4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80090da:	4b30      	ldr	r3, [pc, #192]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d10a      	bne.n	80090fa <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80090e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090e6:	2b0b      	cmp	r3, #11
 80090e8:	d803      	bhi.n	80090f2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80090ea:	4b2c      	ldr	r3, [pc, #176]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090ec:	220c      	movs	r2, #12
 80090ee:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80090f0:	e006      	b.n	8009100 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80090f2:	4a2a      	ldr	r2, [pc, #168]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090f6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80090f8:	e002      	b.n	8009100 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80090fa:	4a28      	ldr	r2, [pc, #160]	@ (800919c <RadioSetTxConfig+0x20c>)
 80090fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090fe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009100:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8009104:	4b25      	ldr	r3, [pc, #148]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009106:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009108:	4b29      	ldr	r3, [pc, #164]	@ (80091b0 <RadioSetTxConfig+0x220>)
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	4b23      	ldr	r3, [pc, #140]	@ (800919c <RadioSetTxConfig+0x20c>)
 800910e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009110:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009114:	4b21      	ldr	r3, [pc, #132]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009116:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800911a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800911e:	4b1f      	ldr	r3, [pc, #124]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8009124:	f000 fab5 	bl	8009692 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009128:	2001      	movs	r0, #1
 800912a:	f7ff fc51 	bl	80089d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800912e:	481c      	ldr	r0, [pc, #112]	@ (80091a0 <RadioSetTxConfig+0x210>)
 8009130:	f002 f87a 	bl	800b228 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009134:	481b      	ldr	r0, [pc, #108]	@ (80091a4 <RadioSetTxConfig+0x214>)
 8009136:	f002 f945 	bl	800b3c4 <SUBGRF_SetPacketParams>
            break;
 800913a:	e012      	b.n	8009162 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800913c:	2004      	movs	r0, #4
 800913e:	f7ff fc47 	bl	80089d0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009144:	2202      	movs	r2, #2
 8009146:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800914a:	4a14      	ldr	r2, [pc, #80]	@ (800919c <RadioSetTxConfig+0x20c>)
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009150:	4b12      	ldr	r3, [pc, #72]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009152:	2216      	movs	r2, #22
 8009154:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009158:	4811      	ldr	r0, [pc, #68]	@ (80091a0 <RadioSetTxConfig+0x210>)
 800915a:	f002 f865 	bl	800b228 <SUBGRF_SetModulationParams>
            break;
 800915e:	e000      	b.n	8009162 <RadioSetTxConfig+0x1d2>
            break;
 8009160:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009166:	4618      	mov	r0, r3
 8009168:	f002 fba8 	bl	800b8bc <SUBGRF_SetRfTxPower>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	4b0a      	ldr	r3, [pc, #40]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009172:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009176:	210e      	movs	r1, #14
 8009178:	f640 101f 	movw	r0, #2335	@ 0x91f
 800917c:	f002 fa68 	bl	800b650 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009180:	4b06      	ldr	r3, [pc, #24]	@ (800919c <RadioSetTxConfig+0x20c>)
 8009182:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009186:	4618      	mov	r0, r3
 8009188:	f002 fd77 	bl	800bc7a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800918c:	4a03      	ldr	r2, [pc, #12]	@ (800919c <RadioSetTxConfig+0x20c>)
 800918e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009190:	6053      	str	r3, [r2, #4]
}
 8009192:	bf00      	nop
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20000494 	.word	0x20000494
 80091a0:	200004cc 	.word	0x200004cc
 80091a4:	200004a2 	.word	0x200004a2
 80091a8:	0800d6c8 	.word	0x0800d6c8
 80091ac:	0800dcb4 	.word	0x0800dcb4
 80091b0:	2000005d 	.word	0x2000005d

080091b4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    return true;
 80091bc:	2301      	movs	r3, #1
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	2b0a      	cmp	r3, #10
 80091da:	d83e      	bhi.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
 80091dc:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80091de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009221 	.word	0x08009221
 80091ec:	08009231 	.word	0x08009231
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009249 	.word	0x08009249
 80091f8:	0800924f 	.word	0x0800924f
 80091fc:	08009255 	.word	0x08009255
 8009200:	0800925b 	.word	0x0800925b
 8009204:	08009219 	.word	0x08009219
 8009208:	08009229 	.word	0x08009229
 800920c:	08009239 	.word	0x08009239
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8009210:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8009214:	60fb      	str	r3, [r7, #12]
        break;
 8009216:	e020      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8009218:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 800921c:	60fb      	str	r3, [r7, #12]
        break;
 800921e:	e01c      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8009220:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8009224:	60fb      	str	r3, [r7, #12]
        break;
 8009226:	e018      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8009228:	f245 1361 	movw	r3, #20833	@ 0x5161
 800922c:	60fb      	str	r3, [r7, #12]
        break;
 800922e:	e014      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8009230:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8009234:	60fb      	str	r3, [r7, #12]
        break;
 8009236:	e010      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8009238:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 800923c:	60fb      	str	r3, [r7, #12]
        break;
 800923e:	e00c      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8009240:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8009244:	60fb      	str	r3, [r7, #12]
        break;
 8009246:	e008      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8009248:	4b07      	ldr	r3, [pc, #28]	@ (8009268 <RadioGetLoRaBandwidthInHz+0xa0>)
 800924a:	60fb      	str	r3, [r7, #12]
        break;
 800924c:	e005      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <RadioGetLoRaBandwidthInHz+0xa4>)
 8009250:	60fb      	str	r3, [r7, #12]
        break;
 8009252:	e002      	b.n	800925a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8009254:	4b06      	ldr	r3, [pc, #24]	@ (8009270 <RadioGetLoRaBandwidthInHz+0xa8>)
 8009256:	60fb      	str	r3, [r7, #12]
        break;
 8009258:	bf00      	nop
    }

    return bandwidthInHz;
 800925a:	68fb      	ldr	r3, [r7, #12]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	0001e848 	.word	0x0001e848
 800926c:	0003d090 	.word	0x0003d090
 8009270:	0007a120 	.word	0x0007a120

08009274 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	461a      	mov	r2, r3
 8009282:	4603      	mov	r3, r0
 8009284:	70fb      	strb	r3, [r7, #3]
 8009286:	460b      	mov	r3, r1
 8009288:	803b      	strh	r3, [r7, #0]
 800928a:	4613      	mov	r3, r2
 800928c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800928e:	883b      	ldrh	r3, [r7, #0]
 8009290:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8009292:	78ba      	ldrb	r2, [r7, #2]
 8009294:	f082 0201 	eor.w	r2, r2, #1
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	2a00      	cmp	r2, #0
 800929c:	d001      	beq.n	80092a2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800929e:	2208      	movs	r2, #8
 80092a0:	e000      	b.n	80092a4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80092a2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80092a4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80092a6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80092aa:	7c3b      	ldrb	r3, [r7, #16]
 80092ac:	7d39      	ldrb	r1, [r7, #20]
 80092ae:	2900      	cmp	r1, #0
 80092b0:	d001      	beq.n	80092b6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80092b2:	2102      	movs	r1, #2
 80092b4:	e000      	b.n	80092b8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80092b6:	2100      	movs	r1, #0
 80092b8:	440b      	add	r3, r1
 80092ba:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80092bc:	4413      	add	r3, r2
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b08b      	sub	sp, #44	@ 0x2c
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4611      	mov	r1, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	460b      	mov	r3, r1
 80092d8:	71fb      	strb	r3, [r7, #7]
 80092da:	4613      	mov	r3, r2
 80092dc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	3304      	adds	r3, #4
 80092e2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80092e4:	2300      	movs	r3, #0
 80092e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d002      	beq.n	80092f6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b06      	cmp	r3, #6
 80092f4:	d104      	bne.n	8009300 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80092f6:	88bb      	ldrh	r3, [r7, #4]
 80092f8:	2b0b      	cmp	r3, #11
 80092fa:	d801      	bhi.n	8009300 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80092fc:	230c      	movs	r3, #12
 80092fe:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d105      	bne.n	8009312 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b0b      	cmp	r3, #11
 800930a:	d008      	beq.n	800931e <RadioGetLoRaTimeOnAirNumerator+0x56>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b0c      	cmp	r3, #12
 8009310:	d005      	beq.n	800931e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d105      	bne.n	8009324 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b0c      	cmp	r3, #12
 800931c:	d102      	bne.n	8009324 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009324:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8009328:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800932a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800932e:	2a00      	cmp	r2, #0
 8009330:	d001      	beq.n	8009336 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8009332:	2210      	movs	r2, #16
 8009334:	e000      	b.n	8009338 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8009336:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009338:	4413      	add	r3, r2
 800933a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8009340:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8009342:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8009346:	2a00      	cmp	r2, #0
 8009348:	d001      	beq.n	800934e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800934a:	2200      	movs	r2, #0
 800934c:	e000      	b.n	8009350 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800934e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8009350:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8009352:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b06      	cmp	r3, #6
 8009358:	d803      	bhi.n	8009362 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	623b      	str	r3, [r7, #32]
 8009360:	e00e      	b.n	8009380 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3308      	adds	r3, #8
 8009366:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8009368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	3b02      	subs	r3, #2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	623b      	str	r3, [r7, #32]
 8009378:	e002      	b.n	8009380 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	da01      	bge.n	800938a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	4413      	add	r3, r2
 8009390:	1e5a      	subs	r2, r3, #1
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	fb92 f3f3 	sdiv	r3, r2, r3
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	fb03 f202 	mul.w	r2, r3, r2
 800939e:	88bb      	ldrh	r3, [r7, #4]
 80093a0:	4413      	add	r3, r2
    int32_t intermediate =
 80093a2:	330c      	adds	r3, #12
 80093a4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	d802      	bhi.n	80093b2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	3302      	adds	r3, #2
 80093b0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3b02      	subs	r3, #2
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	372c      	adds	r7, #44	@ 0x2c
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr
	...

080093cc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	@ 0x28
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
 80093d6:	461a      	mov	r2, r3
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]
 80093dc:	4613      	mov	r3, r2
 80093de:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80093e4:	2301      	movs	r3, #1
 80093e6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <RadioTimeOnAir+0x28>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d017      	beq.n	8009422 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80093f2:	e035      	b.n	8009460 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80093f4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80093f8:	8c3a      	ldrh	r2, [r7, #32]
 80093fa:	7bb9      	ldrb	r1, [r7, #14]
 80093fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4603      	mov	r3, r0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff ff32 	bl	8009274 <RadioGetGfskTimeOnAirNumerator>
 8009410:	4603      	mov	r3, r0
 8009412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	613b      	str	r3, [r7, #16]
        break;
 8009420:	e01e      	b.n	8009460 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8009422:	8c39      	ldrh	r1, [r7, #32]
 8009424:	7bba      	ldrb	r2, [r7, #14]
 8009426:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800942a:	9302      	str	r3, [sp, #8]
 800942c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	460b      	mov	r3, r1
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	68b8      	ldr	r0, [r7, #8]
 800943e:	f7ff ff43 	bl	80092c8 <RadioGetLoRaTimeOnAirNumerator>
 8009442:	4603      	mov	r3, r0
 8009444:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800944e:	4a0a      	ldr	r2, [pc, #40]	@ (8009478 <RadioTimeOnAir+0xac>)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff feb6 	bl	80091c8 <RadioGetLoRaBandwidthInHz>
 800945c:	6138      	str	r0, [r7, #16]
        break;
 800945e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	4413      	add	r3, r2
 8009466:	1e5a      	subs	r2, r3, #1
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	0800dcb4 	.word	0x0800dcb4

0800947c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009488:	2300      	movs	r3, #0
 800948a:	2200      	movs	r2, #0
 800948c:	f240 2101 	movw	r1, #513	@ 0x201
 8009490:	f240 2001 	movw	r0, #513	@ 0x201
 8009494:	f001 fd32 	bl	800aefc <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009498:	4b70      	ldr	r3, [pc, #448]	@ (800965c <RadioSend+0x1e0>)
 800949a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800949e:	2101      	movs	r1, #1
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 f9e3 	bl	800b86c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80094a6:	4b6d      	ldr	r3, [pc, #436]	@ (800965c <RadioSend+0x1e0>)
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d112      	bne.n	80094d4 <RadioSend+0x58>
 80094ae:	4b6b      	ldr	r3, [pc, #428]	@ (800965c <RadioSend+0x1e0>)
 80094b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80094b4:	2b06      	cmp	r3, #6
 80094b6:	d10d      	bne.n	80094d4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80094b8:	f640 0089 	movw	r0, #2185	@ 0x889
 80094bc:	f002 f8ea 	bl	800b694 <SUBGRF_ReadRegister>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f023 0304 	bic.w	r3, r3, #4
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	4619      	mov	r1, r3
 80094ca:	f640 0089 	movw	r0, #2185	@ 0x889
 80094ce:	f002 f8bf 	bl	800b650 <SUBGRF_WriteRegister>
 80094d2:	e00c      	b.n	80094ee <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80094d4:	f640 0089 	movw	r0, #2185	@ 0x889
 80094d8:	f002 f8dc 	bl	800b694 <SUBGRF_ReadRegister>
 80094dc:	4603      	mov	r3, r0
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	4619      	mov	r1, r3
 80094e6:	f640 0089 	movw	r0, #2185	@ 0x889
 80094ea:	f002 f8b1 	bl	800b650 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80094ee:	4b5b      	ldr	r3, [pc, #364]	@ (800965c <RadioSend+0x1e0>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	f200 80a2 	bhi.w	800963c <RadioSend+0x1c0>
 80094f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009500 <RadioSend+0x84>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	0800952f 	.word	0x0800952f
 8009504:	08009515 	.word	0x08009515
 8009508:	0800952f 	.word	0x0800952f
 800950c:	08009585 	.word	0x08009585
 8009510:	080095a5 	.word	0x080095a5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8009514:	4a51      	ldr	r2, [pc, #324]	@ (800965c <RadioSend+0x1e0>)
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800951a:	4851      	ldr	r0, [pc, #324]	@ (8009660 <RadioSend+0x1e4>)
 800951c:	f001 ff52 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	2200      	movs	r2, #0
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f001 fa04 	bl	800a934 <SUBGRF_SendPayload>
            break;
 800952c:	e087      	b.n	800963e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800952e:	f002 fb96 	bl	800bc5e <RFW_Is_Init>
 8009532:	4603      	mov	r3, r0
 8009534:	2b01      	cmp	r3, #1
 8009536:	d118      	bne.n	800956a <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8009538:	f107 020d 	add.w	r2, r7, #13
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f002 fba4 	bl	800bc8e <RFW_TransmitInit>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10c      	bne.n	8009566 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800954c:	7b7a      	ldrb	r2, [r7, #13]
 800954e:	4b43      	ldr	r3, [pc, #268]	@ (800965c <RadioSend+0x1e0>)
 8009550:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009552:	4843      	ldr	r0, [pc, #268]	@ (8009660 <RadioSend+0x1e4>)
 8009554:	f001 ff36 	bl	800b3c4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8009558:	7b7b      	ldrb	r3, [r7, #13]
 800955a:	2200      	movs	r2, #0
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 f9e8 	bl	800a934 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8009564:	e06b      	b.n	800963e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8009566:	2303      	movs	r3, #3
 8009568:	e073      	b.n	8009652 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800956a:	4a3c      	ldr	r2, [pc, #240]	@ (800965c <RadioSend+0x1e0>)
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009570:	483b      	ldr	r0, [pc, #236]	@ (8009660 <RadioSend+0x1e4>)
 8009572:	f001 ff27 	bl	800b3c4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	2200      	movs	r2, #0
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 f9d9 	bl	800a934 <SUBGRF_SendPayload>
            break;
 8009582:	e05c      	b.n	800963e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009584:	4b35      	ldr	r3, [pc, #212]	@ (800965c <RadioSend+0x1e0>)
 8009586:	2202      	movs	r2, #2
 8009588:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800958a:	4a34      	ldr	r2, [pc, #208]	@ (800965c <RadioSend+0x1e0>)
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009590:	4833      	ldr	r0, [pc, #204]	@ (8009660 <RadioSend+0x1e4>)
 8009592:	f001 ff17 	bl	800b3c4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	2200      	movs	r2, #0
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 f9c9 	bl	800a934 <SUBGRF_SendPayload>
            break;
 80095a2:	e04c      	b.n	800963e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	482e      	ldr	r0, [pc, #184]	@ (8009664 <RadioSend+0x1e8>)
 80095ac:	f000 fc96 	bl	8009edc <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80095b0:	4b2a      	ldr	r3, [pc, #168]	@ (800965c <RadioSend+0x1e0>)
 80095b2:	2202      	movs	r2, #2
 80095b4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	3301      	adds	r3, #1
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	4b27      	ldr	r3, [pc, #156]	@ (800965c <RadioSend+0x1e0>)
 80095be:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095c0:	4827      	ldr	r0, [pc, #156]	@ (8009660 <RadioSend+0x1e4>)
 80095c2:	f001 feff 	bl	800b3c4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80095c6:	2100      	movs	r1, #0
 80095c8:	20f1      	movs	r0, #241	@ 0xf1
 80095ca:	f000 f963 	bl	8009894 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80095ce:	2100      	movs	r1, #0
 80095d0:	20f0      	movs	r0, #240	@ 0xf0
 80095d2:	f000 f95f 	bl	8009894 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80095d6:	4b21      	ldr	r3, [pc, #132]	@ (800965c <RadioSend+0x1e0>)
 80095d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095da:	2b64      	cmp	r3, #100	@ 0x64
 80095dc:	d108      	bne.n	80095f0 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80095de:	2170      	movs	r1, #112	@ 0x70
 80095e0:	20f3      	movs	r0, #243	@ 0xf3
 80095e2:	f000 f957 	bl	8009894 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80095e6:	211d      	movs	r1, #29
 80095e8:	20f2      	movs	r0, #242	@ 0xf2
 80095ea:	f000 f953 	bl	8009894 <RadioWrite>
 80095ee:	e007      	b.n	8009600 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80095f0:	21e1      	movs	r1, #225	@ 0xe1
 80095f2:	20f3      	movs	r0, #243	@ 0xf3
 80095f4:	f000 f94e 	bl	8009894 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80095f8:	2104      	movs	r1, #4
 80095fa:	20f2      	movs	r0, #242	@ 0xf2
 80095fc:	f000 f94a 	bl	8009894 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	b29b      	uxth	r3, r3
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	b29b      	uxth	r3, r3
 8009608:	3302      	adds	r3, #2
 800960a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800960c:	89fb      	ldrh	r3, [r7, #14]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	b2db      	uxtb	r3, r3
 8009614:	4619      	mov	r1, r3
 8009616:	20f4      	movs	r0, #244	@ 0xf4
 8009618:	f000 f93c 	bl	8009894 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800961c:	89fb      	ldrh	r3, [r7, #14]
 800961e:	b2db      	uxtb	r3, r3
 8009620:	4619      	mov	r1, r3
 8009622:	20f5      	movs	r0, #245	@ 0xf5
 8009624:	f000 f936 	bl	8009894 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	3301      	adds	r3, #1
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009632:	4619      	mov	r1, r3
 8009634:	480b      	ldr	r0, [pc, #44]	@ (8009664 <RadioSend+0x1e8>)
 8009636:	f001 f97d 	bl	800a934 <SUBGRF_SendPayload>
            break;
 800963a:	e000      	b.n	800963e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800963c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800963e:	4b07      	ldr	r3, [pc, #28]	@ (800965c <RadioSend+0x1e0>)
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4619      	mov	r1, r3
 8009644:	4808      	ldr	r0, [pc, #32]	@ (8009668 <RadioSend+0x1ec>)
 8009646:	f003 fa3f 	bl	800cac8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800964a:	4807      	ldr	r0, [pc, #28]	@ (8009668 <RadioSend+0x1ec>)
 800964c:	f003 f95e 	bl	800c90c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000494 	.word	0x20000494
 8009660:	200004a2 	.word	0x200004a2
 8009664:	20000390 	.word	0x20000390
 8009668:	200004f0 	.word	0x200004f0

0800966c <RadioSleep>:

static void RadioSleep( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8009672:	2300      	movs	r3, #0
 8009674:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009676:	793b      	ldrb	r3, [r7, #4]
 8009678:	f043 0304 	orr.w	r3, r3, #4
 800967c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800967e:	7938      	ldrb	r0, [r7, #4]
 8009680:	f001 fa34 	bl	800aaec <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009684:	2002      	movs	r0, #2
 8009686:	f7f9 fab5 	bl	8002bf4 <HAL_Delay>
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <RadioStandby>:

static void RadioStandby( void )
{
 8009692:	b580      	push	{r7, lr}
 8009694:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009696:	2000      	movs	r0, #0
 8009698:	f001 fa5c 	bl	800ab54 <SUBGRF_SetStandby>
}
 800969c:	bf00      	nop
 800969e:	bd80      	pop	{r7, pc}

080096a0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80096a8:	f002 fad9 	bl	800bc5e <RFW_Is_Init>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d102      	bne.n	80096b8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80096b2:	f002 fafc 	bl	800bcae <RFW_ReceiveInit>
 80096b6:	e007      	b.n	80096c8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80096b8:	2300      	movs	r3, #0
 80096ba:	2200      	movs	r2, #0
 80096bc:	f240 2162 	movw	r1, #610	@ 0x262
 80096c0:	f240 2062 	movw	r0, #610	@ 0x262
 80096c4:	f001 fc1a 	bl	800aefc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	4811      	ldr	r0, [pc, #68]	@ (8009718 <RadioRx+0x78>)
 80096d2:	f003 f9f9 	bl	800cac8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80096d6:	4810      	ldr	r0, [pc, #64]	@ (8009718 <RadioRx+0x78>)
 80096d8:	f003 f918 	bl	800c90c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80096dc:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <RadioRx+0x7c>)
 80096de:	2200      	movs	r2, #0
 80096e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80096e2:	4b0e      	ldr	r3, [pc, #56]	@ (800971c <RadioRx+0x7c>)
 80096e4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 f8be 	bl	800b86c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80096f0:	4b0a      	ldr	r3, [pc, #40]	@ (800971c <RadioRx+0x7c>)
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80096f8:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80096fc:	f001 fa66 	bl	800abcc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8009700:	e005      	b.n	800970e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8009702:	4b06      	ldr	r3, [pc, #24]	@ (800971c <RadioRx+0x7c>)
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	019b      	lsls	r3, r3, #6
 8009708:	4618      	mov	r0, r3
 800970a:	f001 fa5f 	bl	800abcc <SUBGRF_SetRx>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20000508 	.word	0x20000508
 800971c:	20000494 	.word	0x20000494

08009720 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8009728:	f002 fa99 	bl	800bc5e <RFW_Is_Init>
 800972c:	4603      	mov	r3, r0
 800972e:	2b01      	cmp	r3, #1
 8009730:	d102      	bne.n	8009738 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8009732:	f002 fabc 	bl	800bcae <RFW_ReceiveInit>
 8009736:	e007      	b.n	8009748 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009738:	2300      	movs	r3, #0
 800973a:	2200      	movs	r2, #0
 800973c:	f240 2162 	movw	r1, #610	@ 0x262
 8009740:	f240 2062 	movw	r0, #610	@ 0x262
 8009744:	f001 fbda 	bl	800aefc <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d006      	beq.n	800975c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4811      	ldr	r0, [pc, #68]	@ (8009798 <RadioRxBoosted+0x78>)
 8009752:	f003 f9b9 	bl	800cac8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009756:	4810      	ldr	r0, [pc, #64]	@ (8009798 <RadioRxBoosted+0x78>)
 8009758:	f003 f8d8 	bl	800c90c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800975c:	4b0f      	ldr	r3, [pc, #60]	@ (800979c <RadioRxBoosted+0x7c>)
 800975e:	2200      	movs	r2, #0
 8009760:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009762:	4b0e      	ldr	r3, [pc, #56]	@ (800979c <RadioRxBoosted+0x7c>)
 8009764:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009768:	2100      	movs	r1, #0
 800976a:	4618      	mov	r0, r3
 800976c:	f002 f87e 	bl	800b86c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8009770:	4b0a      	ldr	r3, [pc, #40]	@ (800979c <RadioRxBoosted+0x7c>)
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009778:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800977c:	f001 fa46 	bl	800ac0c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8009780:	e005      	b.n	800978e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8009782:	4b06      	ldr	r3, [pc, #24]	@ (800979c <RadioRxBoosted+0x7c>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	019b      	lsls	r3, r3, #6
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fa3f 	bl	800ac0c <SUBGRF_SetRxBoosted>
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000508 	.word	0x20000508
 800979c:	20000494 	.word	0x20000494

080097a0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	005a      	lsls	r2, r3, #1
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	4413      	add	r3, r2
 80097b2:	4a0c      	ldr	r2, [pc, #48]	@ (80097e4 <RadioSetRxDutyCycle+0x44>)
 80097b4:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80097b6:	2300      	movs	r3, #0
 80097b8:	2200      	movs	r2, #0
 80097ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80097be:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80097c2:	f001 fb9b 	bl	800aefc <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80097c6:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <RadioSetRxDutyCycle+0x44>)
 80097c8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80097cc:	2100      	movs	r1, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f002 f84c 	bl	800b86c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fa3c 	bl	800ac54 <SUBGRF_SetRxDutyCycle>
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000494 	.word	0x20000494

080097e8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80097ec:	4b09      	ldr	r3, [pc, #36]	@ (8009814 <RadioStartCad+0x2c>)
 80097ee:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f002 f839 	bl	800b86c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80097fa:	2300      	movs	r3, #0
 80097fc:	2200      	movs	r2, #0
 80097fe:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8009802:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8009806:	f001 fb79 	bl	800aefc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800980a:	f001 fa4f 	bl	800acac <SUBGRF_SetCad>
}
 800980e:	bf00      	nop
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20000494 	.word	0x20000494

08009818 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
 8009824:	4613      	mov	r3, r2
 8009826:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8009828:	883b      	ldrh	r3, [r7, #0]
 800982a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fbbd 	bl	800afb4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800983a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800983e:	4618      	mov	r0, r3
 8009840:	f002 f83c 	bl	800b8bc <SUBGRF_SetRfTxPower>
 8009844:	4603      	mov	r3, r0
 8009846:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009848:	210e      	movs	r1, #14
 800984a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800984e:	f001 feff 	bl	800b650 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	2101      	movs	r1, #1
 8009856:	4618      	mov	r0, r3
 8009858:	f002 f808 	bl	800b86c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800985c:	f001 fa34 	bl	800acc8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009860:	68f9      	ldr	r1, [r7, #12]
 8009862:	4805      	ldr	r0, [pc, #20]	@ (8009878 <RadioSetTxContinuousWave+0x60>)
 8009864:	f003 f930 	bl	800cac8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009868:	4803      	ldr	r0, [pc, #12]	@ (8009878 <RadioSetTxContinuousWave+0x60>)
 800986a:	f003 f84f 	bl	800c90c <UTIL_TIMER_Start>
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	200004f0 	.word	0x200004f0

0800987c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	4603      	mov	r3, r0
 8009884:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009886:	f001 fe50 	bl	800b52a <SUBGRF_GetRssiInst>
 800988a:	4603      	mov	r3, r0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	460a      	mov	r2, r1
 800989e:	80fb      	strh	r3, [r7, #6]
 80098a0:	4613      	mov	r3, r2
 80098a2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80098a4:	797a      	ldrb	r2, [r7, #5]
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 fed0 	bl	800b650 <SUBGRF_WriteRegister>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80098c2:	88fb      	ldrh	r3, [r7, #6]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f001 fee5 	bl	800b694 <SUBGRF_ReadRegister>
 80098ca:	4603      	mov	r3, r0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	80fb      	strh	r3, [r7, #6]
 80098e0:	4613      	mov	r3, r2
 80098e2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80098e4:	797b      	ldrb	r3, [r7, #5]
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fef1 	bl	800b6d4 <SUBGRF_WriteRegisters>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	4603      	mov	r3, r0
 8009902:	6039      	str	r1, [r7, #0]
 8009904:	80fb      	strh	r3, [r7, #6]
 8009906:	4613      	mov	r3, r2
 8009908:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800990a:	797b      	ldrb	r3, [r7, #5]
 800990c:	b29a      	uxth	r2, r3
 800990e:	88fb      	ldrh	r3, [r7, #6]
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f001 ff00 	bl	800b718 <SUBGRF_ReadRegisters>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	460a      	mov	r2, r1
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d10a      	bne.n	800994c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009936:	4a0e      	ldr	r2, [pc, #56]	@ (8009970 <RadioSetMaxPayloadLength+0x50>)
 8009938:	79bb      	ldrb	r3, [r7, #6]
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	4b0c      	ldr	r3, [pc, #48]	@ (8009970 <RadioSetMaxPayloadLength+0x50>)
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <RadioSetMaxPayloadLength+0x54>)
 8009942:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009944:	480c      	ldr	r0, [pc, #48]	@ (8009978 <RadioSetMaxPayloadLength+0x58>)
 8009946:	f001 fd3d 	bl	800b3c4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800994a:	e00d      	b.n	8009968 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800994c:	4b09      	ldr	r3, [pc, #36]	@ (8009974 <RadioSetMaxPayloadLength+0x54>)
 800994e:	7d5b      	ldrb	r3, [r3, #21]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d109      	bne.n	8009968 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009954:	4a06      	ldr	r2, [pc, #24]	@ (8009970 <RadioSetMaxPayloadLength+0x50>)
 8009956:	79bb      	ldrb	r3, [r7, #6]
 8009958:	7013      	strb	r3, [r2, #0]
 800995a:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <RadioSetMaxPayloadLength+0x50>)
 800995c:	781a      	ldrb	r2, [r3, #0]
 800995e:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <RadioSetMaxPayloadLength+0x54>)
 8009960:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009962:	4805      	ldr	r0, [pc, #20]	@ (8009978 <RadioSetMaxPayloadLength+0x58>)
 8009964:	f001 fd2e 	bl	800b3c4 <SUBGRF_SetPacketParams>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	2000005d 	.word	0x2000005d
 8009974:	20000494 	.word	0x20000494
 8009978:	200004a2 	.word	0x200004a2

0800997c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009986:	4a13      	ldr	r2, [pc, #76]	@ (80099d4 <RadioSetPublicNetwork+0x58>)
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	7313      	strb	r3, [r2, #12]
 800998c:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <RadioSetPublicNetwork+0x58>)
 800998e:	7b1a      	ldrb	r2, [r3, #12]
 8009990:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <RadioSetPublicNetwork+0x58>)
 8009992:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009994:	2001      	movs	r0, #1
 8009996:	f7ff f81b 	bl	80089d0 <RadioSetModem>
    if( enable == true )
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00a      	beq.n	80099b6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80099a0:	2134      	movs	r1, #52	@ 0x34
 80099a2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80099a6:	f001 fe53 	bl	800b650 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80099aa:	2144      	movs	r1, #68	@ 0x44
 80099ac:	f240 7041 	movw	r0, #1857	@ 0x741
 80099b0:	f001 fe4e 	bl	800b650 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80099b4:	e009      	b.n	80099ca <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80099b6:	2114      	movs	r1, #20
 80099b8:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80099bc:	f001 fe48 	bl	800b650 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80099c0:	2124      	movs	r1, #36	@ 0x24
 80099c2:	f240 7041 	movw	r0, #1857	@ 0x741
 80099c6:	f001 fe43 	bl	800b650 <SUBGRF_WriteRegister>
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000494 	.word	0x20000494

080099d8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80099dc:	f001 ffa2 	bl	800b924 <SUBGRF_GetRadioWakeUpTime>
 80099e0:	4603      	mov	r3, r0
 80099e2:	3303      	adds	r3, #3
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80099f0:	f000 f80e 	bl	8009a10 <RadioOnTxTimeoutProcess>
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009a04:	f000 f818 	bl	8009a38 <RadioOnRxTimeoutProcess>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009a14:	4b07      	ldr	r3, [pc, #28]	@ (8009a34 <RadioOnTxTimeoutProcess+0x24>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d008      	beq.n	8009a2e <RadioOnTxTimeoutProcess+0x1e>
 8009a1c:	4b05      	ldr	r3, [pc, #20]	@ (8009a34 <RadioOnTxTimeoutProcess+0x24>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009a26:	4b03      	ldr	r3, [pc, #12]	@ (8009a34 <RadioOnTxTimeoutProcess+0x24>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	4798      	blx	r3
    }
}
 8009a2e:	bf00      	nop
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000490 	.word	0x20000490

08009a38 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009a3c:	4b07      	ldr	r3, [pc, #28]	@ (8009a5c <RadioOnRxTimeoutProcess+0x24>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <RadioOnRxTimeoutProcess+0x1e>
 8009a44:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <RadioOnRxTimeoutProcess+0x24>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009a4e:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <RadioOnRxTimeoutProcess+0x24>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	4798      	blx	r3
    }
}
 8009a56:	bf00      	nop
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000490 	.word	0x20000490

08009a60 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009a6a:	4a05      	ldr	r2, [pc, #20]	@ (8009a80 <RadioOnDioIrq+0x20>)
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8009a72:	f000 f807 	bl	8009a84 <RadioIrqProcess>
}
 8009a76:	bf00      	nop
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000494 	.word	0x20000494

08009a84 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009a84:	b5b0      	push	{r4, r5, r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009a92:	4ba5      	ldr	r3, [pc, #660]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009a94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a9c:	f000 810d 	beq.w	8009cba <RadioIrqProcess+0x236>
 8009aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aa4:	f300 81c0 	bgt.w	8009e28 <RadioIrqProcess+0x3a4>
 8009aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aac:	f000 80f1 	beq.w	8009c92 <RadioIrqProcess+0x20e>
 8009ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ab4:	f300 81b8 	bgt.w	8009e28 <RadioIrqProcess+0x3a4>
 8009ab8:	2b80      	cmp	r3, #128	@ 0x80
 8009aba:	f000 80d6 	beq.w	8009c6a <RadioIrqProcess+0x1e6>
 8009abe:	2b80      	cmp	r3, #128	@ 0x80
 8009ac0:	f300 81b2 	bgt.w	8009e28 <RadioIrqProcess+0x3a4>
 8009ac4:	2b20      	cmp	r3, #32
 8009ac6:	dc49      	bgt.n	8009b5c <RadioIrqProcess+0xd8>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f340 81ad 	ble.w	8009e28 <RadioIrqProcess+0x3a4>
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	2b1f      	cmp	r3, #31
 8009ad2:	f200 81a9 	bhi.w	8009e28 <RadioIrqProcess+0x3a4>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <RadioIrqProcess+0x58>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b65 	.word	0x08009b65
 8009ae0:	08009b9f 	.word	0x08009b9f
 8009ae4:	08009e29 	.word	0x08009e29
 8009ae8:	08009d45 	.word	0x08009d45
 8009aec:	08009e29 	.word	0x08009e29
 8009af0:	08009e29 	.word	0x08009e29
 8009af4:	08009e29 	.word	0x08009e29
 8009af8:	08009db3 	.word	0x08009db3
 8009afc:	08009e29 	.word	0x08009e29
 8009b00:	08009e29 	.word	0x08009e29
 8009b04:	08009e29 	.word	0x08009e29
 8009b08:	08009e29 	.word	0x08009e29
 8009b0c:	08009e29 	.word	0x08009e29
 8009b10:	08009e29 	.word	0x08009e29
 8009b14:	08009e29 	.word	0x08009e29
 8009b18:	08009e29 	.word	0x08009e29
 8009b1c:	08009e29 	.word	0x08009e29
 8009b20:	08009e29 	.word	0x08009e29
 8009b24:	08009e29 	.word	0x08009e29
 8009b28:	08009e29 	.word	0x08009e29
 8009b2c:	08009e29 	.word	0x08009e29
 8009b30:	08009e29 	.word	0x08009e29
 8009b34:	08009e29 	.word	0x08009e29
 8009b38:	08009e29 	.word	0x08009e29
 8009b3c:	08009e29 	.word	0x08009e29
 8009b40:	08009e29 	.word	0x08009e29
 8009b44:	08009e29 	.word	0x08009e29
 8009b48:	08009e29 	.word	0x08009e29
 8009b4c:	08009e29 	.word	0x08009e29
 8009b50:	08009e29 	.word	0x08009e29
 8009b54:	08009e29 	.word	0x08009e29
 8009b58:	08009dc3 	.word	0x08009dc3
 8009b5c:	2b40      	cmp	r3, #64	@ 0x40
 8009b5e:	f000 814b 	beq.w	8009df8 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009b62:	e161      	b.n	8009e28 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009b64:	4871      	ldr	r0, [pc, #452]	@ (8009d2c <RadioIrqProcess+0x2a8>)
 8009b66:	f002 ff3f 	bl	800c9e8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f000 fff2 	bl	800ab54 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009b70:	f002 f87c 	bl	800bc6c <RFW_Is_LongPacketModeEnabled>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d101      	bne.n	8009b7e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009b7a:	f002 f8a0 	bl	800bcbe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 8152 	beq.w	8009e2c <RadioIrqProcess+0x3a8>
 8009b88:	4b69      	ldr	r3, [pc, #420]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 814c 	beq.w	8009e2c <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009b94:	4b66      	ldr	r3, [pc, #408]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4798      	blx	r3
        break;
 8009b9c:	e146      	b.n	8009e2c <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009b9e:	4865      	ldr	r0, [pc, #404]	@ (8009d34 <RadioIrqProcess+0x2b0>)
 8009ba0:	f002 ff22 	bl	800c9e8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009ba4:	4b60      	ldr	r3, [pc, #384]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	f083 0301 	eor.w	r3, r3, #1
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d014      	beq.n	8009bdc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f000 ffce 	bl	800ab54 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009bb8:	2100      	movs	r1, #0
 8009bba:	f640 1002 	movw	r0, #2306	@ 0x902
 8009bbe:	f001 fd47 	bl	800b650 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8009bc2:	f640 1044 	movw	r0, #2372	@ 0x944
 8009bc6:	f001 fd65 	bl	800b694 <SUBGRF_ReadRegister>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f043 0302 	orr.w	r3, r3, #2
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f640 1044 	movw	r0, #2372	@ 0x944
 8009bd8:	f001 fd3a 	bl	800b650 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009bdc:	1dfb      	adds	r3, r7, #7
 8009bde:	22ff      	movs	r2, #255	@ 0xff
 8009be0:	4619      	mov	r1, r3
 8009be2:	4855      	ldr	r0, [pc, #340]	@ (8009d38 <RadioIrqProcess+0x2b4>)
 8009be4:	f000 fe84 	bl	800a8f0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009be8:	4854      	ldr	r0, [pc, #336]	@ (8009d3c <RadioIrqProcess+0x2b8>)
 8009bea:	f001 fcdf 	bl	800b5ac <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8009bee:	4b50      	ldr	r3, [pc, #320]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 811c 	beq.w	8009e30 <RadioIrqProcess+0x3ac>
 8009bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8116 	beq.w	8009e30 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009c04:	4b48      	ldr	r3, [pc, #288]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009c06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10e      	bne.n	8009c2c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8009c0e:	4b48      	ldr	r3, [pc, #288]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689c      	ldr	r4, [r3, #8]
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	4619      	mov	r1, r3
 8009c18:	4b43      	ldr	r3, [pc, #268]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009c1a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8009c1e:	461a      	mov	r2, r3
 8009c20:	4b41      	ldr	r3, [pc, #260]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009c22:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8009c26:	4844      	ldr	r0, [pc, #272]	@ (8009d38 <RadioIrqProcess+0x2b4>)
 8009c28:	47a0      	blx	r4
                break;
 8009c2a:	e01d      	b.n	8009c68 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c30:	463a      	mov	r2, r7
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 ff67 	bl	800bb08 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689c      	ldr	r4, [r3, #8]
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	4619      	mov	r1, r3
 8009c44:	4b38      	ldr	r3, [pc, #224]	@ (8009d28 <RadioIrqProcess+0x2a4>)
 8009c46:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009c52:	4a3b      	ldr	r2, [pc, #236]	@ (8009d40 <RadioIrqProcess+0x2bc>)
 8009c54:	fb82 5203 	smull	r5, r2, r2, r3
 8009c58:	1192      	asrs	r2, r2, #6
 8009c5a:	17db      	asrs	r3, r3, #31
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	b25b      	sxtb	r3, r3
 8009c60:	4602      	mov	r2, r0
 8009c62:	4835      	ldr	r0, [pc, #212]	@ (8009d38 <RadioIrqProcess+0x2b4>)
 8009c64:	47a0      	blx	r4
                break;
 8009c66:	bf00      	nop
        break;
 8009c68:	e0e2      	b.n	8009e30 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f000 ff72 	bl	800ab54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009c70:	4b2f      	ldr	r3, [pc, #188]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 80dd 	beq.w	8009e34 <RadioIrqProcess+0x3b0>
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80d7 	beq.w	8009e34 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009c86:	4b2a      	ldr	r3, [pc, #168]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	4798      	blx	r3
        break;
 8009c90:	e0d0      	b.n	8009e34 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009c92:	2000      	movs	r0, #0
 8009c94:	f000 ff5e 	bl	800ab54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009c98:	4b25      	ldr	r3, [pc, #148]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80cb 	beq.w	8009e38 <RadioIrqProcess+0x3b4>
 8009ca2:	4b23      	ldr	r3, [pc, #140]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 80c5 	beq.w	8009e38 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009cae:	4b20      	ldr	r3, [pc, #128]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	4798      	blx	r3
        break;
 8009cb8:	e0be      	b.n	8009e38 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009cba:	f000 fdff 	bl	800a8bc <SUBGRF_GetOperatingMode>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d115      	bne.n	8009cf0 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009cc4:	4819      	ldr	r0, [pc, #100]	@ (8009d2c <RadioIrqProcess+0x2a8>)
 8009cc6:	f002 fe8f 	bl	800c9e8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009cca:	2000      	movs	r0, #0
 8009ccc:	f000 ff42 	bl	800ab54 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009cd0:	4b17      	ldr	r3, [pc, #92]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80b1 	beq.w	8009e3c <RadioIrqProcess+0x3b8>
 8009cda:	4b15      	ldr	r3, [pc, #84]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80ab 	beq.w	8009e3c <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8009ce6:	4b12      	ldr	r3, [pc, #72]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4798      	blx	r3
        break;
 8009cee:	e0a5      	b.n	8009e3c <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8009cf0:	f000 fde4 	bl	800a8bc <SUBGRF_GetOperatingMode>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b05      	cmp	r3, #5
 8009cf8:	f040 80a0 	bne.w	8009e3c <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8009cfc:	480d      	ldr	r0, [pc, #52]	@ (8009d34 <RadioIrqProcess+0x2b0>)
 8009cfe:	f002 fe73 	bl	800c9e8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009d02:	2000      	movs	r0, #0
 8009d04:	f000 ff26 	bl	800ab54 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009d08:	4b09      	ldr	r3, [pc, #36]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 8095 	beq.w	8009e3c <RadioIrqProcess+0x3b8>
 8009d12:	4b07      	ldr	r3, [pc, #28]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 808f 	beq.w	8009e3c <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8009d1e:	4b04      	ldr	r3, [pc, #16]	@ (8009d30 <RadioIrqProcess+0x2ac>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4798      	blx	r3
        break;
 8009d26:	e089      	b.n	8009e3c <RadioIrqProcess+0x3b8>
 8009d28:	20000494 	.word	0x20000494
 8009d2c:	200004f0 	.word	0x200004f0
 8009d30:	20000490 	.word	0x20000490
 8009d34:	20000508 	.word	0x20000508
 8009d38:	20000390 	.word	0x20000390
 8009d3c:	200004b8 	.word	0x200004b8
 8009d40:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009d44:	4b44      	ldr	r3, [pc, #272]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d079      	beq.n	8009e40 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009d4c:	4a43      	ldr	r2, [pc, #268]	@ (8009e5c <RadioIrqProcess+0x3d8>)
 8009d4e:	4b42      	ldr	r3, [pc, #264]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d52:	0c1b      	lsrs	r3, r3, #16
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	4619      	mov	r1, r3
 8009d58:	f640 1003 	movw	r0, #2307	@ 0x903
 8009d5c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8009e5c <RadioIrqProcess+0x3d8>)
 8009d60:	4b3d      	ldr	r3, [pc, #244]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d64:	0a1b      	lsrs	r3, r3, #8
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f640 1004 	movw	r0, #2308	@ 0x904
 8009d6e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009d70:	4a3a      	ldr	r2, [pc, #232]	@ (8009e5c <RadioIrqProcess+0x3d8>)
 8009d72:	4b39      	ldr	r3, [pc, #228]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f640 1005 	movw	r0, #2309	@ 0x905
 8009d7e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009d80:	4c36      	ldr	r4, [pc, #216]	@ (8009e5c <RadioIrqProcess+0x3d8>)
 8009d82:	4b37      	ldr	r3, [pc, #220]	@ (8009e60 <RadioIrqProcess+0x3dc>)
 8009d84:	f640 1002 	movw	r0, #2306	@ 0x902
 8009d88:	4798      	blx	r3
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f043 0301 	orr.w	r3, r3, #1
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	4619      	mov	r1, r3
 8009d94:	f640 1002 	movw	r0, #2306	@ 0x902
 8009d98:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009da0:	2300      	movs	r3, #0
 8009da2:	2200      	movs	r2, #0
 8009da4:	f240 2162 	movw	r1, #610	@ 0x262
 8009da8:	f240 2062 	movw	r0, #610	@ 0x262
 8009dac:	f001 f8a6 	bl	800aefc <SUBGRF_SetDioIrqParams>
        break;
 8009db0:	e046      	b.n	8009e40 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009db2:	f001 ff54 	bl	800bc5e <RFW_Is_Init>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d143      	bne.n	8009e44 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009dbc:	f001 ff85 	bl	800bcca <RFW_ReceivePayload>
        break;
 8009dc0:	e040      	b.n	8009e44 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8009dc2:	4828      	ldr	r0, [pc, #160]	@ (8009e64 <RadioIrqProcess+0x3e0>)
 8009dc4:	f002 fe10 	bl	800c9e8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009dc8:	4b23      	ldr	r3, [pc, #140]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009dca:	785b      	ldrb	r3, [r3, #1]
 8009dcc:	f083 0301 	eor.w	r3, r3, #1
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f000 febc 	bl	800ab54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009ddc:	4b22      	ldr	r3, [pc, #136]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d031      	beq.n	8009e48 <RadioIrqProcess+0x3c4>
 8009de4:	4b20      	ldr	r3, [pc, #128]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d02c      	beq.n	8009e48 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8009dee:	4b1e      	ldr	r3, [pc, #120]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	4798      	blx	r3
        break;
 8009df6:	e027      	b.n	8009e48 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8009df8:	4b17      	ldr	r3, [pc, #92]	@ (8009e58 <RadioIrqProcess+0x3d4>)
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	f083 0301 	eor.w	r3, r3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8009e06:	2000      	movs	r0, #0
 8009e08:	f000 fea4 	bl	800ab54 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009e0c:	4b16      	ldr	r3, [pc, #88]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01b      	beq.n	8009e4c <RadioIrqProcess+0x3c8>
 8009e14:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d016      	beq.n	8009e4c <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8009e1e:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <RadioIrqProcess+0x3e4>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	4798      	blx	r3
        break;
 8009e26:	e011      	b.n	8009e4c <RadioIrqProcess+0x3c8>
        break;
 8009e28:	bf00      	nop
 8009e2a:	e010      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e2c:	bf00      	nop
 8009e2e:	e00e      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e30:	bf00      	nop
 8009e32:	e00c      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e34:	bf00      	nop
 8009e36:	e00a      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e38:	bf00      	nop
 8009e3a:	e008      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e3c:	bf00      	nop
 8009e3e:	e006      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e40:	bf00      	nop
 8009e42:	e004      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e44:	bf00      	nop
 8009e46:	e002      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e48:	bf00      	nop
 8009e4a:	e000      	b.n	8009e4e <RadioIrqProcess+0x3ca>
        break;
 8009e4c:	bf00      	nop
    }
}
 8009e4e:	bf00      	nop
 8009e50:	3708      	adds	r7, #8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bdb0      	pop	{r4, r5, r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20000494 	.word	0x20000494
 8009e5c:	08009895 	.word	0x08009895
 8009e60:	080098b9 	.word	0x080098b9
 8009e64:	20000508 	.word	0x20000508
 8009e68:	20000490 	.word	0x20000490

08009e6c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009e70:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <RadioTxPrbs+0x2c>)
 8009e72:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009e76:	2101      	movs	r1, #1
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 fcf7 	bl	800b86c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009e7e:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <RadioTxPrbs+0x30>)
 8009e80:	212d      	movs	r1, #45	@ 0x2d
 8009e82:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009e86:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009e88:	f000 ff27 	bl	800acda <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009e8c:	4804      	ldr	r0, [pc, #16]	@ (8009ea0 <RadioTxPrbs+0x34>)
 8009e8e:	f000 fe7d 	bl	800ab8c <SUBGRF_SetTx>
}
 8009e92:	bf00      	nop
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000494 	.word	0x20000494
 8009e9c:	08009895 	.word	0x08009895
 8009ea0:	000fffff 	.word	0x000fffff

08009ea4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 fd02 	bl	800b8bc <SUBGRF_SetRfTxPower>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009ebc:	210e      	movs	r1, #14
 8009ebe:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009ec2:	f001 fbc5 	bl	800b650 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	2101      	movs	r1, #1
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 fcce 	bl	800b86c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009ed0:	f000 fefa 	bl	800acc8 <SUBGRF_SetTxContinuousWave>
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	@ 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	61bb      	str	r3, [r7, #24]
 8009ef6:	e011      	b.n	8009f1c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	4413      	add	r3, r2
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	440b      	add	r3, r1
 8009f06:	43d2      	mvns	r2, r2
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	61bb      	str	r3, [r7, #24]
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	dbe9      	blt.n	8009ef8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
 8009f28:	e049      	b.n	8009fbe <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	425a      	negs	r2, r3
 8009f2e:	f003 0307 	and.w	r3, r3, #7
 8009f32:	f002 0207 	and.w	r2, r2, #7
 8009f36:	bf58      	it	pl
 8009f38:	4253      	negpl	r3, r2
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	f1c3 0307 	rsb	r3, r3, #7
 8009f40:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	da00      	bge.n	8009f4a <payload_integration+0x6e>
 8009f48:	3307      	adds	r3, #7
 8009f4a:	10db      	asrs	r3, r3, #3
 8009f4c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	3301      	adds	r3, #1
 8009f52:	425a      	negs	r2, r3
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	f002 0207 	and.w	r2, r2, #7
 8009f5c:	bf58      	it	pl
 8009f5e:	4253      	negpl	r3, r2
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f1c3 0307 	rsb	r3, r3, #7
 8009f66:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	da00      	bge.n	8009f72 <payload_integration+0x96>
 8009f70:	3307      	adds	r3, #7
 8009f72:	10db      	asrs	r3, r3, #3
 8009f74:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009f76:	7dbb      	ldrb	r3, [r7, #22]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	fa42 f303 	asr.w	r3, r2, r3
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009f8e:	7ffa      	ldrb	r2, [r7, #31]
 8009f90:	7cfb      	ldrb	r3, [r7, #19]
 8009f92:	4053      	eors	r3, r2
 8009f94:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009f96:	7d3b      	ldrb	r3, [r7, #20]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b25a      	sxtb	r2, r3
 8009fa0:	7ff9      	ldrb	r1, [r7, #31]
 8009fa2:	7d7b      	ldrb	r3, [r7, #21]
 8009fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa8:	b25b      	sxtb	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b259      	sxtb	r1, r3
 8009fae:	7d3b      	ldrb	r3, [r7, #20]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	b2ca      	uxtb	r2, r1
 8009fb6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	dbb0      	blt.n	8009f2a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009fc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fcc:	01db      	lsls	r3, r3, #7
 8009fce:	b25a      	sxtb	r2, r3
 8009fd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fd4:	019b      	lsls	r3, r3, #6
 8009fd6:	b25b      	sxtb	r3, r3
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	b25b      	sxtb	r3, r3
 8009fdc:	7ffa      	ldrb	r2, [r7, #31]
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	d101      	bne.n	8009fe6 <payload_integration+0x10a>
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	e000      	b.n	8009fe8 <payload_integration+0x10c>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	b259      	sxtb	r1, r3
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	b2ca      	uxtb	r2, r1
 8009ff4:	701a      	strb	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3724      	adds	r7, #36	@ 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr

0800a000 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08c      	sub	sp, #48	@ 0x30
 800a004:	af00      	add	r7, sp, #0
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 800a014:	f107 0320 	add.w	r3, r7, #32
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a01e:	f001 fe18 	bl	800bc52 <RFW_DeInit>

    if( rxContinuous != 0 )
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bf14      	ite	ne
 800a032:	2301      	movne	r3, #1
 800a034:	2300      	moveq	r3, #0
 800a036:	b2da      	uxtb	r2, r3
 800a038:	4ba3      	ldr	r3, [pc, #652]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a03a:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800a03c:	7bfb      	ldrb	r3, [r7, #15]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <RadioSetRxGenericConfig+0x4a>
 800a042:	2b01      	cmp	r3, #1
 800a044:	f000 80dc 	beq.w	800a200 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800a048:	e195      	b.n	800a376 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <RadioSetRxGenericConfig+0x5a>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d102      	bne.n	800a060 <RadioSetRxGenericConfig+0x60>
            return -1;
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	e18b      	b.n	800a378 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	7f9b      	ldrb	r3, [r3, #30]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d902      	bls.n	800a06e <RadioSetRxGenericConfig+0x6e>
            return -1;
 800a068:	f04f 33ff 	mov.w	r3, #4294967295
 800a06c:	e184      	b.n	800a378 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6919      	ldr	r1, [r3, #16]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	7f9b      	ldrb	r3, [r3, #30]
 800a076:	461a      	mov	r2, r3
 800a078:	f107 0320 	add.w	r3, r7, #32
 800a07c:	4618      	mov	r0, r3
 800a07e:	f002 fbd5 	bl	800c82c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bf14      	ite	ne
 800a08a:	2301      	movne	r3, #1
 800a08c:	2300      	moveq	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fe2b 	bl	800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a096:	4b8c      	ldr	r3, [pc, #560]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	4a89      	ldr	r2, [pc, #548]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a0ac:	4b86      	ldr	r3, [pc, #536]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fcfe 	bl	800bab8 <SUBGRF_GetFskBandwidthRegValue>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4b81      	ldr	r3, [pc, #516]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a0c6:	4b80      	ldr	r3, [pc, #512]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	4b7c      	ldr	r3, [pc, #496]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0d8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	7fda      	ldrb	r2, [r3, #31]
 800a0de:	4b7a      	ldr	r3, [pc, #488]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0e0:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	7f9b      	ldrb	r3, [r3, #30]
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	4b77      	ldr	r3, [pc, #476]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0ec:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800a0f4:	4b74      	ldr	r3, [pc, #464]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a0f6:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	b2da      	uxtb	r2, r3
 800a108:	4b6f      	ldr	r3, [pc, #444]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a10a:	759a      	strb	r2, [r3, #22]
 800a10c:	e00b      	b.n	800a126 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a114:	2b02      	cmp	r3, #2
 800a116:	d103      	bne.n	800a120 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a118:	4b6b      	ldr	r3, [pc, #428]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a11a:	22ff      	movs	r2, #255	@ 0xff
 800a11c:	759a      	strb	r2, [r3, #22]
 800a11e:	e002      	b.n	800a126 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800a120:	4b69      	ldr	r3, [pc, #420]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a122:	22ff      	movs	r2, #255	@ 0xff
 800a124:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d004      	beq.n	800a13a <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a136:	2b02      	cmp	r3, #2
 800a138:	d12d      	bne.n	800a196 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a140:	2bf1      	cmp	r3, #241	@ 0xf1
 800a142:	d00c      	beq.n	800a15e <RadioSetRxGenericConfig+0x15e>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a14a:	2bf2      	cmp	r3, #242	@ 0xf2
 800a14c:	d007      	beq.n	800a15e <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800a154:	2b01      	cmp	r3, #1
 800a156:	d002      	beq.n	800a15e <RadioSetRxGenericConfig+0x15e>
                return -1;
 800a158:	f04f 33ff 	mov.w	r3, #4294967295
 800a15c:	e10c      	b.n	800a378 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 800a15e:	2300      	movs	r3, #0
 800a160:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800a166:	4b59      	ldr	r3, [pc, #356]	@ (800a2cc <RadioSetRxGenericConfig+0x2cc>)
 800a168:	6819      	ldr	r1, [r3, #0]
 800a16a:	f107 0314 	add.w	r3, r7, #20
 800a16e:	4a58      	ldr	r2, [pc, #352]	@ (800a2d0 <RadioSetRxGenericConfig+0x2d0>)
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fd61 	bl	800bc38 <RFW_Init>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <RadioSetRxGenericConfig+0x182>
                return -1;
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	e0fa      	b.n	800a378 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a182:	4b51      	ldr	r3, [pc, #324]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a184:	2200      	movs	r2, #0
 800a186:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a188:	4b4f      	ldr	r3, [pc, #316]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a18a:	2201      	movs	r2, #1
 800a18c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a18e:	4b4e      	ldr	r3, [pc, #312]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a190:	2200      	movs	r2, #0
 800a192:	755a      	strb	r2, [r3, #21]
        {
 800a194:	e00e      	b.n	800a1b4 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800a19c:	4b4a      	ldr	r3, [pc, #296]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a19e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a1a6:	4b48      	ldr	r3, [pc, #288]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a1a8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800a1b0:	4b45      	ldr	r3, [pc, #276]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a1b2:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800a1b4:	f7ff fa6d 	bl	8009692 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f7fe fc09 	bl	80089d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a1be:	4845      	ldr	r0, [pc, #276]	@ (800a2d4 <RadioSetRxGenericConfig+0x2d4>)
 800a1c0:	f001 f832 	bl	800b228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a1c4:	4844      	ldr	r0, [pc, #272]	@ (800a2d8 <RadioSetRxGenericConfig+0x2d8>)
 800a1c6:	f001 f8fd 	bl	800b3c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a1ca:	f107 0320 	add.w	r3, r7, #32
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fbc3 	bl	800a95a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	8b9b      	ldrh	r3, [r3, #28]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fc0d 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	8b1b      	ldrh	r3, [r3, #24]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fbe8 	bl	800a9b8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800a1ee:	fb03 f202 	mul.w	r2, r3, r2
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1fa:	4a33      	ldr	r2, [pc, #204]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a1fc:	6093      	str	r3, [r2, #8]
        break;
 800a1fe:	e0ba      	b.n	800a376 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <RadioSetRxGenericConfig+0x20e>
            return -1;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	e0b4      	b.n	800a378 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a214:	2b01      	cmp	r3, #1
 800a216:	d105      	bne.n	800a224 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800a21e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a222:	e002      	b.n	800a22a <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 800a224:	23ff      	movs	r3, #255	@ 0xff
 800a226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bf14      	ite	ne
 800a232:	2301      	movne	r3, #1
 800a234:	2300      	moveq	r3, #0
 800a236:	b2db      	uxtb	r3, r3
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fd57 	bl	800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fd61 	bl	800ad0a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a248:	4b1f      	ldr	r3, [pc, #124]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a256:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800a262:	4b19      	ldr	r3, [pc, #100]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800a26e:	4b16      	ldr	r3, [pc, #88]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a270:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d010      	beq.n	800a2a0 <RadioSetRxGenericConfig+0x2a0>
 800a27e:	2b02      	cmp	r3, #2
 800a280:	dc2c      	bgt.n	800a2dc <RadioSetRxGenericConfig+0x2dc>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <RadioSetRxGenericConfig+0x28c>
 800a286:	2b01      	cmp	r3, #1
 800a288:	d005      	beq.n	800a296 <RadioSetRxGenericConfig+0x296>
            break;
 800a28a:	e027      	b.n	800a2dc <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a28c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a294:	e023      	b.n	800a2de <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a29e:	e01e      	b.n	800a2de <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a2a6:	2b0b      	cmp	r3, #11
 800a2a8:	d004      	beq.n	800a2b4 <RadioSetRxGenericConfig+0x2b4>
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a2b0:	2b0c      	cmp	r3, #12
 800a2b2:	d104      	bne.n	800a2be <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a2b4:	4b04      	ldr	r3, [pc, #16]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a2bc:	e00f      	b.n	800a2de <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a2be:	4b02      	ldr	r3, [pc, #8]	@ (800a2c8 <RadioSetRxGenericConfig+0x2c8>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a2c6:	e00a      	b.n	800a2de <RadioSetRxGenericConfig+0x2de>
 800a2c8:	20000494 	.word	0x20000494
 800a2cc:	20000490 	.word	0x20000490
 800a2d0:	20000508 	.word	0x20000508
 800a2d4:	200004cc 	.word	0x200004cc
 800a2d8:	200004a2 	.word	0x200004a2
            break;
 800a2dc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a2de:	4b28      	ldr	r3, [pc, #160]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800a2e8:	4b25      	ldr	r3, [pc, #148]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a2ea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800a2f2:	4b23      	ldr	r3, [pc, #140]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a2f4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a2f6:	4a22      	ldr	r2, [pc, #136]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a2f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a2fc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a304:	4b1e      	ldr	r3, [pc, #120]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a306:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800a310:	4b1b      	ldr	r3, [pc, #108]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a312:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 800a316:	f7ff f9bc 	bl	8009692 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a31a:	2001      	movs	r0, #1
 800a31c:	f7fe fb58 	bl	80089d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a320:	4818      	ldr	r0, [pc, #96]	@ (800a384 <RadioSetRxGenericConfig+0x384>)
 800a322:	f000 ff81 	bl	800b228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a326:	4818      	ldr	r0, [pc, #96]	@ (800a388 <RadioSetRxGenericConfig+0x388>)
 800a328:	f001 f84c 	bl	800b3c4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800a32c:	4b14      	ldr	r3, [pc, #80]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a32e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a332:	2b01      	cmp	r3, #1
 800a334:	d10d      	bne.n	800a352 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800a336:	f240 7036 	movw	r0, #1846	@ 0x736
 800a33a:	f001 f9ab 	bl	800b694 <SUBGRF_ReadRegister>
 800a33e:	4603      	mov	r3, r0
 800a340:	f023 0304 	bic.w	r3, r3, #4
 800a344:	b2db      	uxtb	r3, r3
 800a346:	4619      	mov	r1, r3
 800a348:	f240 7036 	movw	r0, #1846	@ 0x736
 800a34c:	f001 f980 	bl	800b650 <SUBGRF_WriteRegister>
 800a350:	e00c      	b.n	800a36c <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800a352:	f240 7036 	movw	r0, #1846	@ 0x736
 800a356:	f001 f99d 	bl	800b694 <SUBGRF_ReadRegister>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f043 0304 	orr.w	r3, r3, #4
 800a360:	b2db      	uxtb	r3, r3
 800a362:	4619      	mov	r1, r3
 800a364:	f240 7036 	movw	r0, #1846	@ 0x736
 800a368:	f001 f972 	bl	800b650 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800a36c:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <RadioSetRxGenericConfig+0x380>)
 800a36e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a372:	609a      	str	r2, [r3, #8]
        break;
 800a374:	bf00      	nop
    }
    return status;
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3730      	adds	r7, #48	@ 0x30
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000494 	.word	0x20000494
 800a384:	200004cc 	.word	0x200004cc
 800a388:	200004a2 	.word	0x200004a2

0800a38c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	@ 0x38
 800a390:	af00      	add	r7, sp, #0
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607b      	str	r3, [r7, #4]
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	4613      	mov	r3, r2
 800a39c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800a39e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800a3a8:	f001 fc53 	bl	800bc52 <RFW_DeInit>
    switch( modem )
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	f200 8205 	bhi.w	800a7be <RadioSetTxGenericConfig+0x432>
 800a3b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3bc <RadioSetTxGenericConfig+0x30>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a541 	.word	0x0800a541
 800a3c0:	0800a689 	.word	0x0800a689
 800a3c4:	0800a781 	.word	0x0800a781
 800a3c8:	0800a3cd 	.word	0x0800a3cd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	7c9b      	ldrb	r3, [r3, #18]
 800a3d0:	2b08      	cmp	r3, #8
 800a3d2:	d902      	bls.n	800a3da <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d8:	e206      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	6899      	ldr	r1, [r3, #8]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	7c9b      	ldrb	r3, [r3, #18]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f002 fa1f 	bl	800c82c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 800a3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fa:	e1f5      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a404:	4293      	cmp	r3, r2
 800a406:	d813      	bhi.n	800a430 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800a408:	2302      	movs	r3, #2
 800a40a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800a40e:	4b99      	ldr	r3, [pc, #612]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a410:	2203      	movs	r2, #3
 800a412:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800a414:	4b97      	ldr	r3, [pc, #604]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a416:	2203      	movs	r2, #3
 800a418:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a94      	ldr	r2, [pc, #592]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a422:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	7cda      	ldrb	r2, [r3, #19]
 800a428:	4b92      	ldr	r3, [pc, #584]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a42a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a42e:	e017      	b.n	800a460 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a436:	4b8f      	ldr	r3, [pc, #572]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a438:	2200      	movs	r2, #0
 800a43a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a43c:	4b8d      	ldr	r3, [pc, #564]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a8a      	ldr	r2, [pc, #552]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a44a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	7cda      	ldrb	r2, [r3, #19]
 800a450:	4b88      	ldr	r3, [pc, #544]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	089b      	lsrs	r3, r3, #2
 800a45c:	4a85      	ldr	r2, [pc, #532]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a45e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	b29b      	uxth	r3, r3
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	b29a      	uxth	r2, r3
 800a46a:	4b82      	ldr	r3, [pc, #520]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a46c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a46e:	4b81      	ldr	r3, [pc, #516]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a470:	2204      	movs	r2, #4
 800a472:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	7c9b      	ldrb	r3, [r3, #18]
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	4b7d      	ldr	r3, [pc, #500]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a47e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a480:	4b7c      	ldr	r3, [pc, #496]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a482:	2200      	movs	r2, #0
 800a484:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	7d9b      	ldrb	r3, [r3, #22]
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d003      	beq.n	800a496 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	7d1b      	ldrb	r3, [r3, #20]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d12b      	bne.n	800a4ee <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	7d5b      	ldrb	r3, [r3, #21]
 800a49a:	2bf1      	cmp	r3, #241	@ 0xf1
 800a49c:	d00a      	beq.n	800a4b4 <RadioSetTxGenericConfig+0x128>
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	7d5b      	ldrb	r3, [r3, #21]
 800a4a2:	2bf2      	cmp	r3, #242	@ 0xf2
 800a4a4:	d006      	beq.n	800a4b4 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	7d5b      	ldrb	r3, [r3, #21]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d002      	beq.n	800a4b4 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 800a4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a4b2:	e199      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a4be:	4b6e      	ldr	r3, [pc, #440]	@ (800a678 <RadioSetTxGenericConfig+0x2ec>)
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	f107 0320 	add.w	r3, r7, #32
 800a4c6:	4a6d      	ldr	r2, [pc, #436]	@ (800a67c <RadioSetTxGenericConfig+0x2f0>)
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 fbb5 	bl	800bc38 <RFW_Init>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d002      	beq.n	800a4da <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d8:	e186      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a4da:	4b66      	ldr	r3, [pc, #408]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a4e0:	4b64      	ldr	r3, [pc, #400]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a4e6:	4b63      	ldr	r3, [pc, #396]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	755a      	strb	r2, [r3, #21]
        {
 800a4ec:	e00b      	b.n	800a506 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	7d5a      	ldrb	r2, [r3, #21]
 800a4f2:	4b60      	ldr	r3, [pc, #384]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a4f4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	7d9a      	ldrb	r2, [r3, #22]
 800a4fa:	4b5e      	ldr	r3, [pc, #376]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a4fc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	7d1a      	ldrb	r2, [r3, #20]
 800a502:	4b5c      	ldr	r3, [pc, #368]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a504:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a506:	f7ff f8c4 	bl	8009692 <RadioStandby>
        RadioSetModem( radio_modem );
 800a50a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fa5e 	bl	80089d0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a514:	485a      	ldr	r0, [pc, #360]	@ (800a680 <RadioSetTxGenericConfig+0x2f4>)
 800a516:	f000 fe87 	bl	800b228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a51a:	485a      	ldr	r0, [pc, #360]	@ (800a684 <RadioSetTxGenericConfig+0x2f8>)
 800a51c:	f000 ff52 	bl	800b3c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a520:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fa18 	bl	800a95a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	8a1b      	ldrh	r3, [r3, #16]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fa62 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	899b      	ldrh	r3, [r3, #12]
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fa3d 	bl	800a9b8 <SUBGRF_SetCrcPolynomial>
        break;
 800a53e:	e13f      	b.n	800a7c0 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d102      	bne.n	800a54e <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 800a548:	f04f 33ff 	mov.w	r3, #4294967295
 800a54c:	e14c      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	7c9b      	ldrb	r3, [r3, #18]
 800a552:	2b08      	cmp	r3, #8
 800a554:	d902      	bls.n	800a55c <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295
 800a55a:	e145      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	6899      	ldr	r1, [r3, #8]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	7c9b      	ldrb	r3, [r3, #18]
 800a564:	461a      	mov	r2, r3
 800a566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a56a:	4618      	mov	r0, r3
 800a56c:	f002 f95e 	bl	800c82c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a570:	4b40      	ldr	r3, [pc, #256]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a3d      	ldr	r2, [pc, #244]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a57e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	7cda      	ldrb	r2, [r3, #19]
 800a584:	4b3b      	ldr	r3, [pc, #236]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	4a39      	ldr	r2, [pc, #228]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a590:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a592:	4b38      	ldr	r3, [pc, #224]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a594:	2200      	movs	r2, #0
 800a596:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	4b34      	ldr	r3, [pc, #208]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a5a4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a5a6:	4b33      	ldr	r3, [pc, #204]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a5a8:	2204      	movs	r2, #4
 800a5aa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	7c9b      	ldrb	r3, [r3, #18]
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	4b2f      	ldr	r3, [pc, #188]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a5b6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a5b8:	4b2e      	ldr	r3, [pc, #184]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	7d9b      	ldrb	r3, [r3, #22]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d003      	beq.n	800a5ce <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d12a      	bne.n	800a624 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	7d5b      	ldrb	r3, [r3, #21]
 800a5d2:	2bf1      	cmp	r3, #241	@ 0xf1
 800a5d4:	d00a      	beq.n	800a5ec <RadioSetTxGenericConfig+0x260>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	7d5b      	ldrb	r3, [r3, #21]
 800a5da:	2bf2      	cmp	r3, #242	@ 0xf2
 800a5dc:	d006      	beq.n	800a5ec <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	7d5b      	ldrb	r3, [r3, #21]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d002      	beq.n	800a5ec <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 800a5e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ea:	e0fd      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a5f4:	4b20      	ldr	r3, [pc, #128]	@ (800a678 <RadioSetTxGenericConfig+0x2ec>)
 800a5f6:	6819      	ldr	r1, [r3, #0]
 800a5f8:	f107 0314 	add.w	r3, r7, #20
 800a5fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a67c <RadioSetTxGenericConfig+0x2f0>)
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 fb1a 	bl	800bc38 <RFW_Init>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 800a60a:	f04f 33ff 	mov.w	r3, #4294967295
 800a60e:	e0eb      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a610:	4b18      	ldr	r3, [pc, #96]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a612:	2200      	movs	r2, #0
 800a614:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a616:	4b17      	ldr	r3, [pc, #92]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a618:	2201      	movs	r2, #1
 800a61a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a61c:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a61e:	2200      	movs	r2, #0
 800a620:	755a      	strb	r2, [r3, #21]
        {
 800a622:	e00b      	b.n	800a63c <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	7d5a      	ldrb	r2, [r3, #21]
 800a628:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a62a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	7d9a      	ldrb	r2, [r3, #22]
 800a630:	4b10      	ldr	r3, [pc, #64]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a632:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	7d1a      	ldrb	r2, [r3, #20]
 800a638:	4b0e      	ldr	r3, [pc, #56]	@ (800a674 <RadioSetTxGenericConfig+0x2e8>)
 800a63a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a63c:	f7ff f829 	bl	8009692 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a640:	2000      	movs	r0, #0
 800a642:	f7fe f9c5 	bl	80089d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a646:	480e      	ldr	r0, [pc, #56]	@ (800a680 <RadioSetTxGenericConfig+0x2f4>)
 800a648:	f000 fdee 	bl	800b228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a64c:	480d      	ldr	r0, [pc, #52]	@ (800a684 <RadioSetTxGenericConfig+0x2f8>)
 800a64e:	f000 feb9 	bl	800b3c4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a652:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f97f 	bl	800a95a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	8a1b      	ldrh	r3, [r3, #16]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 f9c9 	bl	800a9f8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	899b      	ldrh	r3, [r3, #12]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f9a4 	bl	800a9b8 <SUBGRF_SetCrcPolynomial>
        break;
 800a670:	e0a6      	b.n	800a7c0 <RadioSetTxGenericConfig+0x434>
 800a672:	bf00      	nop
 800a674:	20000494 	.word	0x20000494
 800a678:	20000490 	.word	0x20000490
 800a67c:	200004f0 	.word	0x200004f0
 800a680:	200004cc 	.word	0x200004cc
 800a684:	200004a2 	.word	0x200004a2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a688:	4b59      	ldr	r3, [pc, #356]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	781a      	ldrb	r2, [r3, #0]
 800a694:	4b56      	ldr	r3, [pc, #344]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	785a      	ldrb	r2, [r3, #1]
 800a69e:	4b54      	ldr	r3, [pc, #336]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	789a      	ldrb	r2, [r3, #2]
 800a6a8:	4b51      	ldr	r3, [pc, #324]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6aa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	78db      	ldrb	r3, [r3, #3]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d010      	beq.n	800a6d8 <RadioSetTxGenericConfig+0x34c>
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	dc20      	bgt.n	800a6fc <RadioSetTxGenericConfig+0x370>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <RadioSetTxGenericConfig+0x338>
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d005      	beq.n	800a6ce <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800a6c2:	e01b      	b.n	800a6fc <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a6c4:	4b4a      	ldr	r3, [pc, #296]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a6cc:	e017      	b.n	800a6fe <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a6ce:	4b48      	ldr	r3, [pc, #288]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a6d6:	e012      	b.n	800a6fe <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b0b      	cmp	r3, #11
 800a6de:	d003      	beq.n	800a6e8 <RadioSetTxGenericConfig+0x35c>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b0c      	cmp	r3, #12
 800a6e6:	d104      	bne.n	800a6f2 <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a6e8:	4b41      	ldr	r3, [pc, #260]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a6f0:	e005      	b.n	800a6fe <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a6f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a6fa:	e000      	b.n	800a6fe <RadioSetTxGenericConfig+0x372>
            break;
 800a6fc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a6fe:	4b3c      	ldr	r3, [pc, #240]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a700:	2201      	movs	r2, #1
 800a702:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	889a      	ldrh	r2, [r3, #4]
 800a708:	4b39      	ldr	r3, [pc, #228]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a70a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	799a      	ldrb	r2, [r3, #6]
 800a710:	4b37      	ldr	r3, [pc, #220]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a712:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	79da      	ldrb	r2, [r3, #7]
 800a718:	4b35      	ldr	r3, [pc, #212]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a71a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	7a1a      	ldrb	r2, [r3, #8]
 800a722:	4b33      	ldr	r3, [pc, #204]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800a728:	f7fe ffb3 	bl	8009692 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a72c:	2001      	movs	r0, #1
 800a72e:	f7fe f94f 	bl	80089d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a732:	4830      	ldr	r0, [pc, #192]	@ (800a7f4 <RadioSetTxGenericConfig+0x468>)
 800a734:	f000 fd78 	bl	800b228 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a738:	482f      	ldr	r0, [pc, #188]	@ (800a7f8 <RadioSetTxGenericConfig+0x46c>)
 800a73a:	f000 fe43 	bl	800b3c4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a73e:	4b2c      	ldr	r3, [pc, #176]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a740:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a744:	2b06      	cmp	r3, #6
 800a746:	d10d      	bne.n	800a764 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a748:	f640 0089 	movw	r0, #2185	@ 0x889
 800a74c:	f000 ffa2 	bl	800b694 <SUBGRF_ReadRegister>
 800a750:	4603      	mov	r3, r0
 800a752:	f023 0304 	bic.w	r3, r3, #4
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	f640 0089 	movw	r0, #2185	@ 0x889
 800a75e:	f000 ff77 	bl	800b650 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a762:	e02d      	b.n	800a7c0 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a764:	f640 0089 	movw	r0, #2185	@ 0x889
 800a768:	f000 ff94 	bl	800b694 <SUBGRF_ReadRegister>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f043 0304 	orr.w	r3, r3, #4
 800a772:	b2db      	uxtb	r3, r3
 800a774:	4619      	mov	r1, r3
 800a776:	f640 0089 	movw	r0, #2185	@ 0x889
 800a77a:	f000 ff69 	bl	800b650 <SUBGRF_WriteRegister>
        break;
 800a77e:	e01f      	b.n	800a7c0 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d004      	beq.n	800a792 <RadioSetTxGenericConfig+0x406>
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a790:	d902      	bls.n	800a798 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	e027      	b.n	800a7e8 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 800a798:	2003      	movs	r0, #3
 800a79a:	f7fe f919 	bl	80089d0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a79e:	4b14      	ldr	r3, [pc, #80]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a11      	ldr	r2, [pc, #68]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7ac:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a7ae:	4b10      	ldr	r3, [pc, #64]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7b0:	2216      	movs	r2, #22
 800a7b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a7b6:	480f      	ldr	r0, [pc, #60]	@ (800a7f4 <RadioSetTxGenericConfig+0x468>)
 800a7b8:	f000 fd36 	bl	800b228 <SUBGRF_SetModulationParams>
        break;
 800a7bc:	e000      	b.n	800a7c0 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 800a7be:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a7c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 f879 	bl	800b8bc <SUBGRF_SetRfTxPower>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b08      	ldr	r3, [pc, #32]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7d0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a7d4:	4b06      	ldr	r3, [pc, #24]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7d6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fa4d 	bl	800bc7a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a7e0:	4a03      	ldr	r2, [pc, #12]	@ (800a7f0 <RadioSetTxGenericConfig+0x464>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
    return 0;
 800a7e6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3738      	adds	r7, #56	@ 0x38
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000494 	.word	0x20000494
 800a7f4:	200004cc 	.word	0x200004cc
 800a7f8:	200004a2 	.word	0x200004a2

0800a7fc <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	bc80      	pop	{r7}
 800a812:	4770      	bx	lr

0800a814 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a81e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
	...

0800a82c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a83a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8b0 <SUBGRF_Init+0x84>)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a840:	f7f7 f9aa 	bl	8001b98 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a844:	2002      	movs	r0, #2
 800a846:	f001 f915 	bl	800ba74 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a84a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b4 <SUBGRF_Init+0x88>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a850:	2000      	movs	r0, #0
 800a852:	f000 f97f 	bl	800ab54 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a856:	f001 ffbe 	bl	800c7d6 <RBI_IsTCXO>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d10e      	bne.n	800a87e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a860:	2140      	movs	r1, #64	@ 0x40
 800a862:	2001      	movs	r0, #1
 800a864:	f000 fb84 	bl	800af70 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a868:	2100      	movs	r1, #0
 800a86a:	f640 1011 	movw	r0, #2321	@ 0x911
 800a86e:	f000 feef 	bl	800b650 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a872:	237f      	movs	r3, #127	@ 0x7f
 800a874:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a876:	7b38      	ldrb	r0, [r7, #12]
 800a878:	f000 fa87 	bl	800ad8a <SUBGRF_Calibrate>
 800a87c:	e009      	b.n	800a892 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a87e:	2120      	movs	r1, #32
 800a880:	f640 1011 	movw	r0, #2321	@ 0x911
 800a884:	f000 fee4 	bl	800b650 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a888:	2120      	movs	r1, #32
 800a88a:	f640 1012 	movw	r0, #2322	@ 0x912
 800a88e:	f000 fedf 	bl	800b650 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a892:	210e      	movs	r1, #14
 800a894:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a898:	f000 feda 	bl	800b650 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a89c:	f001 ff68 	bl	800c770 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <SUBGRF_Init+0x8c>)
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	701a      	strb	r2, [r3, #0]
}
 800a8a6:	bf00      	nop
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	2000052c 	.word	0x2000052c
 800a8b4:	20000528 	.word	0x20000528
 800a8b8:	20000520 	.word	0x20000520

0800a8bc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a8c0:	4b02      	ldr	r3, [pc, #8]	@ (800a8cc <SUBGRF_GetOperatingMode+0x10>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bc80      	pop	{r7}
 800a8ca:	4770      	bx	lr
 800a8cc:	20000520 	.word	0x20000520

0800a8d0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f000 ff3a 	bl	800b75c <SUBGRF_WriteBuffer>
}
 800a8e8:	bf00      	nop
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a902:	f107 0317 	add.w	r3, r7, #23
 800a906:	4619      	mov	r1, r3
 800a908:	68b8      	ldr	r0, [r7, #8]
 800a90a:	f000 fe23 	bl	800b554 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	79fa      	ldrb	r2, [r7, #7]
 800a914:	429a      	cmp	r2, r3
 800a916:	d201      	bcs.n	800a91c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a918:	2301      	movs	r3, #1
 800a91a:	e007      	b.n	800a92c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a91c:	7df8      	ldrb	r0, [r7, #23]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	68f9      	ldr	r1, [r7, #12]
 800a926:	f000 ff3b 	bl	800b7a0 <SUBGRF_ReadBuffer>

    return 0;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	460b      	mov	r3, r1
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	4619      	mov	r1, r3
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff ffc2 	bl	800a8d0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f91d 	bl	800ab8c <SUBGRF_SetTx>
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a962:	2208      	movs	r2, #8
 800a964:	6879      	ldr	r1, [r7, #4]
 800a966:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800a96a:	f000 feb3 	bl	800b6d4 <SUBGRF_WriteRegisters>
    return 0;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a982:	88fb      	ldrh	r3, [r7, #6]
 800a984:	0a1b      	lsrs	r3, r3, #8
 800a986:	b29b      	uxth	r3, r3
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a98c:	88fb      	ldrh	r3, [r7, #6]
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a992:	f000 fb71 	bl	800b078 <SUBGRF_GetPacketType>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a99c:	f107 030c 	add.w	r3, r7, #12
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a9a8:	f000 fe94 	bl	800b6d4 <SUBGRF_WriteRegisters>
            break;
 800a9ac:	e000      	b.n	800a9b0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a9ae:	bf00      	nop
    }
}
 800a9b0:	bf00      	nop
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	0a1b      	lsrs	r3, r3, #8
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a9d2:	f000 fb51 	bl	800b078 <SUBGRF_GetPacketType>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d108      	bne.n	800a9ee <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a9e8:	f000 fe74 	bl	800b6d4 <SUBGRF_WriteRegisters>
            break;
 800a9ec:	e000      	b.n	800a9f0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a9ee:	bf00      	nop
    }
}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800aa06:	f000 fb37 	bl	800b078 <SUBGRF_GetPacketType>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d121      	bne.n	800aa54 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800aa10:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800aa14:	f000 fe3e 	bl	800b694 <SUBGRF_ReadRegister>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	b25b      	sxtb	r3, r3
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	b25a      	sxtb	r2, r3
 800aa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	b25b      	sxtb	r3, r3
 800aa36:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800aa40:	f000 fe06 	bl	800b650 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800aa4e:	f000 fdff 	bl	800b650 <SUBGRF_WriteRegister>
            break;
 800aa52:	e000      	b.n	800aa56 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800aa54:	bf00      	nop
    }
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800aa70:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800aa74:	f000 fe0e 	bl	800b694 <SUBGRF_ReadRegister>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800aa7c:	79fb      	ldrb	r3, [r7, #7]
 800aa7e:	f023 0301 	bic.w	r3, r3, #1
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800aa8a:	f000 fde1 	bl	800b650 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800aa8e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800aa92:	f000 fdff 	bl	800b694 <SUBGRF_ReadRegister>
 800aa96:	4603      	mov	r3, r0
 800aa98:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800aa9a:	79bb      	ldrb	r3, [r7, #6]
 800aa9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800aaa8:	f000 fdd2 	bl	800b650 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800aaac:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800aab0:	f000 f88c 	bl	800abcc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800aab4:	463b      	mov	r3, r7
 800aab6:	2204      	movs	r2, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	f640 0019 	movw	r0, #2073	@ 0x819
 800aabe:	f000 fe2b 	bl	800b718 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800aac2:	2000      	movs	r0, #0
 800aac4:	f000 f846 	bl	800ab54 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800aac8:	79fb      	ldrb	r3, [r7, #7]
 800aaca:	4619      	mov	r1, r3
 800aacc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800aad0:	f000 fdbe 	bl	800b650 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800aad4:	79bb      	ldrb	r3, [r7, #6]
 800aad6:	4619      	mov	r1, r3
 800aad8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800aadc:	f000 fdb8 	bl	800b650 <SUBGRF_WriteRegister>

    return number;
 800aae0:	683b      	ldr	r3, [r7, #0]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f001 fe46 	bl	800c786 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800aafa:	2002      	movs	r0, #2
 800aafc:	f000 ffba 	bl	800ba74 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ab00:	793b      	ldrb	r3, [r7, #4]
 800ab02:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ab0e:	793b      	ldrb	r3, [r7, #4]
 800ab10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ab14:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ab16:	b25b      	sxtb	r3, r3
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	b25b      	sxtb	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800ab20:	793b      	ldrb	r3, [r7, #4]
 800ab22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	b25b      	sxtb	r3, r3
 800ab2e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ab30:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800ab32:	f107 030f 	add.w	r3, r7, #15
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	2084      	movs	r0, #132	@ 0x84
 800ab3c:	f000 fe52 	bl	800b7e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800ab40:	4b03      	ldr	r3, [pc, #12]	@ (800ab50 <SUBGRF_SetSleep+0x64>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000520 	.word	0x20000520

0800ab54 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800ab5e:	1dfb      	adds	r3, r7, #7
 800ab60:	2201      	movs	r2, #1
 800ab62:	4619      	mov	r1, r3
 800ab64:	2080      	movs	r0, #128	@ 0x80
 800ab66:	f000 fe3d 	bl	800b7e4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d103      	bne.n	800ab78 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800ab70:	4b05      	ldr	r3, [pc, #20]	@ (800ab88 <SUBGRF_SetStandby+0x34>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800ab76:	e002      	b.n	800ab7e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800ab78:	4b03      	ldr	r3, [pc, #12]	@ (800ab88 <SUBGRF_SetStandby+0x34>)
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	701a      	strb	r2, [r3, #0]
}
 800ab7e:	bf00      	nop
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000520 	.word	0x20000520

0800ab8c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800ab94:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <SUBGRF_SetTx+0x3c>)
 800ab96:	2204      	movs	r2, #4
 800ab98:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	0c1b      	lsrs	r3, r3, #16
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	0a1b      	lsrs	r3, r3, #8
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	2203      	movs	r2, #3
 800abb6:	4619      	mov	r1, r3
 800abb8:	2083      	movs	r0, #131	@ 0x83
 800abba:	f000 fe13 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800abbe:	bf00      	nop
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000520 	.word	0x20000520

0800abcc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <SUBGRF_SetRx+0x3c>)
 800abd6:	2205      	movs	r2, #5
 800abd8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	0c1b      	lsrs	r3, r3, #16
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	0a1b      	lsrs	r3, r3, #8
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	b2db      	uxtb	r3, r3
 800abee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800abf0:	f107 030c 	add.w	r3, r7, #12
 800abf4:	2203      	movs	r2, #3
 800abf6:	4619      	mov	r1, r3
 800abf8:	2082      	movs	r0, #130	@ 0x82
 800abfa:	f000 fdf3 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000520 	.word	0x20000520

0800ac0c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ac14:	4b0e      	ldr	r3, [pc, #56]	@ (800ac50 <SUBGRF_SetRxBoosted+0x44>)
 800ac16:	2205      	movs	r2, #5
 800ac18:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800ac1a:	2197      	movs	r1, #151	@ 0x97
 800ac1c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800ac20:	f000 fd16 	bl	800b650 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	0c1b      	lsrs	r3, r3, #16
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ac3a:	f107 030c 	add.w	r3, r7, #12
 800ac3e:	2203      	movs	r2, #3
 800ac40:	4619      	mov	r1, r3
 800ac42:	2082      	movs	r0, #130	@ 0x82
 800ac44:	f000 fdce 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000520 	.word	0x20000520

0800ac54 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	0a1b      	lsrs	r3, r3, #8
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	0c1b      	lsrs	r3, r3, #16
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	2206      	movs	r2, #6
 800ac90:	4619      	mov	r1, r3
 800ac92:	2094      	movs	r0, #148	@ 0x94
 800ac94:	f000 fda6 	bl	800b7e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800ac98:	4b03      	ldr	r3, [pc, #12]	@ (800aca8 <SUBGRF_SetRxDutyCycle+0x54>)
 800ac9a:	2206      	movs	r2, #6
 800ac9c:	701a      	strb	r2, [r3, #0]
}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20000520 	.word	0x20000520

0800acac <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800acb0:	2200      	movs	r2, #0
 800acb2:	2100      	movs	r1, #0
 800acb4:	20c5      	movs	r0, #197	@ 0xc5
 800acb6:	f000 fd95 	bl	800b7e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800acba:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <SUBGRF_SetCad+0x18>)
 800acbc:	2207      	movs	r2, #7
 800acbe:	701a      	strb	r2, [r3, #0]
}
 800acc0:	bf00      	nop
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000520 	.word	0x20000520

0800acc8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800accc:	2200      	movs	r2, #0
 800acce:	2100      	movs	r1, #0
 800acd0:	20d1      	movs	r0, #209	@ 0xd1
 800acd2:	f000 fd87 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800acd6:	bf00      	nop
 800acd8:	bd80      	pop	{r7, pc}

0800acda <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800acde:	2200      	movs	r2, #0
 800ace0:	2100      	movs	r1, #0
 800ace2:	20d2      	movs	r0, #210	@ 0xd2
 800ace4:	f000 fd7e 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ace8:	bf00      	nop
 800acea:	bd80      	pop	{r7, pc}

0800acec <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800acf6:	1dfb      	adds	r3, r7, #7
 800acf8:	2201      	movs	r2, #1
 800acfa:	4619      	mov	r1, r3
 800acfc:	209f      	movs	r0, #159	@ 0x9f
 800acfe:	f000 fd71 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	4603      	mov	r3, r0
 800ad12:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800ad14:	1dfb      	adds	r3, r7, #7
 800ad16:	2201      	movs	r2, #1
 800ad18:	4619      	mov	r1, r3
 800ad1a:	20a0      	movs	r0, #160	@ 0xa0
 800ad1c:	f000 fd62 	bl	800b7e4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b3f      	cmp	r3, #63	@ 0x3f
 800ad24:	d91c      	bls.n	800ad60 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800ad26:	79fb      	ldrb	r3, [r7, #7]
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800ad34:	e005      	b.n	800ad42 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	089b      	lsrs	r3, r3, #2
 800ad3a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	2b1f      	cmp	r3, #31
 800ad46:	d8f6      	bhi.n	800ad36 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	4413      	add	r3, r2
 800ad52:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800ad54:	7b7b      	ldrb	r3, [r7, #13]
 800ad56:	4619      	mov	r1, r3
 800ad58:	f240 7006 	movw	r0, #1798	@ 0x706
 800ad5c:	f000 fc78 	bl	800b650 <SUBGRF_WriteRegister>
    }
}
 800ad60:	bf00      	nop
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800ad6e:	f001 fd3d 	bl	800c7ec <RBI_IsDCDC>
    {
        mode = USE_DCDC ;
    }
    else
    {
        mode = USE_LDO ;
 800ad72:	2300      	movs	r3, #0
 800ad74:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ad76:	1dfb      	adds	r3, r7, #7
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	2096      	movs	r0, #150	@ 0x96
 800ad7e:	f000 fd31 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ad92:	793b      	ldrb	r3, [r7, #4]
 800ad94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	b25b      	sxtb	r3, r3
 800ad9c:	019b      	lsls	r3, r3, #6
 800ad9e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ada0:	793b      	ldrb	r3, [r7, #4]
 800ada2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ada6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ada8:	b25b      	sxtb	r3, r3
 800adaa:	015b      	lsls	r3, r3, #5
 800adac:	b25b      	sxtb	r3, r3
 800adae:	4313      	orrs	r3, r2
 800adb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800adb2:	793b      	ldrb	r3, [r7, #4]
 800adb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800adb8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800adc4:	793b      	ldrb	r3, [r7, #4]
 800adc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800adca:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800adcc:	b25b      	sxtb	r3, r3
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	b25b      	sxtb	r3, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800add6:	793b      	ldrb	r3, [r7, #4]
 800add8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800addc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	b25b      	sxtb	r3, r3
 800ade4:	4313      	orrs	r3, r2
 800ade6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ade8:	793b      	ldrb	r3, [r7, #4]
 800adea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800adee:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	4313      	orrs	r3, r2
 800adf8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800adfa:	793b      	ldrb	r3, [r7, #4]
 800adfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b25b      	sxtb	r3, r3
 800ae08:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ae0a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ae0c:	f107 030f 	add.w	r3, r7, #15
 800ae10:	2201      	movs	r2, #1
 800ae12:	4619      	mov	r1, r3
 800ae14:	2089      	movs	r0, #137	@ 0x89
 800ae16:	f000 fce5 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a1d      	ldr	r2, [pc, #116]	@ (800aea4 <SUBGRF_CalibrateImage+0x80>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d904      	bls.n	800ae3e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800ae34:	23e1      	movs	r3, #225	@ 0xe1
 800ae36:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800ae38:	23e9      	movs	r3, #233	@ 0xe9
 800ae3a:	737b      	strb	r3, [r7, #13]
 800ae3c:	e027      	b.n	800ae8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a19      	ldr	r2, [pc, #100]	@ (800aea8 <SUBGRF_CalibrateImage+0x84>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d904      	bls.n	800ae50 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800ae46:	23d7      	movs	r3, #215	@ 0xd7
 800ae48:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800ae4a:	23db      	movs	r3, #219	@ 0xdb
 800ae4c:	737b      	strb	r3, [r7, #13]
 800ae4e:	e01e      	b.n	800ae8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a16      	ldr	r2, [pc, #88]	@ (800aeac <SUBGRF_CalibrateImage+0x88>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d904      	bls.n	800ae62 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800ae58:	23c1      	movs	r3, #193	@ 0xc1
 800ae5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800ae5c:	23c5      	movs	r3, #197	@ 0xc5
 800ae5e:	737b      	strb	r3, [r7, #13]
 800ae60:	e015      	b.n	800ae8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a12      	ldr	r2, [pc, #72]	@ (800aeb0 <SUBGRF_CalibrateImage+0x8c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d904      	bls.n	800ae74 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800ae6a:	2375      	movs	r3, #117	@ 0x75
 800ae6c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800ae6e:	2381      	movs	r3, #129	@ 0x81
 800ae70:	737b      	strb	r3, [r7, #13]
 800ae72:	e00c      	b.n	800ae8e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a0f      	ldr	r2, [pc, #60]	@ (800aeb4 <SUBGRF_CalibrateImage+0x90>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d904      	bls.n	800ae86 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800ae7c:	236b      	movs	r3, #107	@ 0x6b
 800ae7e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800ae80:	236f      	movs	r3, #111	@ 0x6f
 800ae82:	737b      	strb	r3, [r7, #13]
 800ae84:	e003      	b.n	800ae8e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800ae86:	2329      	movs	r3, #41	@ 0x29
 800ae88:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800ae8a:	232b      	movs	r3, #43	@ 0x2b
 800ae8c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800ae8e:	f107 030c 	add.w	r3, r7, #12
 800ae92:	2202      	movs	r2, #2
 800ae94:	4619      	mov	r1, r3
 800ae96:	2098      	movs	r0, #152	@ 0x98
 800ae98:	f000 fca4 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	35a4e900 	.word	0x35a4e900
 800aea8:	32a9f880 	.word	0x32a9f880
 800aeac:	2de54480 	.word	0x2de54480
 800aeb0:	1b6b0b00 	.word	0x1b6b0b00
 800aeb4:	1954fc40 	.word	0x1954fc40

0800aeb8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800aeb8:	b590      	push	{r4, r7, lr}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4623      	mov	r3, r4
 800aec8:	71fb      	strb	r3, [r7, #7]
 800aeca:	4603      	mov	r3, r0
 800aecc:	71bb      	strb	r3, [r7, #6]
 800aece:	460b      	mov	r3, r1
 800aed0:	717b      	strb	r3, [r7, #5]
 800aed2:	4613      	mov	r3, r2
 800aed4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800aeda:	79bb      	ldrb	r3, [r7, #6]
 800aedc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800aede:	797b      	ldrb	r3, [r7, #5]
 800aee0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800aee2:	793b      	ldrb	r3, [r7, #4]
 800aee4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800aee6:	f107 030c 	add.w	r3, r7, #12
 800aeea:	2204      	movs	r2, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	2095      	movs	r0, #149	@ 0x95
 800aef0:	f000 fc78 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800aef4:	bf00      	nop
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd90      	pop	{r4, r7, pc}

0800aefc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	4623      	mov	r3, r4
 800af0c:	80fb      	strh	r3, [r7, #6]
 800af0e:	4603      	mov	r3, r0
 800af10:	80bb      	strh	r3, [r7, #4]
 800af12:	460b      	mov	r3, r1
 800af14:	807b      	strh	r3, [r7, #2]
 800af16:	4613      	mov	r3, r2
 800af18:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	0a1b      	lsrs	r3, r3, #8
 800af1e:	b29b      	uxth	r3, r3
 800af20:	b2db      	uxtb	r3, r3
 800af22:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800af24:	88fb      	ldrh	r3, [r7, #6]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800af2a:	88bb      	ldrh	r3, [r7, #4]
 800af2c:	0a1b      	lsrs	r3, r3, #8
 800af2e:	b29b      	uxth	r3, r3
 800af30:	b2db      	uxtb	r3, r3
 800af32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800af34:	88bb      	ldrh	r3, [r7, #4]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	0a1b      	lsrs	r3, r3, #8
 800af3e:	b29b      	uxth	r3, r3
 800af40:	b2db      	uxtb	r3, r3
 800af42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800af44:	887b      	ldrh	r3, [r7, #2]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800af4a:	883b      	ldrh	r3, [r7, #0]
 800af4c:	0a1b      	lsrs	r3, r3, #8
 800af4e:	b29b      	uxth	r3, r3
 800af50:	b2db      	uxtb	r3, r3
 800af52:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800af54:	883b      	ldrh	r3, [r7, #0]
 800af56:	b2db      	uxtb	r3, r3
 800af58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	2208      	movs	r2, #8
 800af60:	4619      	mov	r1, r3
 800af62:	2008      	movs	r0, #8
 800af64:	f000 fc3e 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800af68:	bf00      	nop
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}

0800af70 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	6039      	str	r1, [r7, #0]
 800af7a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	b2db      	uxtb	r3, r3
 800af84:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	0c1b      	lsrs	r3, r3, #16
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	0a1b      	lsrs	r3, r3, #8
 800af92:	b2db      	uxtb	r3, r3
 800af94:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800af9c:	f107 030c 	add.w	r3, r7, #12
 800afa0:	2204      	movs	r2, #4
 800afa2:	4619      	mov	r1, r3
 800afa4:	2097      	movs	r0, #151	@ 0x97
 800afa6:	f000 fc1d 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800afb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800afc2:	4b1d      	ldr	r3, [pc, #116]	@ (800b038 <SUBGRF_SetRfFrequency+0x84>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	f083 0301 	eor.w	r3, r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d005      	beq.n	800afdc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ff27 	bl	800ae24 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800afd6:	4b18      	ldr	r3, [pc, #96]	@ (800b038 <SUBGRF_SetRfFrequency+0x84>)
 800afd8:	2201      	movs	r2, #1
 800afda:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	461c      	mov	r4, r3
 800afe2:	4615      	mov	r5, r2
 800afe4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800afe8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800afec:	4a13      	ldr	r2, [pc, #76]	@ (800b03c <SUBGRF_SetRfFrequency+0x88>)
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 fef5 	bl	8000de4 <__aeabi_uldivmod>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4613      	mov	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	b2db      	uxtb	r3, r3
 800b008:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	0c1b      	lsrs	r3, r3, #16
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	0a1b      	lsrs	r3, r3, #8
 800b016:	b2db      	uxtb	r3, r3
 800b018:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	2204      	movs	r2, #4
 800b026:	4619      	mov	r1, r3
 800b028:	2086      	movs	r0, #134	@ 0x86
 800b02a:	f000 fbdb 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800b02e:	bf00      	nop
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b038:	20000528 	.word	0x20000528
 800b03c:	01e84800 	.word	0x01e84800

0800b040 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800b04a:	79fa      	ldrb	r2, [r7, #7]
 800b04c:	4b09      	ldr	r3, [pc, #36]	@ (800b074 <SUBGRF_SetPacketType+0x34>)
 800b04e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d104      	bne.n	800b060 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800b056:	2100      	movs	r1, #0
 800b058:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b05c:	f000 faf8 	bl	800b650 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800b060:	1dfb      	adds	r3, r7, #7
 800b062:	2201      	movs	r2, #1
 800b064:	4619      	mov	r1, r3
 800b066:	208a      	movs	r0, #138	@ 0x8a
 800b068:	f000 fbbc 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	20000521 	.word	0x20000521

0800b078 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
    return PacketType;
 800b07c:	4b02      	ldr	r3, [pc, #8]	@ (800b088 <SUBGRF_GetPacketType+0x10>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
}
 800b080:	4618      	mov	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr
 800b088:	20000521 	.word	0x20000521

0800b08c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
 800b096:	460b      	mov	r3, r1
 800b098:	71bb      	strb	r3, [r7, #6]
 800b09a:	4613      	mov	r3, r2
 800b09c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d149      	bne.n	800b138 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	f001 fbac 	bl	800c802 <RBI_GetRFOMaxPowerConfig>
 800b0aa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800b0ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	da01      	bge.n	800b0ba <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b0e      	cmp	r3, #14
 800b0be:	d10e      	bne.n	800b0de <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	2004      	movs	r0, #4
 800b0c8:	f7ff fef6 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b0cc:	79ba      	ldrb	r2, [r7, #6]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	330e      	adds	r3, #14
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	71bb      	strb	r3, [r7, #6]
 800b0dc:	e01f      	b.n	800b11e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b0a      	cmp	r3, #10
 800b0e2:	d10e      	bne.n	800b102 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f7ff fee4 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800b0f0:	79ba      	ldrb	r2, [r7, #6]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	330d      	adds	r3, #13
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	71bb      	strb	r3, [r7, #6]
 800b100:	e00d      	b.n	800b11e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800b102:	2301      	movs	r3, #1
 800b104:	2201      	movs	r2, #1
 800b106:	2100      	movs	r1, #0
 800b108:	2007      	movs	r0, #7
 800b10a:	f7ff fed5 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b10e:	79ba      	ldrb	r2, [r7, #6]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	b2db      	uxtb	r3, r3
 800b118:	330e      	adds	r3, #14
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800b11e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b122:	f113 0f11 	cmn.w	r3, #17
 800b126:	da01      	bge.n	800b12c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800b128:	23ef      	movs	r3, #239	@ 0xef
 800b12a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800b12c:	2118      	movs	r1, #24
 800b12e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b132:	f000 fa8d 	bl	800b650 <SUBGRF_WriteRegister>
 800b136:	e067      	b.n	800b208 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800b138:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b13c:	f000 faaa 	bl	800b694 <SUBGRF_ReadRegister>
 800b140:	4603      	mov	r3, r0
 800b142:	f043 031e 	orr.w	r3, r3, #30
 800b146:	b2db      	uxtb	r3, r3
 800b148:	4619      	mov	r1, r3
 800b14a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800b14e:	f000 fa7f 	bl	800b650 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800b152:	2001      	movs	r0, #1
 800b154:	f001 fb55 	bl	800c802 <RBI_GetRFOMaxPowerConfig>
 800b158:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800b15a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	429a      	cmp	r2, r3
 800b162:	da01      	bge.n	800b168 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b14      	cmp	r3, #20
 800b16c:	d10e      	bne.n	800b18c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800b16e:	2301      	movs	r3, #1
 800b170:	2200      	movs	r2, #0
 800b172:	2105      	movs	r1, #5
 800b174:	2003      	movs	r0, #3
 800b176:	f7ff fe9f 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b17a:	79ba      	ldrb	r2, [r7, #6]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	b2db      	uxtb	r3, r3
 800b184:	3316      	adds	r3, #22
 800b186:	b2db      	uxtb	r3, r3
 800b188:	71bb      	strb	r3, [r7, #6]
 800b18a:	e031      	b.n	800b1f0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b11      	cmp	r3, #17
 800b190:	d10e      	bne.n	800b1b0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800b192:	2301      	movs	r3, #1
 800b194:	2200      	movs	r2, #0
 800b196:	2103      	movs	r1, #3
 800b198:	2002      	movs	r0, #2
 800b19a:	f7ff fe8d 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b19e:	79ba      	ldrb	r2, [r7, #6]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	3316      	adds	r3, #22
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	71bb      	strb	r3, [r7, #6]
 800b1ae:	e01f      	b.n	800b1f0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b0e      	cmp	r3, #14
 800b1b4:	d10e      	bne.n	800b1d4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2102      	movs	r1, #2
 800b1bc:	2002      	movs	r0, #2
 800b1be:	f7ff fe7b 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800b1c2:	79ba      	ldrb	r2, [r7, #6]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	330e      	adds	r3, #14
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	71bb      	strb	r3, [r7, #6]
 800b1d2:	e00d      	b.n	800b1f0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	2107      	movs	r1, #7
 800b1da:	2004      	movs	r0, #4
 800b1dc:	f7ff fe6c 	bl	800aeb8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800b1e0:	79ba      	ldrb	r2, [r7, #6]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	3316      	adds	r3, #22
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800b1f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b1f4:	f113 0f09 	cmn.w	r3, #9
 800b1f8:	da01      	bge.n	800b1fe <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800b1fa:	23f7      	movs	r3, #247	@ 0xf7
 800b1fc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800b1fe:	2138      	movs	r1, #56	@ 0x38
 800b200:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800b204:	f000 fa24 	bl	800b650 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800b208:	79bb      	ldrb	r3, [r7, #6]
 800b20a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800b20c:	797b      	ldrb	r3, [r7, #5]
 800b20e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800b210:	f107 0308 	add.w	r3, r7, #8
 800b214:	2202      	movs	r2, #2
 800b216:	4619      	mov	r1, r3
 800b218:	208e      	movs	r0, #142	@ 0x8e
 800b21a:	f000 fae3 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800b228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b236:	f107 0308 	add.w	r3, r7, #8
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	4b5c      	ldr	r3, [pc, #368]	@ (800b3b8 <SUBGRF_SetModulationParams+0x190>)
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d004      	beq.n	800b256 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f7ff fef5 	bl	800b040 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	f200 80a5 	bhi.w	800b3aa <SUBGRF_SetModulationParams+0x182>
 800b260:	a201      	add	r2, pc, #4	@ (adr r2, 800b268 <SUBGRF_SetModulationParams+0x40>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b279 	.word	0x0800b279
 800b26c:	0800b339 	.word	0x0800b339
 800b270:	0800b2fb 	.word	0x0800b2fb
 800b274:	0800b367 	.word	0x0800b367
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800b278:	2308      	movs	r3, #8
 800b27a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	4a4e      	ldr	r2, [pc, #312]	@ (800b3bc <SUBGRF_SetModulationParams+0x194>)
 800b282:	fbb2 f3f3 	udiv	r3, r2, r3
 800b286:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	0c1b      	lsrs	r3, r3, #16
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	0a1b      	lsrs	r3, r3, #8
 800b294:	b2db      	uxtb	r3, r3
 800b296:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7b1b      	ldrb	r3, [r3, #12]
 800b2a2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	7b5b      	ldrb	r3, [r3, #13]
 800b2a8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	461c      	mov	r4, r3
 800b2b2:	4615      	mov	r5, r2
 800b2b4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800b2b8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800b2bc:	4a40      	ldr	r2, [pc, #256]	@ (800b3c0 <SUBGRF_SetModulationParams+0x198>)
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	f7f5 fd8d 	bl	8000de4 <__aeabi_uldivmod>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	0c1b      	lsrs	r3, r3, #16
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	f107 0308 	add.w	r3, r7, #8
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	208b      	movs	r0, #139	@ 0x8b
 800b2f4:	f000 fa76 	bl	800b7e4 <SUBGRF_WriteCommand>
        break;
 800b2f8:	e058      	b.n	800b3ac <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 800b2fa:	2304      	movs	r3, #4
 800b2fc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	4a2e      	ldr	r2, [pc, #184]	@ (800b3bc <SUBGRF_SetModulationParams+0x194>)
 800b304:	fbb2 f3f3 	udiv	r3, r2, r3
 800b308:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	0c1b      	lsrs	r3, r3, #16
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	b2db      	uxtb	r3, r3
 800b318:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7d1b      	ldrb	r3, [r3, #20]
 800b324:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b326:	7cfb      	ldrb	r3, [r7, #19]
 800b328:	b29a      	uxth	r2, r3
 800b32a:	f107 0308 	add.w	r3, r7, #8
 800b32e:	4619      	mov	r1, r3
 800b330:	208b      	movs	r0, #139	@ 0x8b
 800b332:	f000 fa57 	bl	800b7e4 <SUBGRF_WriteCommand>
        break;
 800b336:	e039      	b.n	800b3ac <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 800b338:	2304      	movs	r3, #4
 800b33a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7e1b      	ldrb	r3, [r3, #24]
 800b340:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7e5b      	ldrb	r3, [r3, #25]
 800b346:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	7e9b      	ldrb	r3, [r3, #26]
 800b34c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7edb      	ldrb	r3, [r3, #27]
 800b352:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b354:	7cfb      	ldrb	r3, [r7, #19]
 800b356:	b29a      	uxth	r2, r3
 800b358:	f107 0308 	add.w	r3, r7, #8
 800b35c:	4619      	mov	r1, r3
 800b35e:	208b      	movs	r0, #139	@ 0x8b
 800b360:	f000 fa40 	bl	800b7e4 <SUBGRF_WriteCommand>

        break;
 800b364:	e022      	b.n	800b3ac <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 800b366:	2305      	movs	r3, #5
 800b368:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4a13      	ldr	r2, [pc, #76]	@ (800b3bc <SUBGRF_SetModulationParams+0x194>)
 800b370:	fbb2 f3f3 	udiv	r3, r2, r3
 800b374:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	0c1b      	lsrs	r3, r3, #16
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	0a1b      	lsrs	r3, r3, #8
 800b382:	b2db      	uxtb	r3, r3
 800b384:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7b1b      	ldrb	r3, [r3, #12]
 800b390:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7b5b      	ldrb	r3, [r3, #13]
 800b396:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800b398:	7cfb      	ldrb	r3, [r7, #19]
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	f107 0308 	add.w	r3, r7, #8
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	208b      	movs	r0, #139	@ 0x8b
 800b3a4:	f000 fa1e 	bl	800b7e4 <SUBGRF_WriteCommand>
        break;
 800b3a8:	e000      	b.n	800b3ac <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 800b3aa:	bf00      	nop
    }
}
 800b3ac:	bf00      	nop
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000521 	.word	0x20000521
 800b3bc:	3d090000 	.word	0x3d090000
 800b3c0:	01e84800 	.word	0x01e84800

0800b3c4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	781a      	ldrb	r2, [r3, #0]
 800b3e0:	4b44      	ldr	r3, [pc, #272]	@ (800b4f4 <SUBGRF_SetPacketParams+0x130>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d004      	beq.n	800b3f2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff fe27 	bl	800b040 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d878      	bhi.n	800b4ec <SUBGRF_SetPacketParams+0x128>
 800b3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b400 <SUBGRF_SetPacketParams+0x3c>)
 800b3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b400:	0800b411 	.word	0x0800b411
 800b404:	0800b4a1 	.word	0x0800b4a1
 800b408:	0800b495 	.word	0x0800b495
 800b40c:	0800b411 	.word	0x0800b411
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7a5b      	ldrb	r3, [r3, #9]
 800b414:	2bf1      	cmp	r3, #241	@ 0xf1
 800b416:	d10a      	bne.n	800b42e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800b418:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b41c:	f7ff faac 	bl	800a978 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800b420:	f248 0005 	movw	r0, #32773	@ 0x8005
 800b424:	f7ff fac8 	bl	800a9b8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800b428:	2302      	movs	r3, #2
 800b42a:	75bb      	strb	r3, [r7, #22]
 800b42c:	e011      	b.n	800b452 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7a5b      	ldrb	r3, [r3, #9]
 800b432:	2bf2      	cmp	r3, #242	@ 0xf2
 800b434:	d10a      	bne.n	800b44c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800b436:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800b43a:	f7ff fa9d 	bl	800a978 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800b43e:	f241 0021 	movw	r0, #4129	@ 0x1021
 800b442:	f7ff fab9 	bl	800a9b8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800b446:	2306      	movs	r3, #6
 800b448:	75bb      	strb	r3, [r7, #22]
 800b44a:	e002      	b.n	800b452 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7a5b      	ldrb	r3, [r3, #9]
 800b450:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800b452:	2309      	movs	r3, #9
 800b454:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	885b      	ldrh	r3, [r3, #2]
 800b45a:	0a1b      	lsrs	r3, r3, #8
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	885b      	ldrh	r3, [r3, #2]
 800b466:	b2db      	uxtb	r3, r3
 800b468:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	791b      	ldrb	r3, [r3, #4]
 800b46e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	795b      	ldrb	r3, [r3, #5]
 800b474:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	799b      	ldrb	r3, [r3, #6]
 800b47a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	79db      	ldrb	r3, [r3, #7]
 800b480:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7a1b      	ldrb	r3, [r3, #8]
 800b486:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b488:	7dbb      	ldrb	r3, [r7, #22]
 800b48a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	7a9b      	ldrb	r3, [r3, #10]
 800b490:	753b      	strb	r3, [r7, #20]
        break;
 800b492:	e022      	b.n	800b4da <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b494:	2301      	movs	r3, #1
 800b496:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7b1b      	ldrb	r3, [r3, #12]
 800b49c:	733b      	strb	r3, [r7, #12]
        break;
 800b49e:	e01c      	b.n	800b4da <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b4a0:	2306      	movs	r3, #6
 800b4a2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	89db      	ldrh	r3, [r3, #14]
 800b4a8:	0a1b      	lsrs	r3, r3, #8
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	89db      	ldrh	r3, [r3, #14]
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7c1a      	ldrb	r2, [r3, #16]
 800b4bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b4f8 <SUBGRF_SetPacketParams+0x134>)
 800b4be:	4611      	mov	r1, r2
 800b4c0:	7019      	strb	r1, [r3, #0]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7c5b      	ldrb	r3, [r3, #17]
 800b4ca:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	7c9b      	ldrb	r3, [r3, #18]
 800b4d0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7cdb      	ldrb	r3, [r3, #19]
 800b4d6:	747b      	strb	r3, [r7, #17]
        break;
 800b4d8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	f107 030c 	add.w	r3, r7, #12
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	208c      	movs	r0, #140	@ 0x8c
 800b4e6:	f000 f97d 	bl	800b7e4 <SUBGRF_WriteCommand>
 800b4ea:	e000      	b.n	800b4ee <SUBGRF_SetPacketParams+0x12a>
        return;
 800b4ec:	bf00      	nop
}
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000521 	.word	0x20000521
 800b4f8:	20000522 	.word	0x20000522

0800b4fc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	460a      	mov	r2, r1
 800b506:	71fb      	strb	r3, [r7, #7]
 800b508:	4613      	mov	r3, r2
 800b50a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b510:	79bb      	ldrb	r3, [r7, #6]
 800b512:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	2202      	movs	r2, #2
 800b51a:	4619      	mov	r1, r3
 800b51c:	208f      	movs	r0, #143	@ 0x8f
 800b51e:	f000 f961 	bl	800b7e4 <SUBGRF_WriteCommand>
}
 800b522:	bf00      	nop
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	2201      	movs	r2, #1
 800b538:	4619      	mov	r1, r3
 800b53a:	2015      	movs	r0, #21
 800b53c:	f000 f974 	bl	800b828 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b540:	793b      	ldrb	r3, [r7, #4]
 800b542:	425b      	negs	r3, r3
 800b544:	105b      	asrs	r3, r3, #1
 800b546:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b548:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b55e:	f107 030c 	add.w	r3, r7, #12
 800b562:	2202      	movs	r2, #2
 800b564:	4619      	mov	r1, r3
 800b566:	2013      	movs	r0, #19
 800b568:	f000 f95e 	bl	800b828 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b56c:	f7ff fd84 	bl	800b078 <SUBGRF_GetPacketType>
 800b570:	4603      	mov	r3, r0
 800b572:	2b01      	cmp	r3, #1
 800b574:	d10d      	bne.n	800b592 <SUBGRF_GetRxBufferStatus+0x3e>
 800b576:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a8 <SUBGRF_GetRxBufferStatus+0x54>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d108      	bne.n	800b592 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b580:	f240 7002 	movw	r0, #1794	@ 0x702
 800b584:	f000 f886 	bl	800b694 <SUBGRF_ReadRegister>
 800b588:	4603      	mov	r3, r0
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	e002      	b.n	800b598 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b592:	7b3a      	ldrb	r2, [r7, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b598:	7b7a      	ldrb	r2, [r7, #13]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	701a      	strb	r2, [r3, #0]
}
 800b59e:	bf00      	nop
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20000522 	.word	0x20000522

0800b5ac <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b5b4:	f107 030c 	add.w	r3, r7, #12
 800b5b8:	2203      	movs	r2, #3
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	2014      	movs	r0, #20
 800b5be:	f000 f933 	bl	800b828 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b5c2:	f7ff fd59 	bl	800b078 <SUBGRF_GetPacketType>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <SUBGRF_GetPacketStatus+0x30>
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d013      	beq.n	800b602 <SUBGRF_GetPacketStatus+0x56>
 800b5da:	e02a      	b.n	800b632 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b5dc:	7b3a      	ldrb	r2, [r7, #12]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b5e2:	7b7b      	ldrb	r3, [r7, #13]
 800b5e4:	425b      	negs	r3, r3
 800b5e6:	105b      	asrs	r3, r3, #1
 800b5e8:	b25a      	sxtb	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	425b      	negs	r3, r3
 800b5f2:	105b      	asrs	r3, r3, #1
 800b5f4:	b25a      	sxtb	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	609a      	str	r2, [r3, #8]
            break;
 800b600:	e020      	b.n	800b644 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b602:	7b3b      	ldrb	r3, [r7, #12]
 800b604:	425b      	negs	r3, r3
 800b606:	105b      	asrs	r3, r3, #1
 800b608:	b25a      	sxtb	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b60e:	7b7b      	ldrb	r3, [r7, #13]
 800b610:	b25b      	sxtb	r3, r3
 800b612:	3302      	adds	r3, #2
 800b614:	109b      	asrs	r3, r3, #2
 800b616:	b25a      	sxtb	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b61c:	7bbb      	ldrb	r3, [r7, #14]
 800b61e:	425b      	negs	r3, r3
 800b620:	105b      	asrs	r3, r3, #1
 800b622:	b25a      	sxtb	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b628:	4b08      	ldr	r3, [pc, #32]	@ (800b64c <SUBGRF_GetPacketStatus+0xa0>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	611a      	str	r2, [r3, #16]
            break;
 800b630:	e008      	b.n	800b644 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b632:	2214      	movs	r2, #20
 800b634:	2100      	movs	r1, #0
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f917 	bl	800c86a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	220f      	movs	r2, #15
 800b640:	701a      	strb	r2, [r3, #0]
            break;
 800b642:	bf00      	nop
    }
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20000524 	.word	0x20000524

0800b650 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	460a      	mov	r2, r1
 800b65a:	80fb      	strh	r3, [r7, #6]
 800b65c:	4613      	mov	r3, r2
 800b65e:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b660:	f3ef 8310 	mrs	r3, PRIMASK
 800b664:	60fb      	str	r3, [r7, #12]
  return(result);
 800b666:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b668:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b66a:	b672      	cpsid	i
}
 800b66c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b66e:	1d7a      	adds	r2, r7, #5
 800b670:	88f9      	ldrh	r1, [r7, #6]
 800b672:	2301      	movs	r3, #1
 800b674:	4806      	ldr	r0, [pc, #24]	@ (800b690 <SUBGRF_WriteRegister+0x40>)
 800b676:	f7fa fbe9 	bl	8005e4c <HAL_SUBGHZ_WriteRegisters>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	f383 8810 	msr	PRIMASK, r3
}
 800b684:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b686:	bf00      	nop
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000210 	.word	0x20000210

0800b694 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b69e:	f3ef 8310 	mrs	r3, PRIMASK
 800b6a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800b6a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6a8:	b672      	cpsid	i
}
 800b6aa:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b6ac:	f107 020b 	add.w	r2, r7, #11
 800b6b0:	88f9      	ldrh	r1, [r7, #6]
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	4806      	ldr	r0, [pc, #24]	@ (800b6d0 <SUBGRF_ReadRegister+0x3c>)
 800b6b6:	f7fa fc28 	bl	8005f0a <HAL_SUBGHZ_ReadRegisters>
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f383 8810 	msr	PRIMASK, r3
}
 800b6c4:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800b6c6:	7afb      	ldrb	r3, [r7, #11]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20000210 	.word	0x20000210

0800b6d4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6039      	str	r1, [r7, #0]
 800b6de:	80fb      	strh	r3, [r7, #6]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6e4:	f3ef 8310 	mrs	r3, PRIMASK
 800b6e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b6ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6ee:	b672      	cpsid	i
}
 800b6f0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b6f2:	88bb      	ldrh	r3, [r7, #4]
 800b6f4:	88f9      	ldrh	r1, [r7, #6]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4806      	ldr	r0, [pc, #24]	@ (800b714 <SUBGRF_WriteRegisters+0x40>)
 800b6fa:	f7fa fba7 	bl	8005e4c <HAL_SUBGHZ_WriteRegisters>
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f383 8810 	msr	PRIMASK, r3
}
 800b708:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b70a:	bf00      	nop
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20000210 	.word	0x20000210

0800b718 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	6039      	str	r1, [r7, #0]
 800b722:	80fb      	strh	r3, [r7, #6]
 800b724:	4613      	mov	r3, r2
 800b726:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b728:	f3ef 8310 	mrs	r3, PRIMASK
 800b72c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b72e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b732:	b672      	cpsid	i
}
 800b734:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b736:	88bb      	ldrh	r3, [r7, #4]
 800b738:	88f9      	ldrh	r1, [r7, #6]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4806      	ldr	r0, [pc, #24]	@ (800b758 <SUBGRF_ReadRegisters+0x40>)
 800b73e:	f7fa fbe4 	bl	8005f0a <HAL_SUBGHZ_ReadRegisters>
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	f383 8810 	msr	PRIMASK, r3
}
 800b74c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b74e:	bf00      	nop
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000210 	.word	0x20000210

0800b75c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]
 800b768:	4613      	mov	r3, r2
 800b76a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b76c:	f3ef 8310 	mrs	r3, PRIMASK
 800b770:	60fb      	str	r3, [r7, #12]
  return(result);
 800b772:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b776:	b672      	cpsid	i
}
 800b778:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b77a:	79bb      	ldrb	r3, [r7, #6]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	79f9      	ldrb	r1, [r7, #7]
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	4806      	ldr	r0, [pc, #24]	@ (800b79c <SUBGRF_WriteBuffer+0x40>)
 800b784:	f7fa fcd5 	bl	8006132 <HAL_SUBGHZ_WriteBuffer>
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f383 8810 	msr	PRIMASK, r3
}
 800b792:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b794:	bf00      	nop
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000210 	.word	0x20000210

0800b7a0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	6039      	str	r1, [r7, #0]
 800b7aa:	71fb      	strb	r3, [r7, #7]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b7b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7ba:	b672      	cpsid	i
}
 800b7bc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b7be:	79bb      	ldrb	r3, [r7, #6]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	79f9      	ldrb	r1, [r7, #7]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	4806      	ldr	r0, [pc, #24]	@ (800b7e0 <SUBGRF_ReadBuffer+0x40>)
 800b7c8:	f7fa fd06 	bl	80061d8 <HAL_SUBGHZ_ReadBuffer>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f383 8810 	msr	PRIMASK, r3
}
 800b7d6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b7d8:	bf00      	nop
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20000210 	.word	0x20000210

0800b7e4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b7fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7fe:	b672      	cpsid	i
}
 800b800:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b802:	88bb      	ldrh	r3, [r7, #4]
 800b804:	79f9      	ldrb	r1, [r7, #7]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	4806      	ldr	r0, [pc, #24]	@ (800b824 <SUBGRF_WriteCommand+0x40>)
 800b80a:	f7fa fbdf 	bl	8005fcc <HAL_SUBGHZ_ExecSetCmd>
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	f383 8810 	msr	PRIMASK, r3
}
 800b818:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b81a:	bf00      	nop
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000210 	.word	0x20000210

0800b828 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	71fb      	strb	r3, [r7, #7]
 800b834:	4613      	mov	r3, r2
 800b836:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b838:	f3ef 8310 	mrs	r3, PRIMASK
 800b83c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b83e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b842:	b672      	cpsid	i
}
 800b844:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b846:	88bb      	ldrh	r3, [r7, #4]
 800b848:	79f9      	ldrb	r1, [r7, #7]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	4806      	ldr	r0, [pc, #24]	@ (800b868 <SUBGRF_ReadCommand+0x40>)
 800b84e:	f7fa fc1c 	bl	800608a <HAL_SUBGHZ_ExecGetCmd>
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f383 8810 	msr	PRIMASK, r3
}
 800b85c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b85e:	bf00      	nop
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000210 	.word	0x20000210

0800b86c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	4603      	mov	r3, r0
 800b874:	460a      	mov	r2, r1
 800b876:	71fb      	strb	r3, [r7, #7]
 800b878:	4613      	mov	r3, r2
 800b87a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b87c:	2301      	movs	r3, #1
 800b87e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b880:	79bb      	ldrb	r3, [r7, #6]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10d      	bne.n	800b8a2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d104      	bne.n	800b896 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b88c:	2302      	movs	r3, #2
 800b88e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b890:	2004      	movs	r0, #4
 800b892:	f000 f8ef 	bl	800ba74 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d107      	bne.n	800b8ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b89c:	2303      	movs	r3, #3
 800b89e:	73fb      	strb	r3, [r7, #15]
 800b8a0:	e004      	b.n	800b8ac <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b8a2:	79bb      	ldrb	r3, [r7, #6]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 ff69 	bl	800c786 <RBI_ConfigRFSwitch>
}
 800b8b4:	bf00      	nop
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b8ca:	f000 ff79 	bl	800c7c0 <RBI_GetTxConfig>
 800b8ce:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d016      	beq.n	800b904 <SUBGRF_SetRfTxPower+0x48>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	dc16      	bgt.n	800b90a <SUBGRF_SetRfTxPower+0x4e>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <SUBGRF_SetRfTxPower+0x2e>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d00a      	beq.n	800b8fe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b8e8:	e00f      	b.n	800b90a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b8ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8ee:	2b0f      	cmp	r3, #15
 800b8f0:	dd02      	ble.n	800b8f8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	73fb      	strb	r3, [r7, #15]
            break;
 800b8f6:	e009      	b.n	800b90c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	73fb      	strb	r3, [r7, #15]
            break;
 800b8fc:	e006      	b.n	800b90c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b8fe:	2301      	movs	r3, #1
 800b900:	73fb      	strb	r3, [r7, #15]
            break;
 800b902:	e003      	b.n	800b90c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b904:	2302      	movs	r3, #2
 800b906:	73fb      	strb	r3, [r7, #15]
            break;
 800b908:	e000      	b.n	800b90c <SUBGRF_SetRfTxPower+0x50>
            break;
 800b90a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b90c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	2202      	movs	r2, #2
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fbb9 	bl	800b08c <SUBGRF_SetTxParams>

    return paSelect;
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b928:	2301      	movs	r3, #1
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bc80      	pop	{r7}
 800b930:	4770      	bx	lr
	...

0800b934 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b93c:	4b03      	ldr	r3, [pc, #12]	@ (800b94c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2001      	movs	r0, #1
 800b942:	4798      	blx	r3
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	2000052c 	.word	0x2000052c

0800b950 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b958:	4b03      	ldr	r3, [pc, #12]	@ (800b968 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2002      	movs	r0, #2
 800b95e:	4798      	blx	r3
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	2000052c 	.word	0x2000052c

0800b96c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b974:	4b03      	ldr	r3, [pc, #12]	@ (800b984 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2040      	movs	r0, #64	@ 0x40
 800b97a:	4798      	blx	r3
}
 800b97c:	bf00      	nop
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	2000052c 	.word	0x2000052c

0800b988 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b994:	78fb      	ldrb	r3, [r7, #3]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d005      	beq.n	800b9aa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b99e:	e00a      	b.n	800b9b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b9a0:	4b07      	ldr	r3, [pc, #28]	@ (800b9c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2080      	movs	r0, #128	@ 0x80
 800b9a6:	4798      	blx	r3
            break;
 800b9a8:	e005      	b.n	800b9b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b9aa:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b9b2:	4798      	blx	r3
            break;
 800b9b4:	bf00      	nop
    }
}
 800b9b6:	bf00      	nop
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	2000052c 	.word	0x2000052c

0800b9c4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b9cc:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b9d4:	4798      	blx	r3
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	2000052c 	.word	0x2000052c

0800b9e4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b9ec:	4b03      	ldr	r3, [pc, #12]	@ (800b9fc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2020      	movs	r0, #32
 800b9f2:	4798      	blx	r3
}
 800b9f4:	bf00      	nop
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2000052c 	.word	0x2000052c

0800ba00 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800ba08:	4b03      	ldr	r3, [pc, #12]	@ (800ba18 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2004      	movs	r0, #4
 800ba0e:	4798      	blx	r3
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	2000052c 	.word	0x2000052c

0800ba1c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800ba24:	4b03      	ldr	r3, [pc, #12]	@ (800ba34 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2008      	movs	r0, #8
 800ba2a:	4798      	blx	r3
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	2000052c 	.word	0x2000052c

0800ba38 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800ba40:	4b03      	ldr	r3, [pc, #12]	@ (800ba50 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2010      	movs	r0, #16
 800ba46:	4798      	blx	r3
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	2000052c 	.word	0x2000052c

0800ba54 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800ba5c:	4b04      	ldr	r3, [pc, #16]	@ (800ba70 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ba64:	4798      	blx	r3
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000052c 	.word	0x2000052c

0800ba74 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800ba7e:	f000 feb5 	bl	800c7ec <RBI_IsDCDC>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d112      	bne.n	800baae <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800ba88:	f640 1023 	movw	r0, #2339	@ 0x923
 800ba8c:	f7ff fe02 	bl	800b694 <SUBGRF_ReadRegister>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	f023 0306 	bic.w	r3, r3, #6
 800ba9a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ba9c:	7bfa      	ldrb	r2, [r7, #15]
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	4619      	mov	r1, r3
 800baa6:	f640 1023 	movw	r0, #2339	@ 0x923
 800baaa:	f7ff fdd1 	bl	800b650 <SUBGRF_WriteRegister>
  }
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800bac6:	231f      	movs	r3, #31
 800bac8:	e017      	b.n	800bafa <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
 800bace:	e00f      	b.n	800baf0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	4a0c      	ldr	r2, [pc, #48]	@ (800bb04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	429a      	cmp	r2, r3
 800badc:	d205      	bcs.n	800baea <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	4a08      	ldr	r2, [pc, #32]	@ (800bb04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800bae2:	00db      	lsls	r3, r3, #3
 800bae4:	4413      	add	r3, r2
 800bae6:	791b      	ldrb	r3, [r3, #4]
 800bae8:	e007      	b.n	800bafa <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	3301      	adds	r3, #1
 800baee:	73fb      	strb	r3, [r7, #15]
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	2b15      	cmp	r3, #21
 800baf4:	d9ec      	bls.n	800bad0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bc80      	pop	{r7}
 800bb02:	4770      	bx	lr
 800bb04:	0800dcb8 	.word	0x0800dcb8

0800bb08 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08a      	sub	sp, #40	@ 0x28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800bb12:	4b35      	ldr	r3, [pc, #212]	@ (800bbe8 <SUBGRF_GetCFO+0xe0>)
 800bb14:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800bb16:	f640 0007 	movw	r0, #2055	@ 0x807
 800bb1a:	f7ff fdbb 	bl	800b694 <SUBGRF_ReadRegister>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800bb22:	7ffb      	ldrb	r3, [r7, #31]
 800bb24:	08db      	lsrs	r3, r3, #3
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	3328      	adds	r3, #40	@ 0x28
 800bb2e:	443b      	add	r3, r7
 800bb30:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800bb34:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800bb36:	7ffb      	ldrb	r3, [r7, #31]
 800bb38:	f003 0307 	and.w	r3, r3, #7
 800bb3c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800bb3e:	7fba      	ldrb	r2, [r7, #30]
 800bb40:	7f7b      	ldrb	r3, [r7, #29]
 800bb42:	3301      	adds	r3, #1
 800bb44:	fa02 f303 	lsl.w	r3, r2, r3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	4b28      	ldr	r3, [pc, #160]	@ (800bbec <SUBGRF_GetCFO+0xe4>)
 800bb4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb50:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb5a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800bb62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	fb02 f303 	mul.w	r3, r2, r3
 800bb6c:	2b07      	cmp	r3, #7
 800bb6e:	d802      	bhi.n	800bb76 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800bb70:	2302      	movs	r3, #2
 800bb72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800bb76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	fb02 f303 	mul.w	r3, r2, r3
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d802      	bhi.n	800bb8a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800bb84:	2304      	movs	r3, #4
 800bb86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800bb8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	fb02 f303 	mul.w	r3, r2, r3
 800bb94:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800bb96:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800bb9a:	f7ff fd7b 	bl	800b694 <SUBGRF_ReadRegister>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bba6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800bba8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800bbac:	f7ff fd72 	bl	800b694 <SUBGRF_ReadRegister>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d005      	beq.n	800bbd0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800bbca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800bbce:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	095b      	lsrs	r3, r3, #5
 800bbd4:	6a3a      	ldr	r2, [r7, #32]
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
 800bbda:	11da      	asrs	r2, r3, #7
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	601a      	str	r2, [r3, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	3728      	adds	r7, #40	@ 0x28
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	0c0a0804 	.word	0x0c0a0804
 800bbec:	01e84800 	.word	0x01e84800

0800bbf0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800bc02:	f04f 33ff 	mov.w	r3, #4294967295
 800bc06:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bc08:	697b      	ldr	r3, [r7, #20]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bc80      	pop	{r7}
 800bc12:	4770      	bx	lr

0800bc14 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800bc26:	f04f 33ff 	mov.w	r3, #4294967295
 800bc2a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800bc2c:	697b      	ldr	r3, [r7, #20]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bc80      	pop	{r7}
 800bc36:	4770      	bx	lr

0800bc38 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800bc44:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bc80      	pop	{r7}
 800bc50:	4770      	bx	lr

0800bc52 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800bc52:	b480      	push	{r7}
 800bc54:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800bc5e:	b480      	push	{r7}
 800bc60:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800bc62:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bc80      	pop	{r7}
 800bc6a:	4770      	bx	lr

0800bc6c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800bc70:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bc80      	pop	{r7}
 800bc78:	4770      	bx	lr

0800bc7a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b083      	sub	sp, #12
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	4603      	mov	r3, r0
 800bc82:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bc80      	pop	{r7}
 800bc8c:	4770      	bx	lr

0800bc8e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b087      	sub	sp, #28
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	60f8      	str	r0, [r7, #12]
 800bc96:	460b      	mov	r3, r1
 800bc98:	607a      	str	r2, [r7, #4]
 800bc9a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800bc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bca0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800bca2:	697b      	ldr	r3, [r7, #20]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	371c      	adds	r7, #28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bc80      	pop	{r7}
 800bcac:	4770      	bx	lr

0800bcae <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800bcae:	b480      	push	{r7}
 800bcb0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc80      	pop	{r7}
 800bcbc:	4770      	bx	lr

0800bcbe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800bcc2:	bf00      	nop
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bc80      	pop	{r7}
 800bcc8:	4770      	bx	lr

0800bcca <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800bcca:	b480      	push	{r7}
 800bccc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800bcce:	bf00      	nop
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bc80      	pop	{r7}
 800bcd4:	4770      	bx	lr

0800bcd6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b083      	sub	sp, #12
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	4603      	mov	r3, r0
 800bcde:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bc80      	pop	{r7}
 800bce8:	4770      	bx	lr

0800bcea <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

	/* USER CODE END MX_SubGHz_Phy_Init_1 */
	SystemApp_Init();
 800bcee:	f7f5 ff78 	bl	8001be2 <SystemApp_Init>
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

	/* USER CODE END MX_SubGHz_Phy_Init_1_1 */
	SubghzApp_Init();
 800bcf2:	f000 f80f 	bl	800bd14 <SubghzApp_Init>
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

	/* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800bcf6:	bf00      	nop
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	af00      	add	r7, sp, #0

	/* USER CODE END MX_SubGHz_Phy_Process_1 */
	/* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

	/* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr

0800bd06 <SubGHz_Phy_Timeout>:

/* USER CODE BEGIN EF */
void SubGHz_Phy_Timeout(void)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	af00      	add	r7, sp, #0
	SubghzApp_Timeout();
 800bd0a:	f000 fa97 	bl	800c23c <SubghzApp_Timeout>
}
 800bd0e:	bf00      	nop
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <SubghzApp_Init>:
void SubghzApp_TxProcess(void);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b08b      	sub	sp, #44	@ 0x2c
 800bd18:	af0a      	add	r7, sp, #40	@ 0x28
	/* USER CODE BEGIN SubghzApp_Init_1 */
	memcpy(buffer, "SAGV-CRRFD0000TTTTTT", 20);
 800bd1a:	2214      	movs	r2, #20
 800bd1c:	4946      	ldr	r1, [pc, #280]	@ (800be38 <SubghzApp_Init+0x124>)
 800bd1e:	4847      	ldr	r0, [pc, #284]	@ (800be3c <SubghzApp_Init+0x128>)
 800bd20:	f001 f852 	bl	800cdc8 <memcpy>
	// Set a safe default threshold to avoid uninitialized use
	seuil = 10;
 800bd24:	4b46      	ldr	r3, [pc, #280]	@ (800be40 <SubghzApp_Init+0x12c>)
 800bd26:	220a      	movs	r2, #10
 800bd28:	701a      	strb	r2, [r3, #0]
	// Initialize Nextion keepalive scheduler
	nextion_keepalive_due = HAL_GetTick() + 1000U;
 800bd2a:	f7f6 ff59 	bl	8002be0 <HAL_GetTick>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800bd34:	4a43      	ldr	r2, [pc, #268]	@ (800be44 <SubghzApp_Init+0x130>)
 800bd36:	6013      	str	r3, [r2, #0]
	/* USER CODE END SubghzApp_Init_1 */

	/* Radio initialization */
	RadioEvents.TxDone = OnTxDone;
 800bd38:	4b43      	ldr	r3, [pc, #268]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd3a:	4a44      	ldr	r2, [pc, #272]	@ (800be4c <SubghzApp_Init+0x138>)
 800bd3c:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800bd3e:	4b42      	ldr	r3, [pc, #264]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd40:	4a43      	ldr	r2, [pc, #268]	@ (800be50 <SubghzApp_Init+0x13c>)
 800bd42:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 800bd44:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd46:	4a43      	ldr	r2, [pc, #268]	@ (800be54 <SubghzApp_Init+0x140>)
 800bd48:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 800bd4a:	4b3f      	ldr	r3, [pc, #252]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd4c:	4a42      	ldr	r2, [pc, #264]	@ (800be58 <SubghzApp_Init+0x144>)
 800bd4e:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 800bd50:	4b3d      	ldr	r3, [pc, #244]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd52:	4a42      	ldr	r2, [pc, #264]	@ (800be5c <SubghzApp_Init+0x148>)
 800bd54:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 800bd56:	4b42      	ldr	r3, [pc, #264]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	483b      	ldr	r0, [pc, #236]	@ (800be48 <SubghzApp_Init+0x134>)
 800bd5c:	4798      	blx	r3

	/* USER CODE BEGIN SubghzApp_Init_2 */
	Radio.SetModem(APP_MODEM);
 800bd5e:	4b40      	ldr	r3, [pc, #256]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	2001      	movs	r0, #1
 800bd64:	4798      	blx	r3
	Radio.SetChannel(APP_FREQUENCY);
 800bd66:	4b3e      	ldr	r3, [pc, #248]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	483e      	ldr	r0, [pc, #248]	@ (800be64 <SubghzApp_Init+0x150>)
 800bd6c:	4798      	blx	r3
	Radio.SetTxConfig(APP_MODEM, APP_OUTPUT_POWER, 0, APP_BANDWIDTH,
 800bd6e:	4b3c      	ldr	r3, [pc, #240]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bd70:	69dc      	ldr	r4, [r3, #28]
 800bd72:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800bd76:	9308      	str	r3, [sp, #32]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9307      	str	r3, [sp, #28]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9306      	str	r3, [sp, #24]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	2301      	movs	r3, #1
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	9303      	str	r3, [sp, #12]
 800bd8c:	230c      	movs	r3, #12
 800bd8e:	9302      	str	r3, [sp, #8]
 800bd90:	2301      	movs	r3, #1
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	230a      	movs	r3, #10
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2116      	movs	r1, #22
 800bd9e:	2001      	movs	r0, #1
 800bda0:	47a0      	blx	r4
			APP_SPREADING_FACTOR, APP_CODING_RATE, APP_PREAMBLE_LENGTH,
			APP_HEADER, APP_CRC, 0, 0, 0, APP_TX_TIMEOUT);
	Radio.SetRxConfig(APP_MODEM, APP_BANDWIDTH, APP_SPREADING_FACTOR,
 800bda2:	4b2f      	ldr	r3, [pc, #188]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bda4:	699c      	ldr	r4, [r3, #24]
 800bda6:	2301      	movs	r3, #1
 800bda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9308      	str	r3, [sp, #32]
 800bdae:	2300      	movs	r3, #0
 800bdb0:	9307      	str	r3, [sp, #28]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9306      	str	r3, [sp, #24]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	9305      	str	r3, [sp, #20]
 800bdba:	2318      	movs	r3, #24
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9303      	str	r3, [sp, #12]
 800bdc2:	f241 7370 	movw	r3, #6000	@ 0x1770
 800bdc6:	9302      	str	r3, [sp, #8]
 800bdc8:	230c      	movs	r3, #12
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	220a      	movs	r2, #10
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	47a0      	blx	r4
			APP_CODING_RATE, 0, APP_PREAMBLE_LENGTH, APP_SYMB_TIMEOUT,
			APP_HEADER, APP_PAYLOAD_LENGTH, APP_CRC, 0, 0, 0, true);
	Radio.SetMaxPayloadLength(APP_MODEM, APP_PAYLOAD_LENGTH);
 800bdda:	4b21      	ldr	r3, [pc, #132]	@ (800be60 <SubghzApp_Init+0x14c>)
 800bddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdde:	2118      	movs	r1, #24
 800bde0:	2001      	movs	r0, #1
 800bde2:	4798      	blx	r3

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800bde4:	2200      	movs	r2, #0
 800bde6:	2100      	movs	r1, #0
 800bde8:	2032      	movs	r0, #50	@ 0x32
 800bdea:	f7f7 ffd0 	bl	8003d8e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800bdee:	2032      	movs	r0, #50	@ 0x32
 800bdf0:	f7f7 ffe7 	bl	8003dc2 <HAL_NVIC_EnableIRQ>

	sender_id = HAL_GPIO_ReadPin(MASTER_GPIO_Port, MASTER_Pin);
 800bdf4:	2110      	movs	r1, #16
 800bdf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bdfa:	f7f8 fa19 	bl	8004230 <HAL_GPIO_ReadPin>
 800bdfe:	4603      	mov	r3, r0
 800be00:	461a      	mov	r2, r3
 800be02:	4b19      	ldr	r3, [pc, #100]	@ (800be68 <SubghzApp_Init+0x154>)
 800be04:	701a      	strb	r2, [r3, #0]
	if(sender_id == 1) sender_id = APP_MASTER_ID;
 800be06:	4b18      	ldr	r3, [pc, #96]	@ (800be68 <SubghzApp_Init+0x154>)
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d103      	bne.n	800be16 <SubghzApp_Init+0x102>
 800be0e:	4b17      	ldr	r3, [pc, #92]	@ (800be6c <SubghzApp_Init+0x158>)
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	4b15      	ldr	r3, [pc, #84]	@ (800be68 <SubghzApp_Init+0x154>)
 800be14:	701a      	strb	r2, [r3, #0]

	SubghzApp_Rx();
 800be16:	f000 fb85 	bl	800c524 <SubghzApp_Rx>

	if(sender_id != 0)
 800be1a:	4b13      	ldr	r3, [pc, #76]	@ (800be68 <SubghzApp_Init+0x154>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <SubghzApp_Init+0x11a>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 800be22:	4813      	ldr	r0, [pc, #76]	@ (800be70 <SubghzApp_Init+0x15c>)
 800be24:	f7f7 fe0f 	bl	8003a46 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start(&hadc);
 800be28:	4811      	ldr	r0, [pc, #68]	@ (800be70 <SubghzApp_Init+0x15c>)
 800be2a:	f7f7 fa0d 	bl	8003248 <HAL_ADC_Start>
	}
	/* USER CODE END SubghzApp_Init_2 */
}
 800be2e:	bf00      	nop
 800be30:	3704      	adds	r7, #4
 800be32:	46bd      	mov	sp, r7
 800be34:	bd90      	pop	{r4, r7, pc}
 800be36:	bf00      	nop
 800be38:	0800d6d0 	.word	0x0800d6d0
 800be3c:	20000564 	.word	0x20000564
 800be40:	2000057c 	.word	0x2000057c
 800be44:	2000058c 	.word	0x2000058c
 800be48:	20000530 	.word	0x20000530
 800be4c:	0800be75 	.word	0x0800be75
 800be50:	0800bea5 	.word	0x0800bea5
 800be54:	0800c1d5 	.word	0x0800c1d5
 800be58:	0800c201 	.word	0x0800c201
 800be5c:	0800c20d 	.word	0x0800c20d
 800be60:	0800dc28 	.word	0x0800dc28
 800be64:	33bca100 	.word	0x33bca100
 800be68:	20000588 	.word	0x20000588
 800be6c:	20000070 	.word	0x20000070
 800be70:	200000e0 	.word	0x200000e0

0800be74 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxDone */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800be78:	2200      	movs	r2, #0
 800be7a:	2104      	movs	r1, #4
 800be7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be80:	f7f8 f9ed 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800be84:	2201      	movs	r2, #1
 800be86:	2108      	movs	r1, #8
 800be88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be8c:	f7f8 f9e7 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800be90:	2200      	movs	r2, #0
 800be92:	2102      	movs	r1, #2
 800be94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be98:	f7f8 f9e1 	bl	800425e <HAL_GPIO_WritePin>
	// Always go back to RX after a TX completes
	SubghzApp_Rx();
 800be9c:	f000 fb42 	bl	800c524 <SubghzApp_Rx>
	/* USER CODE END OnTxDone */
}
 800bea0:	bf00      	nop
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	461a      	mov	r2, r3
 800beb2:	4603      	mov	r3, r0
 800beb4:	817b      	strh	r3, [r7, #10]
 800beb6:	460b      	mov	r3, r1
 800beb8:	813b      	strh	r3, [r7, #8]
 800beba:	4613      	mov	r3, r2
 800bebc:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnRxDone */
	uint8_t isError = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	77fb      	strb	r3, [r7, #31]
	// Sanity checks to avoid overflow and underlength frames
	if (payload == NULL) {
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 814d 	beq.w	800c164 <OnRxDone+0x2c0>
		return;
	}
	if (size < sizeof(SUBGHZ_APP_ID)) {
 800beca:	897b      	ldrh	r3, [r7, #10]
 800becc:	2b08      	cmp	r3, #8
 800bece:	f240 814b 	bls.w	800c168 <OnRxDone+0x2c4>
		// Not even the ID, ignore
		return;
	}
	// Require minimum frame size for field parsing (indices up to 19)
	if (size < 20) {
 800bed2:	897b      	ldrh	r3, [r7, #10]
 800bed4:	2b13      	cmp	r3, #19
 800bed6:	f240 8149 	bls.w	800c16c <OnRxDone+0x2c8>
		return;
	}
	// Bound the copy to our buffer size
	uint16_t copyLen = (size <= sizeof(RxBuffer)) ? size : sizeof(RxBuffer);
 800beda:	897b      	ldrh	r3, [r7, #10]
 800bedc:	2b18      	cmp	r3, #24
 800bede:	bf28      	it	cs
 800bee0:	2318      	movcs	r3, #24
 800bee2:	83bb      	strh	r3, [r7, #28]
	memcpy(RxBuffer, payload, copyLen);
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	461a      	mov	r2, r3
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	48a2      	ldr	r0, [pc, #648]	@ (800c174 <OnRxDone+0x2d0>)
 800beec:	f000 ff6c 	bl	800cdc8 <memcpy>
	if(memcmp(RxBuffer, SUBGHZ_APP_ID, sizeof(SUBGHZ_APP_ID)) == 0)
 800bef0:	2209      	movs	r2, #9
 800bef2:	49a1      	ldr	r1, [pc, #644]	@ (800c178 <OnRxDone+0x2d4>)
 800bef4:	489f      	ldr	r0, [pc, #636]	@ (800c174 <OnRxDone+0x2d0>)
 800bef6:	f000 ff09 	bl	800cd0c <memcmp>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	f040 812e 	bne.w	800c15e <OnRxDone+0x2ba>
	{
		// Byte 9 : identité de l'émetteur (0, 1 ou 2)
		if(RxBuffer[9] == 0)
 800bf02:	4b9c      	ldr	r3, [pc, #624]	@ (800c174 <OnRxDone+0x2d0>)
 800bf04:	7a5b      	ldrb	r3, [r3, #9]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f000 8099 	beq.w	800c03e <OnRxDone+0x19a>
		{
			// Trame du récepteur (slave), ignorer ou traiter si besoin
		}
		else if(RxBuffer[9] == 1)
 800bf0c:	4b99      	ldr	r3, [pc, #612]	@ (800c174 <OnRxDone+0x2d0>)
 800bf0e:	7a5b      	ldrb	r3, [r3, #9]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d169      	bne.n	800bfe8 <OnRxDone+0x144>
		{
			// Trame de l'émetteur 1
			// Indices: [11]=CASIER, [12]=GAZ, [13]=PRESSION
			if(RxBuffer[12] != 0)
 800bf14:	4b97      	ldr	r3, [pc, #604]	@ (800c174 <OnRxDone+0x2d0>)
 800bf16:	7b1b      	ldrb	r3, [r3, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d011      	beq.n	800bf40 <OnRxDone+0x9c>
			{
				NEXTION_SetText("main.t_gaz", "NOK");
 800bf1c:	4997      	ldr	r1, [pc, #604]	@ (800c17c <OnRxDone+0x2d8>)
 800bf1e:	4898      	ldr	r0, [pc, #608]	@ (800c180 <OnRxDone+0x2dc>)
 800bf20:	f7f5 fcd6 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_gaz", 64333);
 800bf24:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bf28:	4895      	ldr	r0, [pc, #596]	@ (800c180 <OnRxDone+0x2dc>)
 800bf2a:	f7f5 fd0d 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_gaz", 2);
 800bf2e:	2102      	movs	r1, #2
 800bf30:	4894      	ldr	r0, [pc, #592]	@ (800c184 <OnRxDone+0x2e0>)
 800bf32:	f7f5 fd25 	bl	8001980 <NEXTION_SetPicture>

				isError |= 0b0100;
 800bf36:	7ffb      	ldrb	r3, [r7, #31]
 800bf38:	f043 0304 	orr.w	r3, r3, #4
 800bf3c:	77fb      	strb	r3, [r7, #31]
 800bf3e:	e00c      	b.n	800bf5a <OnRxDone+0xb6>
			}
			else
			{
				NEXTION_SetText("main.t_gaz", "OK");
 800bf40:	4991      	ldr	r1, [pc, #580]	@ (800c188 <OnRxDone+0x2e4>)
 800bf42:	488f      	ldr	r0, [pc, #572]	@ (800c180 <OnRxDone+0x2dc>)
 800bf44:	f7f5 fcc4 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_gaz", 5683);
 800bf48:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bf4c:	488c      	ldr	r0, [pc, #560]	@ (800c180 <OnRxDone+0x2dc>)
 800bf4e:	f7f5 fcfb 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_gaz", 3);
 800bf52:	2103      	movs	r1, #3
 800bf54:	488b      	ldr	r0, [pc, #556]	@ (800c184 <OnRxDone+0x2e0>)
 800bf56:	f7f5 fd13 	bl	8001980 <NEXTION_SetPicture>
			}

			if(RxBuffer[11] != 0)
 800bf5a:	4b86      	ldr	r3, [pc, #536]	@ (800c174 <OnRxDone+0x2d0>)
 800bf5c:	7adb      	ldrb	r3, [r3, #11]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d011      	beq.n	800bf86 <OnRxDone+0xe2>
			{
				NEXTION_SetText("main.t_casier", "NOK");
 800bf62:	4986      	ldr	r1, [pc, #536]	@ (800c17c <OnRxDone+0x2d8>)
 800bf64:	4889      	ldr	r0, [pc, #548]	@ (800c18c <OnRxDone+0x2e8>)
 800bf66:	f7f5 fcb3 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_casier", 64333);
 800bf6a:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bf6e:	4887      	ldr	r0, [pc, #540]	@ (800c18c <OnRxDone+0x2e8>)
 800bf70:	f7f5 fcea 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_casier", 4);
 800bf74:	2104      	movs	r1, #4
 800bf76:	4886      	ldr	r0, [pc, #536]	@ (800c190 <OnRxDone+0x2ec>)
 800bf78:	f7f5 fd02 	bl	8001980 <NEXTION_SetPicture>

				isError |= 0b0010;
 800bf7c:	7ffb      	ldrb	r3, [r7, #31]
 800bf7e:	f043 0302 	orr.w	r3, r3, #2
 800bf82:	77fb      	strb	r3, [r7, #31]
 800bf84:	e00c      	b.n	800bfa0 <OnRxDone+0xfc>
			}
			else
			{
				NEXTION_SetText("main.t_casier", "OK");
 800bf86:	4980      	ldr	r1, [pc, #512]	@ (800c188 <OnRxDone+0x2e4>)
 800bf88:	4880      	ldr	r0, [pc, #512]	@ (800c18c <OnRxDone+0x2e8>)
 800bf8a:	f7f5 fca1 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_casier", 5683);
 800bf8e:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bf92:	487e      	ldr	r0, [pc, #504]	@ (800c18c <OnRxDone+0x2e8>)
 800bf94:	f7f5 fcd8 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_casier", 5);
 800bf98:	2105      	movs	r1, #5
 800bf9a:	487d      	ldr	r0, [pc, #500]	@ (800c190 <OnRxDone+0x2ec>)
 800bf9c:	f7f5 fcf0 	bl	8001980 <NEXTION_SetPicture>
			}

			// Pressure value is byte [13]
			NEXTION_SetValue("main.x_prs", RxBuffer[13]);
 800bfa0:	4b74      	ldr	r3, [pc, #464]	@ (800c174 <OnRxDone+0x2d0>)
 800bfa2:	7b5b      	ldrb	r3, [r3, #13]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	487b      	ldr	r0, [pc, #492]	@ (800c194 <OnRxDone+0x2f0>)
 800bfa8:	f7f5 fcb2 	bl	8001910 <NEXTION_SetValue>
			if(RxBuffer[13] < seuil)
 800bfac:	4b71      	ldr	r3, [pc, #452]	@ (800c174 <OnRxDone+0x2d0>)
 800bfae:	7b5a      	ldrb	r2, [r3, #13]
 800bfb0:	4b79      	ldr	r3, [pc, #484]	@ (800c198 <OnRxDone+0x2f4>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d20d      	bcs.n	800bfd4 <OnRxDone+0x130>
			{
				NEXTION_SetBackgroundColor("main.x_prs", 64333);
 800bfb8:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bfbc:	4875      	ldr	r0, [pc, #468]	@ (800c194 <OnRxDone+0x2f0>)
 800bfbe:	f7f5 fcc3 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_prs", 0);
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	4875      	ldr	r0, [pc, #468]	@ (800c19c <OnRxDone+0x2f8>)
 800bfc6:	f7f5 fcdb 	bl	8001980 <NEXTION_SetPicture>

				isError |= 0b0001;
 800bfca:	7ffb      	ldrb	r3, [r7, #31]
 800bfcc:	f043 0301 	orr.w	r3, r3, #1
 800bfd0:	77fb      	strb	r3, [r7, #31]
 800bfd2:	e034      	b.n	800c03e <OnRxDone+0x19a>
			}
			else
			{
				NEXTION_SetBackgroundColor("main.x_prs", 5683);
 800bfd4:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bfd8:	486e      	ldr	r0, [pc, #440]	@ (800c194 <OnRxDone+0x2f0>)
 800bfda:	f7f5 fcb5 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_prs", 1);
 800bfde:	2101      	movs	r1, #1
 800bfe0:	486e      	ldr	r0, [pc, #440]	@ (800c19c <OnRxDone+0x2f8>)
 800bfe2:	f7f5 fccd 	bl	8001980 <NEXTION_SetPicture>
 800bfe6:	e02a      	b.n	800c03e <OnRxDone+0x19a>
			}
		}
		else if(RxBuffer[9] == 2)
 800bfe8:	4b62      	ldr	r3, [pc, #392]	@ (800c174 <OnRxDone+0x2d0>)
 800bfea:	7a5b      	ldrb	r3, [r3, #9]
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	d123      	bne.n	800c038 <OnRxDone+0x194>
		{
			// Trame de l'émetteur 2
			// Index for secheur is [12]
			if(RxBuffer[12] != 0)
 800bff0:	4b60      	ldr	r3, [pc, #384]	@ (800c174 <OnRxDone+0x2d0>)
 800bff2:	7b1b      	ldrb	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d011      	beq.n	800c01c <OnRxDone+0x178>
			{
				NEXTION_SetText("main.t_sec", "NOK");
 800bff8:	4960      	ldr	r1, [pc, #384]	@ (800c17c <OnRxDone+0x2d8>)
 800bffa:	4869      	ldr	r0, [pc, #420]	@ (800c1a0 <OnRxDone+0x2fc>)
 800bffc:	f7f5 fc68 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_sec", 64333);
 800c000:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c004:	4866      	ldr	r0, [pc, #408]	@ (800c1a0 <OnRxDone+0x2fc>)
 800c006:	f7f5 fc9f 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_sec", 6);
 800c00a:	2106      	movs	r1, #6
 800c00c:	4865      	ldr	r0, [pc, #404]	@ (800c1a4 <OnRxDone+0x300>)
 800c00e:	f7f5 fcb7 	bl	8001980 <NEXTION_SetPicture>

				isError |= 0b1000;
 800c012:	7ffb      	ldrb	r3, [r7, #31]
 800c014:	f043 0308 	orr.w	r3, r3, #8
 800c018:	77fb      	strb	r3, [r7, #31]
 800c01a:	e010      	b.n	800c03e <OnRxDone+0x19a>
			}
			else
			{
				NEXTION_SetText("main.t_sec", "OK");
 800c01c:	495a      	ldr	r1, [pc, #360]	@ (800c188 <OnRxDone+0x2e4>)
 800c01e:	4860      	ldr	r0, [pc, #384]	@ (800c1a0 <OnRxDone+0x2fc>)
 800c020:	f7f5 fc56 	bl	80018d0 <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_sec", 5683);
 800c024:	f241 6133 	movw	r1, #5683	@ 0x1633
 800c028:	485d      	ldr	r0, [pc, #372]	@ (800c1a0 <OnRxDone+0x2fc>)
 800c02a:	f7f5 fc8d 	bl	8001948 <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_sec", 7);
 800c02e:	2107      	movs	r1, #7
 800c030:	485c      	ldr	r0, [pc, #368]	@ (800c1a4 <OnRxDone+0x300>)
 800c032:	f7f5 fca5 	bl	8001980 <NEXTION_SetPicture>
 800c036:	e002      	b.n	800c03e <OnRxDone+0x19a>
			}
		}
		else
		{
			// Valeur inconnue, erreur ou trame non reconnue
			OnRxError();
 800c038:	f000 f8e8 	bl	800c20c <OnRxError>
			return;
 800c03c:	e097      	b.n	800c16e <OnRxDone+0x2ca>
		}

		TIM16->CNT = 0;
 800c03e:	4b5a      	ldr	r3, [pc, #360]	@ (800c1a8 <OnRxDone+0x304>)
 800c040:	2200      	movs	r2, #0
 800c042:	625a      	str	r2, [r3, #36]	@ 0x24

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800c044:	2200      	movs	r2, #0
 800c046:	2104      	movs	r1, #4
 800c048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c04c:	f7f8 f907 	bl	800425e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800c050:	2200      	movs	r2, #0
 800c052:	2108      	movs	r1, #8
 800c054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c058:	f7f8 f901 	bl	800425e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800c05c:	2200      	movs	r2, #0
 800c05e:	2102      	movs	r1, #2
 800c060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c064:	f7f8 f8fb 	bl	800425e <HAL_GPIO_WritePin>

		NEXTION_SetText("main.t_radio", "OK");
 800c068:	4947      	ldr	r1, [pc, #284]	@ (800c188 <OnRxDone+0x2e4>)
 800c06a:	4850      	ldr	r0, [pc, #320]	@ (800c1ac <OnRxDone+0x308>)
 800c06c:	f7f5 fc30 	bl	80018d0 <NEXTION_SetText>
		NEXTION_SetPicture("main.p_radio", 9);
 800c070:	2109      	movs	r1, #9
 800c072:	484f      	ldr	r0, [pc, #316]	@ (800c1b0 <OnRxDone+0x30c>)
 800c074:	f7f5 fc84 	bl	8001980 <NEXTION_SetPicture>
		NEXTION_SetBackgroundColor("main.t_radio", 5683);
 800c078:	f241 6133 	movw	r1, #5683	@ 0x1633
 800c07c:	484b      	ldr	r0, [pc, #300]	@ (800c1ac <OnRxDone+0x308>)
 800c07e:	f7f5 fc63 	bl	8001948 <NEXTION_SetBackgroundColor>

		// Display temperatures from received payload bytes [14..19]
		int t1 = (int)(TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[14] << 8 | RxBuffer[15]), tmp_config.resolution) * 10.0f);
 800c082:	4b3c      	ldr	r3, [pc, #240]	@ (800c174 <OnRxDone+0x2d0>)
 800c084:	7b9b      	ldrb	r3, [r3, #14]
 800c086:	b21b      	sxth	r3, r3
 800c088:	021b      	lsls	r3, r3, #8
 800c08a:	b21a      	sxth	r2, r3
 800c08c:	4b39      	ldr	r3, [pc, #228]	@ (800c174 <OnRxDone+0x2d0>)
 800c08e:	7bdb      	ldrb	r3, [r3, #15]
 800c090:	b21b      	sxth	r3, r3
 800c092:	4313      	orrs	r3, r2
 800c094:	b21b      	sxth	r3, r3
 800c096:	4a47      	ldr	r2, [pc, #284]	@ (800c1b4 <OnRxDone+0x310>)
 800c098:	7812      	ldrb	r2, [r2, #0]
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f6 f9ef 	bl	8002480 <TMP275_ConvertRawToTemperature>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4944      	ldr	r1, [pc, #272]	@ (800c1b8 <OnRxDone+0x314>)
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f4 fd06 	bl	8000ab8 <__aeabi_fmul>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f4 fe52 	bl	8000d58 <__aeabi_f2iz>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	61bb      	str	r3, [r7, #24]
		int t2 = (int)(TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[16] << 8 | RxBuffer[17]), tmp_config.resolution) * 10.0f);
 800c0b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c174 <OnRxDone+0x2d0>)
 800c0ba:	7c1b      	ldrb	r3, [r3, #16]
 800c0bc:	b21b      	sxth	r3, r3
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	b21a      	sxth	r2, r3
 800c0c2:	4b2c      	ldr	r3, [pc, #176]	@ (800c174 <OnRxDone+0x2d0>)
 800c0c4:	7c5b      	ldrb	r3, [r3, #17]
 800c0c6:	b21b      	sxth	r3, r3
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	b21b      	sxth	r3, r3
 800c0cc:	4a39      	ldr	r2, [pc, #228]	@ (800c1b4 <OnRxDone+0x310>)
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7f6 f9d4 	bl	8002480 <TMP275_ConvertRawToTemperature>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	4937      	ldr	r1, [pc, #220]	@ (800c1b8 <OnRxDone+0x314>)
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f4 fceb 	bl	8000ab8 <__aeabi_fmul>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7f4 fe37 	bl	8000d58 <__aeabi_f2iz>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	617b      	str	r3, [r7, #20]
		int t3 = (int)(TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[18] << 8 | RxBuffer[19]), tmp_config.resolution) * 10.0f);
 800c0ee:	4b21      	ldr	r3, [pc, #132]	@ (800c174 <OnRxDone+0x2d0>)
 800c0f0:	7c9b      	ldrb	r3, [r3, #18]
 800c0f2:	b21b      	sxth	r3, r3
 800c0f4:	021b      	lsls	r3, r3, #8
 800c0f6:	b21a      	sxth	r2, r3
 800c0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800c174 <OnRxDone+0x2d0>)
 800c0fa:	7cdb      	ldrb	r3, [r3, #19]
 800c0fc:	b21b      	sxth	r3, r3
 800c0fe:	4313      	orrs	r3, r2
 800c100:	b21b      	sxth	r3, r3
 800c102:	4a2c      	ldr	r2, [pc, #176]	@ (800c1b4 <OnRxDone+0x310>)
 800c104:	7812      	ldrb	r2, [r2, #0]
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f6 f9b9 	bl	8002480 <TMP275_ConvertRawToTemperature>
 800c10e:	4603      	mov	r3, r0
 800c110:	4929      	ldr	r1, [pc, #164]	@ (800c1b8 <OnRxDone+0x314>)
 800c112:	4618      	mov	r0, r3
 800c114:	f7f4 fcd0 	bl	8000ab8 <__aeabi_fmul>
 800c118:	4603      	mov	r3, r0
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7f4 fe1c 	bl	8000d58 <__aeabi_f2iz>
 800c120:	4603      	mov	r3, r0
 800c122:	613b      	str	r3, [r7, #16]
		NEXTION_SetValue("boxState.x_e1T", t1);
 800c124:	69b9      	ldr	r1, [r7, #24]
 800c126:	4825      	ldr	r0, [pc, #148]	@ (800c1bc <OnRxDone+0x318>)
 800c128:	f7f5 fbf2 	bl	8001910 <NEXTION_SetValue>
		NEXTION_SetValue("boxState.x_e1C", t2);
 800c12c:	6979      	ldr	r1, [r7, #20]
 800c12e:	4824      	ldr	r0, [pc, #144]	@ (800c1c0 <OnRxDone+0x31c>)
 800c130:	f7f5 fbee 	bl	8001910 <NEXTION_SetValue>
		NEXTION_SetValue("boxState.x_e1A", t3);
 800c134:	6939      	ldr	r1, [r7, #16]
 800c136:	4823      	ldr	r0, [pc, #140]	@ (800c1c4 <OnRxDone+0x320>)
 800c138:	f7f5 fbea 	bl	8001910 <NEXTION_SetValue>

		if(isError != 0)
 800c13c:	7ffb      	ldrb	r3, [r7, #31]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <OnRxDone+0x2ae>
		{
			NEXTION_SendCommand("main.bcg_error.en=1");
 800c142:	4821      	ldr	r0, [pc, #132]	@ (800c1c8 <OnRxDone+0x324>)
 800c144:	f7f5 faf2 	bl	800172c <NEXTION_SendCommand>
			SubghzApp_ValueError(isError);
 800c148:	7ffb      	ldrb	r3, [r7, #31]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 fa62 	bl	800c614 <SubghzApp_ValueError>
 800c150:	e005      	b.n	800c15e <OnRxDone+0x2ba>
		}
		else
		{
			NEXTION_SendCommand("main.bcg_error.en=0");
 800c152:	481e      	ldr	r0, [pc, #120]	@ (800c1cc <OnRxDone+0x328>)
 800c154:	f7f5 faea 	bl	800172c <NEXTION_SendCommand>
			NEXTION_SendCommand("main.siren.en=0");
 800c158:	481d      	ldr	r0, [pc, #116]	@ (800c1d0 <OnRxDone+0x32c>)
 800c15a:	f7f5 fae7 	bl	800172c <NEXTION_SendCommand>
		}
	}
	// After handling a frame, resume RX continuously
	SubghzApp_Rx();
 800c15e:	f000 f9e1 	bl	800c524 <SubghzApp_Rx>
 800c162:	e004      	b.n	800c16e <OnRxDone+0x2ca>
		return;
 800c164:	bf00      	nop
 800c166:	e002      	b.n	800c16e <OnRxDone+0x2ca>
		return;
 800c168:	bf00      	nop
 800c16a:	e000      	b.n	800c16e <OnRxDone+0x2ca>
		return;
 800c16c:	bf00      	nop
	/* USER CODE END OnRxDone */
}
 800c16e:	3720      	adds	r7, #32
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	2000054c 	.word	0x2000054c
 800c178:	20000060 	.word	0x20000060
 800c17c:	0800d6e8 	.word	0x0800d6e8
 800c180:	0800d6ec 	.word	0x0800d6ec
 800c184:	0800d6f8 	.word	0x0800d6f8
 800c188:	0800d704 	.word	0x0800d704
 800c18c:	0800d708 	.word	0x0800d708
 800c190:	0800d718 	.word	0x0800d718
 800c194:	0800d728 	.word	0x0800d728
 800c198:	2000057c 	.word	0x2000057c
 800c19c:	0800d734 	.word	0x0800d734
 800c1a0:	0800d740 	.word	0x0800d740
 800c1a4:	0800d74c 	.word	0x0800d74c
 800c1a8:	40014400 	.word	0x40014400
 800c1ac:	0800d758 	.word	0x0800d758
 800c1b0:	0800d768 	.word	0x0800d768
 800c1b4:	0800dbe0 	.word	0x0800dbe0
 800c1b8:	41200000 	.word	0x41200000
 800c1bc:	0800d778 	.word	0x0800d778
 800c1c0:	0800d788 	.word	0x0800d788
 800c1c4:	0800d798 	.word	0x0800d798
 800c1c8:	0800d7a8 	.word	0x0800d7a8
 800c1cc:	0800d7bc 	.word	0x0800d7bc
 800c1d0:	0800d7d0 	.word	0x0800d7d0

0800c1d4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxTimeout */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2104      	movs	r1, #4
 800c1dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c1e0:	f7f8 f83d 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2108      	movs	r1, #8
 800c1e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c1ec:	f7f8 f837 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2102      	movs	r1, #2
 800c1f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c1f8:	f7f8 f831 	bl	800425e <HAL_GPIO_WritePin>
	/* USER CODE END OnTxTimeout */
}
 800c1fc:	bf00      	nop
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnRxTimeout */
	// Resume RX after a timeout
	SubghzApp_Rx();
 800c204:	f000 f98e 	bl	800c524 <SubghzApp_Rx>
	/* USER CODE END OnRxTimeout */
}
 800c208:	bf00      	nop
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <OnRxError>:

static void OnRxError(void)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnRxError */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800c210:	2200      	movs	r2, #0
 800c212:	2104      	movs	r1, #4
 800c214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c218:	f7f8 f821 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800c21c:	2200      	movs	r2, #0
 800c21e:	2108      	movs	r1, #8
 800c220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c224:	f7f8 f81b 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800c228:	2201      	movs	r2, #1
 800c22a:	2102      	movs	r1, #2
 800c22c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c230:	f7f8 f815 	bl	800425e <HAL_GPIO_WritePin>
	// Resume RX after an error
	SubghzApp_Rx();
 800c234:	f000 f976 	bl	800c524 <SubghzApp_Rx>
	/* USER CODE END OnRxError */
}
 800c238:	bf00      	nop
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <SubghzApp_Timeout>:

/* USER CODE BEGIN PrFD */
void SubghzApp_Timeout(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
	//TIM16 Event
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800c240:	2200      	movs	r2, #0
 800c242:	2104      	movs	r1, #4
 800c244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c248:	f7f8 f809 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800c24c:	2200      	movs	r2, #0
 800c24e:	2108      	movs	r1, #8
 800c250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c254:	f7f8 f803 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800c258:	2201      	movs	r2, #1
 800c25a:	2102      	movs	r1, #2
 800c25c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c260:	f7f7 fffd 	bl	800425e <HAL_GPIO_WritePin>

	NEXTION_SetText("main.t_radio", "DC");
 800c264:	491f      	ldr	r1, [pc, #124]	@ (800c2e4 <SubghzApp_Timeout+0xa8>)
 800c266:	4820      	ldr	r0, [pc, #128]	@ (800c2e8 <SubghzApp_Timeout+0xac>)
 800c268:	f7f5 fb32 	bl	80018d0 <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_radio", 64333);
 800c26c:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c270:	481d      	ldr	r0, [pc, #116]	@ (800c2e8 <SubghzApp_Timeout+0xac>)
 800c272:	f7f5 fb69 	bl	8001948 <NEXTION_SetBackgroundColor>

	NEXTION_SendCommand("main.p_radio.pic=10");
 800c276:	481d      	ldr	r0, [pc, #116]	@ (800c2ec <SubghzApp_Timeout+0xb0>)
 800c278:	f7f5 fa58 	bl	800172c <NEXTION_SendCommand>

	NEXTION_SetText("main.t_sec", "DC");
 800c27c:	4919      	ldr	r1, [pc, #100]	@ (800c2e4 <SubghzApp_Timeout+0xa8>)
 800c27e:	481c      	ldr	r0, [pc, #112]	@ (800c2f0 <SubghzApp_Timeout+0xb4>)
 800c280:	f7f5 fb26 	bl	80018d0 <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_sec", 64333);
 800c284:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c288:	4819      	ldr	r0, [pc, #100]	@ (800c2f0 <SubghzApp_Timeout+0xb4>)
 800c28a:	f7f5 fb5d 	bl	8001948 <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_sec.pic=6");
 800c28e:	4819      	ldr	r0, [pc, #100]	@ (800c2f4 <SubghzApp_Timeout+0xb8>)
 800c290:	f7f5 fa4c 	bl	800172c <NEXTION_SendCommand>

	NEXTION_SetText("main.t_gaz", "DC");
 800c294:	4913      	ldr	r1, [pc, #76]	@ (800c2e4 <SubghzApp_Timeout+0xa8>)
 800c296:	4818      	ldr	r0, [pc, #96]	@ (800c2f8 <SubghzApp_Timeout+0xbc>)
 800c298:	f7f5 fb1a 	bl	80018d0 <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_gaz", 64333);
 800c29c:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c2a0:	4815      	ldr	r0, [pc, #84]	@ (800c2f8 <SubghzApp_Timeout+0xbc>)
 800c2a2:	f7f5 fb51 	bl	8001948 <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_gaz.pic=2");
 800c2a6:	4815      	ldr	r0, [pc, #84]	@ (800c2fc <SubghzApp_Timeout+0xc0>)
 800c2a8:	f7f5 fa40 	bl	800172c <NEXTION_SendCommand>

	NEXTION_SetText("main.t_casier", "DC");
 800c2ac:	490d      	ldr	r1, [pc, #52]	@ (800c2e4 <SubghzApp_Timeout+0xa8>)
 800c2ae:	4814      	ldr	r0, [pc, #80]	@ (800c300 <SubghzApp_Timeout+0xc4>)
 800c2b0:	f7f5 fb0e 	bl	80018d0 <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_casier", 64333);
 800c2b4:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c2b8:	4811      	ldr	r0, [pc, #68]	@ (800c300 <SubghzApp_Timeout+0xc4>)
 800c2ba:	f7f5 fb45 	bl	8001948 <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_casier.pic=4");
 800c2be:	4811      	ldr	r0, [pc, #68]	@ (800c304 <SubghzApp_Timeout+0xc8>)
 800c2c0:	f7f5 fa34 	bl	800172c <NEXTION_SendCommand>

	NEXTION_SetBackgroundColor("main.x_prs", 64333);
 800c2c4:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800c2c8:	480f      	ldr	r0, [pc, #60]	@ (800c308 <SubghzApp_Timeout+0xcc>)
 800c2ca:	f7f5 fb3d 	bl	8001948 <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_prs.pic=0");
 800c2ce:	480f      	ldr	r0, [pc, #60]	@ (800c30c <SubghzApp_Timeout+0xd0>)
 800c2d0:	f7f5 fa2c 	bl	800172c <NEXTION_SendCommand>

	NEXTION_SendCommand("main.bcg_error.en=1");
 800c2d4:	480e      	ldr	r0, [pc, #56]	@ (800c310 <SubghzApp_Timeout+0xd4>)
 800c2d6:	f7f5 fa29 	bl	800172c <NEXTION_SendCommand>

	SubghzApp_ValueError((uint8_t)0b10000);
 800c2da:	2010      	movs	r0, #16
 800c2dc:	f000 f99a 	bl	800c614 <SubghzApp_ValueError>
}
 800c2e0:	bf00      	nop
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	0800d7e0 	.word	0x0800d7e0
 800c2e8:	0800d758 	.word	0x0800d758
 800c2ec:	0800d7e4 	.word	0x0800d7e4
 800c2f0:	0800d740 	.word	0x0800d740
 800c2f4:	0800d7f8 	.word	0x0800d7f8
 800c2f8:	0800d6ec 	.word	0x0800d6ec
 800c2fc:	0800d80c 	.word	0x0800d80c
 800c300:	0800d708 	.word	0x0800d708
 800c304:	0800d820 	.word	0x0800d820
 800c308:	0800d728 	.word	0x0800d728
 800c30c:	0800d834 	.word	0x0800d834
 800c310:	0800d7a8 	.word	0x0800d7a8

0800c314 <SubghzApp_Event>:

void SubghzApp_Event(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
	if(sender_id == 0) SubghzApp_RxProcess();
 800c318:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <SubghzApp_Event+0x1c>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d102      	bne.n	800c326 <SubghzApp_Event+0x12>
 800c320:	f000 f8b0 	bl	800c484 <SubghzApp_RxProcess>
	else SubghzApp_TxProcess();
}
 800c324:	e001      	b.n	800c32a <SubghzApp_Event+0x16>
	else SubghzApp_TxProcess();
 800c326:	f000 f807 	bl	800c338 <SubghzApp_TxProcess>
}
 800c32a:	bf00      	nop
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20000588 	.word	0x20000588
 800c334:	00000000 	.word	0x00000000

0800c338 <SubghzApp_TxProcess>:

void SubghzApp_TxProcess(void)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
	int16_t tmp1;
	int16_t tmp2;
	int16_t tmp3;

	TMP275_ReadTemperatureRaw(&tmp_sensor_1, &tmp1);
 800c33e:	1dbb      	adds	r3, r7, #6
 800c340:	4619      	mov	r1, r3
 800c342:	4847      	ldr	r0, [pc, #284]	@ (800c460 <SubghzApp_TxProcess+0x128>)
 800c344:	f7f6 f9d8 	bl	80026f8 <TMP275_ReadTemperatureRaw>
	TMP275_ReadTemperatureRaw(&tmp_sensor_2, &tmp2);
 800c348:	1d3b      	adds	r3, r7, #4
 800c34a:	4619      	mov	r1, r3
 800c34c:	4845      	ldr	r0, [pc, #276]	@ (800c464 <SubghzApp_TxProcess+0x12c>)
 800c34e:	f7f6 f9d3 	bl	80026f8 <TMP275_ReadTemperatureRaw>
	TMP275_ReadTemperatureRaw(&tmp_sensor_3, &tmp3);
 800c352:	1cbb      	adds	r3, r7, #2
 800c354:	4619      	mov	r1, r3
 800c356:	4844      	ldr	r0, [pc, #272]	@ (800c468 <SubghzApp_TxProcess+0x130>)
 800c358:	f7f6 f9ce 	bl	80026f8 <TMP275_ReadTemperatureRaw>

	buffer[14] = (uint8_t) (tmp1 >> 8);
 800c35c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c360:	121b      	asrs	r3, r3, #8
 800c362:	b21b      	sxth	r3, r3
 800c364:	b2da      	uxtb	r2, r3
 800c366:	4b41      	ldr	r3, [pc, #260]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c368:	739a      	strb	r2, [r3, #14]
	buffer[15] = (uint8_t) tmp1;
 800c36a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b3e      	ldr	r3, [pc, #248]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c372:	73da      	strb	r2, [r3, #15]
	buffer[16] = (uint8_t) (tmp2 >> 8);
 800c374:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c378:	121b      	asrs	r3, r3, #8
 800c37a:	b21b      	sxth	r3, r3
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	4b3b      	ldr	r3, [pc, #236]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c380:	741a      	strb	r2, [r3, #16]
	buffer[17] = (uint8_t) tmp2;
 800c382:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c386:	b2da      	uxtb	r2, r3
 800c388:	4b38      	ldr	r3, [pc, #224]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c38a:	745a      	strb	r2, [r3, #17]
	buffer[18] = (uint8_t) (tmp3 >> 8);
 800c38c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c390:	121b      	asrs	r3, r3, #8
 800c392:	b21b      	sxth	r3, r3
 800c394:	b2da      	uxtb	r2, r3
 800c396:	4b35      	ldr	r3, [pc, #212]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c398:	749a      	strb	r2, [r3, #18]
	buffer[19] = (uint8_t) tmp3;
 800c39a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	4b32      	ldr	r3, [pc, #200]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c3a2:	74da      	strb	r2, [r3, #19]

	if(sender_id == 1)
 800c3a4:	4b32      	ldr	r3, [pc, #200]	@ (800c470 <SubghzApp_TxProcess+0x138>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d141      	bne.n	800c430 <SubghzApp_TxProcess+0xf8>
	{
		HAL_ADC_Start(&hadc);
 800c3ac:	4831      	ldr	r0, [pc, #196]	@ (800c474 <SubghzApp_TxProcess+0x13c>)
 800c3ae:	f7f6 ff4b 	bl	8003248 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 20);
 800c3b2:	2114      	movs	r1, #20
 800c3b4:	482f      	ldr	r0, [pc, #188]	@ (800c474 <SubghzApp_TxProcess+0x13c>)
 800c3b6:	f7f6 ffbf 	bl	8003338 <HAL_ADC_PollForConversion>

		buffer[10] = 0;
 800c3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	729a      	strb	r2, [r3, #10]
		buffer[11] = HAL_GPIO_ReadPin(CASIER_GPIO_Port, CASIER_Pin);
 800c3c0:	2110      	movs	r1, #16
 800c3c2:	482d      	ldr	r0, [pc, #180]	@ (800c478 <SubghzApp_TxProcess+0x140>)
 800c3c4:	f7f7 ff34 	bl	8004230 <HAL_GPIO_ReadPin>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	4b27      	ldr	r3, [pc, #156]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c3ce:	72da      	strb	r2, [r3, #11]
		buffer[12] = HAL_GPIO_ReadPin(GAZ_GPIO_Port, GAZ_Pin);
 800c3d0:	2120      	movs	r1, #32
 800c3d2:	4829      	ldr	r0, [pc, #164]	@ (800c478 <SubghzApp_TxProcess+0x140>)
 800c3d4:	f7f7 ff2c 	bl	8004230 <HAL_GPIO_ReadPin>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	4b23      	ldr	r3, [pc, #140]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c3de:	731a      	strb	r2, [r3, #12]
		buffer[13] = (((float)(HAL_ADC_GetValue(&hadc) * 10.3421) / 65520) * 10);
 800c3e0:	4824      	ldr	r0, [pc, #144]	@ (800c474 <SubghzApp_TxProcess+0x13c>)
 800c3e2:	f7f7 f840 	bl	8003466 <HAL_ADC_GetValue>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f4 f98d 	bl	8000708 <__aeabi_ui2d>
 800c3ee:	a31a      	add	r3, pc, #104	@ (adr r3, 800c458 <SubghzApp_TxProcess+0x120>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f3 ff1c 	bl	8000230 <__aeabi_dmul>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4619      	mov	r1, r3
 800c400:	f7f4 f9fc 	bl	80007fc <__aeabi_d2f>
 800c404:	4603      	mov	r3, r0
 800c406:	491d      	ldr	r1, [pc, #116]	@ (800c47c <SubghzApp_TxProcess+0x144>)
 800c408:	4618      	mov	r0, r3
 800c40a:	f7f4 fc09 	bl	8000c20 <__aeabi_fdiv>
 800c40e:	4603      	mov	r3, r0
 800c410:	491b      	ldr	r1, [pc, #108]	@ (800c480 <SubghzApp_TxProcess+0x148>)
 800c412:	4618      	mov	r0, r3
 800c414:	f7f4 fb50 	bl	8000ab8 <__aeabi_fmul>
 800c418:	4603      	mov	r3, r0
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f4 fcc2 	bl	8000da4 <__aeabi_f2uiz>
 800c420:	4603      	mov	r3, r0
 800c422:	b2da      	uxtb	r2, r3
 800c424:	4b11      	ldr	r3, [pc, #68]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c426:	735a      	strb	r2, [r3, #13]
		HAL_ADC_Stop(&hadc);
 800c428:	4812      	ldr	r0, [pc, #72]	@ (800c474 <SubghzApp_TxProcess+0x13c>)
 800c42a:	f7f6 ff53 	bl	80032d4 <HAL_ADC_Stop>
 800c42e:	e00b      	b.n	800c448 <SubghzApp_TxProcess+0x110>
	}
	else if (sender_id == 2)
 800c430:	4b0f      	ldr	r3, [pc, #60]	@ (800c470 <SubghzApp_TxProcess+0x138>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d107      	bne.n	800c448 <SubghzApp_TxProcess+0x110>
	{
		buffer[12] = HAL_GPIO_ReadPin(SECHEUR_GPIO_Port, SECHEUR_Pin);
 800c438:	2108      	movs	r1, #8
 800c43a:	480f      	ldr	r0, [pc, #60]	@ (800c478 <SubghzApp_TxProcess+0x140>)
 800c43c:	f7f7 fef8 	bl	8004230 <HAL_GPIO_ReadPin>
 800c440:	4603      	mov	r3, r0
 800c442:	461a      	mov	r2, r3
 800c444:	4b09      	ldr	r3, [pc, #36]	@ (800c46c <SubghzApp_TxProcess+0x134>)
 800c446:	731a      	strb	r2, [r3, #12]
	}
	SubghzApp_Tx();
 800c448:	f000 f87c 	bl	800c544 <SubghzApp_Tx>
}
 800c44c:	bf00      	nop
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	f3af 8000 	nop.w
 800c458:	bb2fec57 	.word	0xbb2fec57
 800c45c:	4024af27 	.word	0x4024af27
 800c460:	20000004 	.word	0x20000004
 800c464:	20000020 	.word	0x20000020
 800c468:	2000003c 	.word	0x2000003c
 800c46c:	20000564 	.word	0x20000564
 800c470:	20000588 	.word	0x20000588
 800c474:	200000e0 	.word	0x200000e0
 800c478:	48000400 	.word	0x48000400
 800c47c:	477ff000 	.word	0x477ff000
 800c480:	41200000 	.word	0x41200000

0800c484 <SubghzApp_RxProcess>:

void SubghzApp_RxProcess(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
	float tmp1;
	float tmp2;
	float tmp3;

	TMP275_ReadTemperature(&tmp_sensor_1, &tmp1);
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4619      	mov	r1, r3
 800c490:	481d      	ldr	r0, [pc, #116]	@ (800c508 <SubghzApp_RxProcess+0x84>)
 800c492:	f7f6 f902 	bl	800269a <TMP275_ReadTemperature>
	TMP275_ReadTemperature(&tmp_sensor_2, &tmp2);
 800c496:	f107 0308 	add.w	r3, r7, #8
 800c49a:	4619      	mov	r1, r3
 800c49c:	481b      	ldr	r0, [pc, #108]	@ (800c50c <SubghzApp_RxProcess+0x88>)
 800c49e:	f7f6 f8fc 	bl	800269a <TMP275_ReadTemperature>
	TMP275_ReadTemperature(&tmp_sensor_3, &tmp3);
 800c4a2:	1d3b      	adds	r3, r7, #4
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	481a      	ldr	r0, [pc, #104]	@ (800c510 <SubghzApp_RxProcess+0x8c>)
 800c4a8:	f7f6 f8f7 	bl	800269a <TMP275_ReadTemperature>

	NEXTION_SetValue("boxState.x_r1T", (int)(tmp1 * 10));
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	4919      	ldr	r1, [pc, #100]	@ (800c514 <SubghzApp_RxProcess+0x90>)
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7f4 fb01 	bl	8000ab8 <__aeabi_fmul>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7f4 fc4d 	bl	8000d58 <__aeabi_f2iz>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4815      	ldr	r0, [pc, #84]	@ (800c518 <SubghzApp_RxProcess+0x94>)
 800c4c4:	f7f5 fa24 	bl	8001910 <NEXTION_SetValue>
	NEXTION_SetValue("boxState.x_r1C", (int)(tmp2 * 10));
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4912      	ldr	r1, [pc, #72]	@ (800c514 <SubghzApp_RxProcess+0x90>)
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7f4 faf3 	bl	8000ab8 <__aeabi_fmul>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7f4 fc3f 	bl	8000d58 <__aeabi_f2iz>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	4619      	mov	r1, r3
 800c4de:	480f      	ldr	r0, [pc, #60]	@ (800c51c <SubghzApp_RxProcess+0x98>)
 800c4e0:	f7f5 fa16 	bl	8001910 <NEXTION_SetValue>
	NEXTION_SetValue("boxState.x_r1A", (int)(tmp3 * 10));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	490b      	ldr	r1, [pc, #44]	@ (800c514 <SubghzApp_RxProcess+0x90>)
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7f4 fae5 	bl	8000ab8 <__aeabi_fmul>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7f4 fc31 	bl	8000d58 <__aeabi_f2iz>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4809      	ldr	r0, [pc, #36]	@ (800c520 <SubghzApp_RxProcess+0x9c>)
 800c4fc:	f7f5 fa08 	bl	8001910 <NEXTION_SetValue>
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000004 	.word	0x20000004
 800c50c:	20000020 	.word	0x20000020
 800c510:	2000003c 	.word	0x2000003c
 800c514:	41200000 	.word	0x41200000
 800c518:	0800d848 	.word	0x0800d848
 800c51c:	0800d858 	.word	0x0800d858
 800c520:	0800d868 	.word	0x0800d868

0800c524 <SubghzApp_Rx>:

void SubghzApp_Rx(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800c528:	2201      	movs	r2, #1
 800c52a:	2104      	movs	r1, #4
 800c52c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c530:	f7f7 fe95 	bl	800425e <HAL_GPIO_WritePin>

    // Use boosted RX for improved sensitivity (~3 dB)
    Radio.RxBoosted(0);
 800c534:	4b02      	ldr	r3, [pc, #8]	@ (800c540 <SubghzApp_Rx+0x1c>)
 800c536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c538:	2000      	movs	r0, #0
 800c53a:	4798      	blx	r3
}
 800c53c:	bf00      	nop
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	0800dc28 	.word	0x0800dc28

0800c544 <SubghzApp_Tx>:

void SubghzApp_Tx(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	af00      	add	r7, sp, #0
	// Byte 9 : identité de l'émetteur (0, 1 ou 2)
	buffer[9] = sender_id;
 800c548:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <SubghzApp_Tx+0x34>)
 800c54a:	781a      	ldrb	r2, [r3, #0]
 800c54c:	4b0b      	ldr	r3, [pc, #44]	@ (800c57c <SubghzApp_Tx+0x38>)
 800c54e:	725a      	strb	r2, [r3, #9]

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800c550:	2200      	movs	r2, #0
 800c552:	2104      	movs	r1, #4
 800c554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c558:	f7f7 fe81 	bl	800425e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800c55c:	2200      	movs	r2, #0
 800c55e:	2108      	movs	r1, #8
 800c560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c564:	f7f7 fe7b 	bl	800425e <HAL_GPIO_WritePin>

	Radio.Send(buffer, sizeof(buffer));
 800c568:	4b05      	ldr	r3, [pc, #20]	@ (800c580 <SubghzApp_Tx+0x3c>)
 800c56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c56c:	2118      	movs	r1, #24
 800c56e:	4803      	ldr	r0, [pc, #12]	@ (800c57c <SubghzApp_Tx+0x38>)
 800c570:	4798      	blx	r3
}
 800c572:	bf00      	nop
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20000588 	.word	0x20000588
 800c57c:	20000564 	.word	0x20000564
 800c580:	0800dc28 	.word	0x0800dc28

0800c584 <SubghzApp_UART_RxDone>:

void SubghzApp_UART_RxDone(uint8_t *rxBuffer, uint16_t rxLen)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	807b      	strh	r3, [r7, #2]
	// Validate input parameters
	if (rxBuffer == NULL || rxLen == 0) {
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d02f      	beq.n	800c5f6 <SubghzApp_UART_RxDone+0x72>
 800c596:	887b      	ldrh	r3, [r7, #2]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d02c      	beq.n	800c5f6 <SubghzApp_UART_RxDone+0x72>
		return;
	}

	if(rxLen >= 5 && rxBuffer[0] == 0x02)
 800c59c:	887b      	ldrh	r3, [r7, #2]
 800c59e:	2b04      	cmp	r3, #4
 800c5a0:	d908      	bls.n	800c5b4 <SubghzApp_UART_RxDone+0x30>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d104      	bne.n	800c5b4 <SubghzApp_UART_RxDone+0x30>
	{
		// Réglage seuil défaut
		seuil = rxBuffer[1];
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	785a      	ldrb	r2, [r3, #1]
 800c5ae:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <SubghzApp_UART_RxDone+0x80>)
 800c5b0:	701a      	strb	r2, [r3, #0]
		return;
 800c5b2:	e023      	b.n	800c5fc <SubghzApp_UART_RxDone+0x78>
	}

	if(rxLen >= 5 && rxBuffer[0] == 0x71)
 800c5b4:	887b      	ldrh	r3, [r7, #2]
 800c5b6:	2b04      	cmp	r3, #4
 800c5b8:	d920      	bls.n	800c5fc <SubghzApp_UART_RxDone+0x78>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b71      	cmp	r3, #113	@ 0x71
 800c5c0:	d11c      	bne.n	800c5fc <SubghzApp_UART_RxDone+0x78>
	{
		// Resultat de l'opération "GET"
		// Verify pointer is valid before copying
		if (redeem_USART_ptr != NULL && redeem_USART_length > 0 && 
 800c5c2:	4b11      	ldr	r3, [pc, #68]	@ (800c608 <SubghzApp_UART_RxDone+0x84>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d017      	beq.n	800c5fa <SubghzApp_UART_RxDone+0x76>
 800c5ca:	4b10      	ldr	r3, [pc, #64]	@ (800c60c <SubghzApp_UART_RxDone+0x88>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	dd13      	ble.n	800c5fa <SubghzApp_UART_RxDone+0x76>
				redeem_USART_length <= (int)(rxLen - 1)) {
 800c5d2:	887a      	ldrh	r2, [r7, #2]
 800c5d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c60c <SubghzApp_UART_RxDone+0x88>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
		if (redeem_USART_ptr != NULL && redeem_USART_length > 0 && 
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	dd0e      	ble.n	800c5fa <SubghzApp_UART_RxDone+0x76>
			memcpy(redeem_USART_ptr, rxBuffer + 1, redeem_USART_length);
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c608 <SubghzApp_UART_RxDone+0x84>)
 800c5de:	6818      	ldr	r0, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	4a09      	ldr	r2, [pc, #36]	@ (800c60c <SubghzApp_UART_RxDone+0x88>)
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f000 fbed 	bl	800cdc8 <memcpy>
			redeem_done = 1;
 800c5ee:	4b08      	ldr	r3, [pc, #32]	@ (800c610 <SubghzApp_UART_RxDone+0x8c>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]
		}
		return;
 800c5f4:	e001      	b.n	800c5fa <SubghzApp_UART_RxDone+0x76>
		return;
 800c5f6:	bf00      	nop
 800c5f8:	e000      	b.n	800c5fc <SubghzApp_UART_RxDone+0x78>
		return;
 800c5fa:	bf00      	nop
	}
}
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	2000057c 	.word	0x2000057c
 800c608:	20000580 	.word	0x20000580
 800c60c:	20000584 	.word	0x20000584
 800c610:	2000006c 	.word	0x2000006c

0800c614 <SubghzApp_ValueError>:

void SubghzApp_ValueError(uint8_t errors)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	4603      	mov	r3, r0
 800c61c:	71fb      	strb	r3, [r7, #7]
	if(errors != past_errors)
 800c61e:	4b3f      	ldr	r3, [pc, #252]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	79fa      	ldrb	r2, [r7, #7]
 800c624:	429a      	cmp	r2, r3
 800c626:	d074      	beq.n	800c712 <SubghzApp_ValueError+0xfe>
	{
		NEXTION_SendCommand("history.t6.txt=history.t5.txt");
 800c628:	483d      	ldr	r0, [pc, #244]	@ (800c720 <SubghzApp_ValueError+0x10c>)
 800c62a:	f7f5 f87f 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t5.txt=history.t4.txt");
 800c62e:	483d      	ldr	r0, [pc, #244]	@ (800c724 <SubghzApp_ValueError+0x110>)
 800c630:	f7f5 f87c 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t4.txt=history.t3.txt");
 800c634:	483c      	ldr	r0, [pc, #240]	@ (800c728 <SubghzApp_ValueError+0x114>)
 800c636:	f7f5 f879 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t3.txt=history.t2.txt");
 800c63a:	483c      	ldr	r0, [pc, #240]	@ (800c72c <SubghzApp_ValueError+0x118>)
 800c63c:	f7f5 f876 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t2.txt=history.t1.txt");
 800c640:	483b      	ldr	r0, [pc, #236]	@ (800c730 <SubghzApp_ValueError+0x11c>)
 800c642:	f7f5 f873 	bl	800172c <NEXTION_SendCommand>

		NEXTION_SendCommand("covx rtc2,history.buffer.txt,0,0");
 800c646:	483b      	ldr	r0, [pc, #236]	@ (800c734 <SubghzApp_ValueError+0x120>)
 800c648:	f7f5 f870 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt=\"Le \"+history.buffer.txt+\"/\"");
 800c64c:	483a      	ldr	r0, [pc, #232]	@ (800c738 <SubghzApp_ValueError+0x124>)
 800c64e:	f7f5 f86d 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc1,history.buffer.txt,0,0");
 800c652:	483a      	ldr	r0, [pc, #232]	@ (800c73c <SubghzApp_ValueError+0x128>)
 800c654:	f7f5 f86a 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\" a \"");
 800c658:	4839      	ldr	r0, [pc, #228]	@ (800c740 <SubghzApp_ValueError+0x12c>)
 800c65a:	f7f5 f867 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc3,history.buffer.txt,0,0");
 800c65e:	4839      	ldr	r0, [pc, #228]	@ (800c744 <SubghzApp_ValueError+0x130>)
 800c660:	f7f5 f864 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\":\"");
 800c664:	4838      	ldr	r0, [pc, #224]	@ (800c748 <SubghzApp_ValueError+0x134>)
 800c666:	f7f5 f861 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc4,history.buffer.txt,0,0");
 800c66a:	4838      	ldr	r0, [pc, #224]	@ (800c74c <SubghzApp_ValueError+0x138>)
 800c66c:	f7f5 f85e 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\":\"");
 800c670:	4835      	ldr	r0, [pc, #212]	@ (800c748 <SubghzApp_ValueError+0x134>)
 800c672:	f7f5 f85b 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc5,history.buffer.txt,0,0");
 800c676:	4836      	ldr	r0, [pc, #216]	@ (800c750 <SubghzApp_ValueError+0x13c>)
 800c678:	f7f5 f858 	bl	800172c <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\" : \"");
 800c67c:	4835      	ldr	r0, [pc, #212]	@ (800c754 <SubghzApp_ValueError+0x140>)
 800c67e:	f7f5 f855 	bl	800172c <NEXTION_SendCommand>

		if(errors >> 4 == 1 && past_errors >> 4 == 0)
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	091b      	lsrs	r3, r3, #4
 800c686:	b2db      	uxtb	r3, r3
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d108      	bne.n	800c69e <SubghzApp_ValueError+0x8a>
 800c68c:	4b23      	ldr	r3, [pc, #140]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	091b      	lsrs	r3, r3, #4
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <SubghzApp_ValueError+0x8a>
		{
			// Alarme radio
			NEXTION_SendCommand("history.t1.txt+=\"radio,\"");
 800c698:	482f      	ldr	r0, [pc, #188]	@ (800c758 <SubghzApp_ValueError+0x144>)
 800c69a:	f7f5 f847 	bl	800172c <NEXTION_SendCommand>
		}
		if(errors >> 3 == 1 && past_errors >> 3 == 0)
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	08db      	lsrs	r3, r3, #3
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d108      	bne.n	800c6ba <SubghzApp_ValueError+0xa6>
 800c6a8:	4b1c      	ldr	r3, [pc, #112]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	08db      	lsrs	r3, r3, #3
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d102      	bne.n	800c6ba <SubghzApp_ValueError+0xa6>
		{
			// Alarme secheur
			NEXTION_SendCommand("history.t1.txt+=\"secheur,\"");
 800c6b4:	4829      	ldr	r0, [pc, #164]	@ (800c75c <SubghzApp_ValueError+0x148>)
 800c6b6:	f7f5 f839 	bl	800172c <NEXTION_SendCommand>
		}
		if(errors >> 2 == 1 && past_errors >> 2 == 0)
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	089b      	lsrs	r3, r3, #2
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d108      	bne.n	800c6d6 <SubghzApp_ValueError+0xc2>
 800c6c4:	4b15      	ldr	r3, [pc, #84]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	089b      	lsrs	r3, r3, #2
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d102      	bne.n	800c6d6 <SubghzApp_ValueError+0xc2>
		{
			// Alarme gaz
			NEXTION_SendCommand("history.t1.txt+=\"gaz,\"");
 800c6d0:	4823      	ldr	r0, [pc, #140]	@ (800c760 <SubghzApp_ValueError+0x14c>)
 800c6d2:	f7f5 f82b 	bl	800172c <NEXTION_SendCommand>
		}
		if(errors >> 1 == 1 && past_errors >> 1 == 0)
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	085b      	lsrs	r3, r3, #1
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d108      	bne.n	800c6f2 <SubghzApp_ValueError+0xde>
 800c6e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	085b      	lsrs	r3, r3, #1
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d102      	bne.n	800c6f2 <SubghzApp_ValueError+0xde>
		{
			// Alarme casier
			NEXTION_SendCommand("history.t1.txt+=\"casier,\"");
 800c6ec:	481d      	ldr	r0, [pc, #116]	@ (800c764 <SubghzApp_ValueError+0x150>)
 800c6ee:	f7f5 f81d 	bl	800172c <NEXTION_SendCommand>
		}
		if(errors >> 0 == 1 && past_errors >> 0 == 0)
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d106      	bne.n	800c706 <SubghzApp_ValueError+0xf2>
 800c6f8:	4b08      	ldr	r3, [pc, #32]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <SubghzApp_ValueError+0xf2>
		{
			// Alarme pression
			NEXTION_SendCommand("history.t1.txt+=\"pression,\"");
 800c700:	4819      	ldr	r0, [pc, #100]	@ (800c768 <SubghzApp_ValueError+0x154>)
 800c702:	f7f5 f813 	bl	800172c <NEXTION_SendCommand>
		}
		NEXTION_SendCommand("history.t1.txt-=1");
 800c706:	4819      	ldr	r0, [pc, #100]	@ (800c76c <SubghzApp_ValueError+0x158>)
 800c708:	f7f5 f810 	bl	800172c <NEXTION_SendCommand>

		past_errors = errors;
 800c70c:	4a03      	ldr	r2, [pc, #12]	@ (800c71c <SubghzApp_ValueError+0x108>)
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	7013      	strb	r3, [r2, #0]
	}
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000057d 	.word	0x2000057d
 800c720:	0800d878 	.word	0x0800d878
 800c724:	0800d898 	.word	0x0800d898
 800c728:	0800d8b8 	.word	0x0800d8b8
 800c72c:	0800d8d8 	.word	0x0800d8d8
 800c730:	0800d8f8 	.word	0x0800d8f8
 800c734:	0800d918 	.word	0x0800d918
 800c738:	0800d93c 	.word	0x0800d93c
 800c73c:	0800d968 	.word	0x0800d968
 800c740:	0800d98c 	.word	0x0800d98c
 800c744:	0800d9b8 	.word	0x0800d9b8
 800c748:	0800d9dc 	.word	0x0800d9dc
 800c74c:	0800da04 	.word	0x0800da04
 800c750:	0800da28 	.word	0x0800da28
 800c754:	0800da4c 	.word	0x0800da4c
 800c758:	0800da78 	.word	0x0800da78
 800c75c:	0800da94 	.word	0x0800da94
 800c760:	0800dab0 	.word	0x0800dab0
 800c764:	0800dac8 	.word	0x0800dac8
 800c768:	0800dae4 	.word	0x0800dae4
 800c76c:	0800db00 	.word	0x0800db00

0800c770 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c77a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	bc80      	pop	{r7}
 800c784:	4770      	bx	lr

0800c786 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	4603      	mov	r3, r0
 800c78e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	60fb      	str	r3, [r7, #12]
   * Single-pin RF switch control:
   *  - FE_CTRL = 1 selects TX High-Power path (RFO_HP)
   *  - FE_CTRL = 0 selects RX path
   *  - No dedicated LP path on this design (RFO_LP -> treat as RX idle)
   */
  switch (Config)
 800c794:	79fb      	ldrb	r3, [r7, #7]
 800c796:	2b03      	cmp	r3, #3
 800c798:	d106      	bne.n	800c7a8 <RBI_ConfigRFSwitch+0x22>
  {
    case RBI_SWITCH_RFO_HP:
      HAL_GPIO_WritePin(FE_CTRL_GPIO_Port, FE_CTRL_Pin, GPIO_PIN_SET);
 800c79a:	2201      	movs	r2, #1
 800c79c:	2140      	movs	r1, #64	@ 0x40
 800c79e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c7a2:	f7f7 fd5c 	bl	800425e <HAL_GPIO_WritePin>
      break;
 800c7a6:	e006      	b.n	800c7b6 <RBI_ConfigRFSwitch+0x30>
    case RBI_SWITCH_RX:
    case RBI_SWITCH_RFO_LP:
    case RBI_SWITCH_OFF:
    default:
      HAL_GPIO_WritePin(FE_CTRL_GPIO_Port, FE_CTRL_Pin, GPIO_PIN_RESET);
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2140      	movs	r1, #64	@ 0x40
 800c7ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c7b0:	f7f7 fd55 	bl	800425e <HAL_GPIO_WritePin>
      break;
 800c7b4:	bf00      	nop
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO_HP;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800c7ca:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bc80      	pop	{r7}
 800c7d4:	4770      	bx	lr

0800c7d6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800c7e0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bc80      	pop	{r7}
 800c7ea:	4770      	bx	lr

0800c7ec <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800c7f6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bc80      	pop	{r7}
 800c800:	4770      	bx	lr

0800c802 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c802:	b480      	push	{r7}
 800c804:	b085      	sub	sp, #20
 800c806:	af00      	add	r7, sp, #0
 800c808:	4603      	mov	r3, r0
 800c80a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800c810:	79fb      	ldrb	r3, [r7, #7]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d102      	bne.n	800c81c <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800c816:	230f      	movs	r3, #15
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	e001      	b.n	800c820 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800c81c:	2316      	movs	r3, #22
 800c81e:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c820:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	bc80      	pop	{r7}
 800c82a:	4770      	bx	lr

0800c82c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	4613      	mov	r3, r2
 800c838:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c842:	e007      	b.n	800c854 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	1c53      	adds	r3, r2, #1
 800c848:	613b      	str	r3, [r7, #16]
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	1c59      	adds	r1, r3, #1
 800c84e:	6179      	str	r1, [r7, #20]
 800c850:	7812      	ldrb	r2, [r2, #0]
 800c852:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c854:	88fb      	ldrh	r3, [r7, #6]
 800c856:	1e5a      	subs	r2, r3, #1
 800c858:	80fa      	strh	r2, [r7, #6]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1f2      	bne.n	800c844 <UTIL_MEM_cpy_8+0x18>
    }
}
 800c85e:	bf00      	nop
 800c860:	bf00      	nop
 800c862:	371c      	adds	r7, #28
 800c864:	46bd      	mov	sp, r7
 800c866:	bc80      	pop	{r7}
 800c868:	4770      	bx	lr

0800c86a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	460b      	mov	r3, r1
 800c874:	70fb      	strb	r3, [r7, #3]
 800c876:	4613      	mov	r3, r2
 800c878:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c87e:	e004      	b.n	800c88a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	60fa      	str	r2, [r7, #12]
 800c886:	78fa      	ldrb	r2, [r7, #3]
 800c888:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c88a:	883b      	ldrh	r3, [r7, #0]
 800c88c:	1e5a      	subs	r2, r3, #1
 800c88e:	803a      	strh	r2, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1f5      	bne.n	800c880 <UTIL_MEM_set_8+0x16>
  }
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bc80      	pop	{r7}
 800c89e:	4770      	bx	lr

0800c8a0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d023      	beq.n	800c8fe <UTIL_TIMER_Create+0x5e>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d020      	beq.n	800c8fe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c8c2:	4b11      	ldr	r3, [pc, #68]	@ (800c908 <UTIL_TIMER_Create+0x68>)
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c6:	68b8      	ldr	r0, [r7, #8]
 800c8c8:	4798      	blx	r3
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	79fa      	ldrb	r2, [r7, #7]
 800c8f2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e000      	b.n	800c900 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c8fe:	2301      	movs	r3, #1
  }
}
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	0800dbb4 	.word	0x0800dbb4

0800c90c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08a      	sub	sp, #40	@ 0x28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d056      	beq.n	800c9ce <UTIL_TIMER_Start+0xc2>
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f929 	bl	800cb78 <TimerExists>
 800c926:	4603      	mov	r3, r0
 800c928:	f083 0301 	eor.w	r3, r3, #1
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d04d      	beq.n	800c9ce <UTIL_TIMER_Start+0xc2>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	7a5b      	ldrb	r3, [r3, #9]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d149      	bne.n	800c9ce <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93a:	f3ef 8310 	mrs	r3, PRIMASK
 800c93e:	613b      	str	r3, [r7, #16]
  return(result);
 800c940:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c944:	b672      	cpsid	i
}
 800c946:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c94e:	4b24      	ldr	r3, [pc, #144]	@ (800c9e0 <UTIL_TIMER_Start+0xd4>)
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	4798      	blx	r3
 800c954:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c956:	6a3a      	ldr	r2, [r7, #32]
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d201      	bcs.n	800c962 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a3a      	ldr	r2, [r7, #32]
 800c966:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c97a:	4b1a      	ldr	r3, [pc, #104]	@ (800c9e4 <UTIL_TIMER_Start+0xd8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c982:	4b17      	ldr	r3, [pc, #92]	@ (800c9e0 <UTIL_TIMER_Start+0xd4>)
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 f96b 	bl	800cc64 <TimerInsertNewHeadTimer>
 800c98e:	e017      	b.n	800c9c0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c990:	4b13      	ldr	r3, [pc, #76]	@ (800c9e0 <UTIL_TIMER_Start+0xd4>)
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	4798      	blx	r3
 800c996:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	441a      	add	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e4 <UTIL_TIMER_Start+0xd8>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d203      	bcs.n	800c9ba <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f956 	bl	800cc64 <TimerInsertNewHeadTimer>
 800c9b8:	e002      	b.n	800c9c0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f922 	bl	800cc04 <TimerInsertTimer>
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ca:	bf00      	nop
  {
 800c9cc:	e002      	b.n	800c9d4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3728      	adds	r7, #40	@ 0x28
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	0800dbb4 	.word	0x0800dbb4
 800c9e4:	20000590 	.word	0x20000590

0800c9e8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d05b      	beq.n	800cab2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca00:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ca02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca04:	b672      	cpsid	i
}
 800ca06:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800ca08:	4b2d      	ldr	r3, [pc, #180]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800ca0e:	4b2c      	ldr	r3, [pc, #176]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800ca1a:	4b29      	ldr	r3, [pc, #164]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d041      	beq.n	800caa6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800ca28:	4b25      	ldr	r3, [pc, #148]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d134      	bne.n	800ca9c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800ca32:	4b23      	ldr	r3, [pc, #140]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2200      	movs	r2, #0
 800ca38:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800ca3a:	4b21      	ldr	r3, [pc, #132]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800ca44:	4b1e      	ldr	r3, [pc, #120]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	4a1d      	ldr	r2, [pc, #116]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca4c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800ca4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 f8ac 	bl	800cbb0 <TimerSetTimeout>
 800ca58:	e023      	b.n	800caa2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800ca5a:	4b1a      	ldr	r3, [pc, #104]	@ (800cac4 <UTIL_TIMER_Stop+0xdc>)
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	4798      	blx	r3
            TimerListHead = NULL;
 800ca60:	4b17      	ldr	r3, [pc, #92]	@ (800cac0 <UTIL_TIMER_Stop+0xd8>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	e01c      	b.n	800caa2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d110      	bne.n	800ca92 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d006      	beq.n	800ca86 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	695b      	ldr	r3, [r3, #20]
 800ca7c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	697a      	ldr	r2, [r7, #20]
 800ca82:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ca84:	e00d      	b.n	800caa2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	615a      	str	r2, [r3, #20]
            break;
 800ca90:	e007      	b.n	800caa2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1e2      	bne.n	800ca68 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	77fb      	strb	r3, [r7, #31]
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	f383 8810 	msr	PRIMASK, r3
}
 800cab0:	e001      	b.n	800cab6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800cab2:	2301      	movs	r3, #1
 800cab4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800cab6:	7ffb      	ldrb	r3, [r7, #31]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	20000590 	.word	0x20000590
 800cac4:	0800dbb4 	.word	0x0800dbb4

0800cac8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d102      	bne.n	800cae2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800cadc:	2301      	movs	r3, #1
 800cade:	73fb      	strb	r3, [r7, #15]
 800cae0:	e014      	b.n	800cb0c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800cae2:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <UTIL_TIMER_SetPeriod+0x50>)
 800cae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	4798      	blx	r3
 800caea:	4602      	mov	r2, r0
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f841 	bl	800cb78 <TimerExists>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d007      	beq.n	800cb0c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7ff ff73 	bl	800c9e8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff ff02 	bl	800c90c <UTIL_TIMER_Start>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	0800dbb4 	.word	0x0800dbb4

0800cb1c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800cb22:	4b06      	ldr	r3, [pc, #24]	@ (800cb3c <UTIL_TIMER_GetCurrentTime+0x20>)
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	4798      	blx	r3
 800cb28:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800cb2a:	4b04      	ldr	r3, [pc, #16]	@ (800cb3c <UTIL_TIMER_GetCurrentTime+0x20>)
 800cb2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	4798      	blx	r3
 800cb32:	4603      	mov	r3, r0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	0800dbb4 	.word	0x0800dbb4

0800cb40 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cb48:	4b0a      	ldr	r3, [pc, #40]	@ (800cb74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cb4a:	69db      	ldr	r3, [r3, #28]
 800cb4c:	4798      	blx	r3
 800cb4e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cb50:	4b08      	ldr	r3, [pc, #32]	@ (800cb74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	4798      	blx	r3
 800cb58:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800cb5a:	4b06      	ldr	r3, [pc, #24]	@ (800cb74 <UTIL_TIMER_GetElapsedTime+0x34>)
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5e:	68f9      	ldr	r1, [r7, #12]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	1a8a      	subs	r2, r1, r2
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
 800cb68:	4603      	mov	r3, r0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	0800dbb4 	.word	0x0800dbb4

0800cb78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cb80:	4b0a      	ldr	r3, [pc, #40]	@ (800cbac <TimerExists+0x34>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800cb86:	e008      	b.n	800cb9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d101      	bne.n	800cb94 <TimerExists+0x1c>
    {
      return true;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e006      	b.n	800cba2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	695b      	ldr	r3, [r3, #20]
 800cb98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1f3      	bne.n	800cb88 <TimerExists+0x10>
  }
  return false;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bc80      	pop	{r7}
 800cbaa:	4770      	bx	lr
 800cbac:	20000590 	.word	0x20000590

0800cbb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cbb8:	4b11      	ldr	r3, [pc, #68]	@ (800cc00 <TimerSetTimeout+0x50>)
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	4798      	blx	r3
 800cbbe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681c      	ldr	r4, [r3, #0]
 800cbca:	4b0d      	ldr	r3, [pc, #52]	@ (800cc00 <TimerSetTimeout+0x50>)
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	4798      	blx	r3
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d207      	bcs.n	800cbea <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800cbda:	4b09      	ldr	r3, [pc, #36]	@ (800cc00 <TimerSetTimeout+0x50>)
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	4798      	blx	r3
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800cbea:	4b05      	ldr	r3, [pc, #20]	@ (800cc00 <TimerSetTimeout+0x50>)
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	6812      	ldr	r2, [r2, #0]
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	4798      	blx	r3
}
 800cbf6:	bf00      	nop
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd90      	pop	{r4, r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	0800dbb4 	.word	0x0800dbb4

0800cc04 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cc0c:	4b14      	ldr	r3, [pc, #80]	@ (800cc60 <TimerInsertTimer+0x5c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800cc12:	4b13      	ldr	r3, [pc, #76]	@ (800cc60 <TimerInsertTimer+0x5c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	695b      	ldr	r3, [r3, #20]
 800cc18:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cc1a:	e012      	b.n	800cc42 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d905      	bls.n	800cc34 <TimerInsertTimer+0x30>
    {
        cur = next;
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	695b      	ldr	r3, [r3, #20]
 800cc30:	60bb      	str	r3, [r7, #8]
 800cc32:	e006      	b.n	800cc42 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	68ba      	ldr	r2, [r7, #8]
 800cc3e:	615a      	str	r2, [r3, #20]
        return;
 800cc40:	e009      	b.n	800cc56 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1e8      	bne.n	800cc1c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	615a      	str	r2, [r3, #20]
}
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bc80      	pop	{r7}
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	20000590 	.word	0x20000590

0800cc64 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cc6c:	4b0b      	ldr	r3, [pc, #44]	@ (800cc9c <TimerInsertNewHeadTimer+0x38>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800cc84:	4a05      	ldr	r2, [pc, #20]	@ (800cc9c <TimerInsertNewHeadTimer+0x38>)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800cc8a:	4b04      	ldr	r3, [pc, #16]	@ (800cc9c <TimerInsertNewHeadTimer+0x38>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff ff8e 	bl	800cbb0 <TimerSetTimeout>
}
 800cc94:	bf00      	nop
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20000590 	.word	0x20000590

0800cca0 <sniprintf>:
 800cca0:	b40c      	push	{r2, r3}
 800cca2:	b530      	push	{r4, r5, lr}
 800cca4:	4b18      	ldr	r3, [pc, #96]	@ (800cd08 <sniprintf+0x68>)
 800cca6:	1e0c      	subs	r4, r1, #0
 800cca8:	681d      	ldr	r5, [r3, #0]
 800ccaa:	b09d      	sub	sp, #116	@ 0x74
 800ccac:	da08      	bge.n	800ccc0 <sniprintf+0x20>
 800ccae:	238b      	movs	r3, #139	@ 0x8b
 800ccb0:	602b      	str	r3, [r5, #0]
 800ccb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb6:	b01d      	add	sp, #116	@ 0x74
 800ccb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccbc:	b002      	add	sp, #8
 800ccbe:	4770      	bx	lr
 800ccc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ccc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ccc8:	f04f 0300 	mov.w	r3, #0
 800cccc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ccce:	bf14      	ite	ne
 800ccd0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ccd4:	4623      	moveq	r3, r4
 800ccd6:	9304      	str	r3, [sp, #16]
 800ccd8:	9307      	str	r3, [sp, #28]
 800ccda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccde:	9002      	str	r0, [sp, #8]
 800cce0:	9006      	str	r0, [sp, #24]
 800cce2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cce6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cce8:	ab21      	add	r3, sp, #132	@ 0x84
 800ccea:	a902      	add	r1, sp, #8
 800ccec:	4628      	mov	r0, r5
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	f000 f9cc 	bl	800d08c <_svfiprintf_r>
 800ccf4:	1c43      	adds	r3, r0, #1
 800ccf6:	bfbc      	itt	lt
 800ccf8:	238b      	movlt	r3, #139	@ 0x8b
 800ccfa:	602b      	strlt	r3, [r5, #0]
 800ccfc:	2c00      	cmp	r4, #0
 800ccfe:	d0da      	beq.n	800ccb6 <sniprintf+0x16>
 800cd00:	9b02      	ldr	r3, [sp, #8]
 800cd02:	2200      	movs	r2, #0
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e7d6      	b.n	800ccb6 <sniprintf+0x16>
 800cd08:	20000074 	.word	0x20000074

0800cd0c <memcmp>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	3901      	subs	r1, #1
 800cd10:	4402      	add	r2, r0
 800cd12:	4290      	cmp	r0, r2
 800cd14:	d101      	bne.n	800cd1a <memcmp+0xe>
 800cd16:	2000      	movs	r0, #0
 800cd18:	e005      	b.n	800cd26 <memcmp+0x1a>
 800cd1a:	7803      	ldrb	r3, [r0, #0]
 800cd1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	d001      	beq.n	800cd28 <memcmp+0x1c>
 800cd24:	1b18      	subs	r0, r3, r4
 800cd26:	bd10      	pop	{r4, pc}
 800cd28:	3001      	adds	r0, #1
 800cd2a:	e7f2      	b.n	800cd12 <memcmp+0x6>

0800cd2c <memmove>:
 800cd2c:	4288      	cmp	r0, r1
 800cd2e:	b510      	push	{r4, lr}
 800cd30:	eb01 0402 	add.w	r4, r1, r2
 800cd34:	d902      	bls.n	800cd3c <memmove+0x10>
 800cd36:	4284      	cmp	r4, r0
 800cd38:	4623      	mov	r3, r4
 800cd3a:	d807      	bhi.n	800cd4c <memmove+0x20>
 800cd3c:	1e43      	subs	r3, r0, #1
 800cd3e:	42a1      	cmp	r1, r4
 800cd40:	d008      	beq.n	800cd54 <memmove+0x28>
 800cd42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd4a:	e7f8      	b.n	800cd3e <memmove+0x12>
 800cd4c:	4402      	add	r2, r0
 800cd4e:	4601      	mov	r1, r0
 800cd50:	428a      	cmp	r2, r1
 800cd52:	d100      	bne.n	800cd56 <memmove+0x2a>
 800cd54:	bd10      	pop	{r4, pc}
 800cd56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd5e:	e7f7      	b.n	800cd50 <memmove+0x24>

0800cd60 <memset>:
 800cd60:	4402      	add	r2, r0
 800cd62:	4603      	mov	r3, r0
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d100      	bne.n	800cd6a <memset+0xa>
 800cd68:	4770      	bx	lr
 800cd6a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd6e:	e7f9      	b.n	800cd64 <memset+0x4>

0800cd70 <__errno>:
 800cd70:	4b01      	ldr	r3, [pc, #4]	@ (800cd78 <__errno+0x8>)
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20000074 	.word	0x20000074

0800cd7c <__libc_init_array>:
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	4d0d      	ldr	r5, [pc, #52]	@ (800cdb4 <__libc_init_array+0x38>)
 800cd80:	4c0d      	ldr	r4, [pc, #52]	@ (800cdb8 <__libc_init_array+0x3c>)
 800cd82:	1b64      	subs	r4, r4, r5
 800cd84:	10a4      	asrs	r4, r4, #2
 800cd86:	2600      	movs	r6, #0
 800cd88:	42a6      	cmp	r6, r4
 800cd8a:	d109      	bne.n	800cda0 <__libc_init_array+0x24>
 800cd8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cdbc <__libc_init_array+0x40>)
 800cd8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cdc0 <__libc_init_array+0x44>)
 800cd90:	f000 fc4a 	bl	800d628 <_init>
 800cd94:	1b64      	subs	r4, r4, r5
 800cd96:	10a4      	asrs	r4, r4, #2
 800cd98:	2600      	movs	r6, #0
 800cd9a:	42a6      	cmp	r6, r4
 800cd9c:	d105      	bne.n	800cdaa <__libc_init_array+0x2e>
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cda4:	4798      	blx	r3
 800cda6:	3601      	adds	r6, #1
 800cda8:	e7ee      	b.n	800cd88 <__libc_init_array+0xc>
 800cdaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdae:	4798      	blx	r3
 800cdb0:	3601      	adds	r6, #1
 800cdb2:	e7f2      	b.n	800cd9a <__libc_init_array+0x1e>
 800cdb4:	0800dda4 	.word	0x0800dda4
 800cdb8:	0800dda4 	.word	0x0800dda4
 800cdbc:	0800dda4 	.word	0x0800dda4
 800cdc0:	0800dda8 	.word	0x0800dda8

0800cdc4 <__retarget_lock_acquire_recursive>:
 800cdc4:	4770      	bx	lr

0800cdc6 <__retarget_lock_release_recursive>:
 800cdc6:	4770      	bx	lr

0800cdc8 <memcpy>:
 800cdc8:	440a      	add	r2, r1
 800cdca:	4291      	cmp	r1, r2
 800cdcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdd0:	d100      	bne.n	800cdd4 <memcpy+0xc>
 800cdd2:	4770      	bx	lr
 800cdd4:	b510      	push	{r4, lr}
 800cdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdde:	4291      	cmp	r1, r2
 800cde0:	d1f9      	bne.n	800cdd6 <memcpy+0xe>
 800cde2:	bd10      	pop	{r4, pc}

0800cde4 <_free_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4605      	mov	r5, r0
 800cde8:	2900      	cmp	r1, #0
 800cdea:	d041      	beq.n	800ce70 <_free_r+0x8c>
 800cdec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdf0:	1f0c      	subs	r4, r1, #4
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	bfb8      	it	lt
 800cdf6:	18e4      	addlt	r4, r4, r3
 800cdf8:	f000 f8e0 	bl	800cfbc <__malloc_lock>
 800cdfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ce74 <_free_r+0x90>)
 800cdfe:	6813      	ldr	r3, [r2, #0]
 800ce00:	b933      	cbnz	r3, 800ce10 <_free_r+0x2c>
 800ce02:	6063      	str	r3, [r4, #4]
 800ce04:	6014      	str	r4, [r2, #0]
 800ce06:	4628      	mov	r0, r5
 800ce08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce0c:	f000 b8dc 	b.w	800cfc8 <__malloc_unlock>
 800ce10:	42a3      	cmp	r3, r4
 800ce12:	d908      	bls.n	800ce26 <_free_r+0x42>
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	1821      	adds	r1, r4, r0
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	bf01      	itttt	eq
 800ce1c:	6819      	ldreq	r1, [r3, #0]
 800ce1e:	685b      	ldreq	r3, [r3, #4]
 800ce20:	1809      	addeq	r1, r1, r0
 800ce22:	6021      	streq	r1, [r4, #0]
 800ce24:	e7ed      	b.n	800ce02 <_free_r+0x1e>
 800ce26:	461a      	mov	r2, r3
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	b10b      	cbz	r3, 800ce30 <_free_r+0x4c>
 800ce2c:	42a3      	cmp	r3, r4
 800ce2e:	d9fa      	bls.n	800ce26 <_free_r+0x42>
 800ce30:	6811      	ldr	r1, [r2, #0]
 800ce32:	1850      	adds	r0, r2, r1
 800ce34:	42a0      	cmp	r0, r4
 800ce36:	d10b      	bne.n	800ce50 <_free_r+0x6c>
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	4401      	add	r1, r0
 800ce3c:	1850      	adds	r0, r2, r1
 800ce3e:	4283      	cmp	r3, r0
 800ce40:	6011      	str	r1, [r2, #0]
 800ce42:	d1e0      	bne.n	800ce06 <_free_r+0x22>
 800ce44:	6818      	ldr	r0, [r3, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	6053      	str	r3, [r2, #4]
 800ce4a:	4408      	add	r0, r1
 800ce4c:	6010      	str	r0, [r2, #0]
 800ce4e:	e7da      	b.n	800ce06 <_free_r+0x22>
 800ce50:	d902      	bls.n	800ce58 <_free_r+0x74>
 800ce52:	230c      	movs	r3, #12
 800ce54:	602b      	str	r3, [r5, #0]
 800ce56:	e7d6      	b.n	800ce06 <_free_r+0x22>
 800ce58:	6820      	ldr	r0, [r4, #0]
 800ce5a:	1821      	adds	r1, r4, r0
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	bf04      	itt	eq
 800ce60:	6819      	ldreq	r1, [r3, #0]
 800ce62:	685b      	ldreq	r3, [r3, #4]
 800ce64:	6063      	str	r3, [r4, #4]
 800ce66:	bf04      	itt	eq
 800ce68:	1809      	addeq	r1, r1, r0
 800ce6a:	6021      	streq	r1, [r4, #0]
 800ce6c:	6054      	str	r4, [r2, #4]
 800ce6e:	e7ca      	b.n	800ce06 <_free_r+0x22>
 800ce70:	bd38      	pop	{r3, r4, r5, pc}
 800ce72:	bf00      	nop
 800ce74:	200006d8 	.word	0x200006d8

0800ce78 <sbrk_aligned>:
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	4e0f      	ldr	r6, [pc, #60]	@ (800ceb8 <sbrk_aligned+0x40>)
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	6831      	ldr	r1, [r6, #0]
 800ce80:	4605      	mov	r5, r0
 800ce82:	b911      	cbnz	r1, 800ce8a <sbrk_aligned+0x12>
 800ce84:	f000 fb8a 	bl	800d59c <_sbrk_r>
 800ce88:	6030      	str	r0, [r6, #0]
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f000 fb85 	bl	800d59c <_sbrk_r>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d103      	bne.n	800ce9e <sbrk_aligned+0x26>
 800ce96:	f04f 34ff 	mov.w	r4, #4294967295
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}
 800ce9e:	1cc4      	adds	r4, r0, #3
 800cea0:	f024 0403 	bic.w	r4, r4, #3
 800cea4:	42a0      	cmp	r0, r4
 800cea6:	d0f8      	beq.n	800ce9a <sbrk_aligned+0x22>
 800cea8:	1a21      	subs	r1, r4, r0
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f000 fb76 	bl	800d59c <_sbrk_r>
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	d1f2      	bne.n	800ce9a <sbrk_aligned+0x22>
 800ceb4:	e7ef      	b.n	800ce96 <sbrk_aligned+0x1e>
 800ceb6:	bf00      	nop
 800ceb8:	200006d4 	.word	0x200006d4

0800cebc <_malloc_r>:
 800cebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cec0:	1ccd      	adds	r5, r1, #3
 800cec2:	f025 0503 	bic.w	r5, r5, #3
 800cec6:	3508      	adds	r5, #8
 800cec8:	2d0c      	cmp	r5, #12
 800ceca:	bf38      	it	cc
 800cecc:	250c      	movcc	r5, #12
 800cece:	2d00      	cmp	r5, #0
 800ced0:	4606      	mov	r6, r0
 800ced2:	db01      	blt.n	800ced8 <_malloc_r+0x1c>
 800ced4:	42a9      	cmp	r1, r5
 800ced6:	d904      	bls.n	800cee2 <_malloc_r+0x26>
 800ced8:	230c      	movs	r3, #12
 800ceda:	6033      	str	r3, [r6, #0]
 800cedc:	2000      	movs	r0, #0
 800cede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfb8 <_malloc_r+0xfc>
 800cee6:	f000 f869 	bl	800cfbc <__malloc_lock>
 800ceea:	f8d8 3000 	ldr.w	r3, [r8]
 800ceee:	461c      	mov	r4, r3
 800cef0:	bb44      	cbnz	r4, 800cf44 <_malloc_r+0x88>
 800cef2:	4629      	mov	r1, r5
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7ff ffbf 	bl	800ce78 <sbrk_aligned>
 800cefa:	1c43      	adds	r3, r0, #1
 800cefc:	4604      	mov	r4, r0
 800cefe:	d158      	bne.n	800cfb2 <_malloc_r+0xf6>
 800cf00:	f8d8 4000 	ldr.w	r4, [r8]
 800cf04:	4627      	mov	r7, r4
 800cf06:	2f00      	cmp	r7, #0
 800cf08:	d143      	bne.n	800cf92 <_malloc_r+0xd6>
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	d04b      	beq.n	800cfa6 <_malloc_r+0xea>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	4639      	mov	r1, r7
 800cf12:	4630      	mov	r0, r6
 800cf14:	eb04 0903 	add.w	r9, r4, r3
 800cf18:	f000 fb40 	bl	800d59c <_sbrk_r>
 800cf1c:	4581      	cmp	r9, r0
 800cf1e:	d142      	bne.n	800cfa6 <_malloc_r+0xea>
 800cf20:	6821      	ldr	r1, [r4, #0]
 800cf22:	1a6d      	subs	r5, r5, r1
 800cf24:	4629      	mov	r1, r5
 800cf26:	4630      	mov	r0, r6
 800cf28:	f7ff ffa6 	bl	800ce78 <sbrk_aligned>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d03a      	beq.n	800cfa6 <_malloc_r+0xea>
 800cf30:	6823      	ldr	r3, [r4, #0]
 800cf32:	442b      	add	r3, r5
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	f8d8 3000 	ldr.w	r3, [r8]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	bb62      	cbnz	r2, 800cf98 <_malloc_r+0xdc>
 800cf3e:	f8c8 7000 	str.w	r7, [r8]
 800cf42:	e00f      	b.n	800cf64 <_malloc_r+0xa8>
 800cf44:	6822      	ldr	r2, [r4, #0]
 800cf46:	1b52      	subs	r2, r2, r5
 800cf48:	d420      	bmi.n	800cf8c <_malloc_r+0xd0>
 800cf4a:	2a0b      	cmp	r2, #11
 800cf4c:	d917      	bls.n	800cf7e <_malloc_r+0xc2>
 800cf4e:	1961      	adds	r1, r4, r5
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	6025      	str	r5, [r4, #0]
 800cf54:	bf18      	it	ne
 800cf56:	6059      	strne	r1, [r3, #4]
 800cf58:	6863      	ldr	r3, [r4, #4]
 800cf5a:	bf08      	it	eq
 800cf5c:	f8c8 1000 	streq.w	r1, [r8]
 800cf60:	5162      	str	r2, [r4, r5]
 800cf62:	604b      	str	r3, [r1, #4]
 800cf64:	4630      	mov	r0, r6
 800cf66:	f000 f82f 	bl	800cfc8 <__malloc_unlock>
 800cf6a:	f104 000b 	add.w	r0, r4, #11
 800cf6e:	1d23      	adds	r3, r4, #4
 800cf70:	f020 0007 	bic.w	r0, r0, #7
 800cf74:	1ac2      	subs	r2, r0, r3
 800cf76:	bf1c      	itt	ne
 800cf78:	1a1b      	subne	r3, r3, r0
 800cf7a:	50a3      	strne	r3, [r4, r2]
 800cf7c:	e7af      	b.n	800cede <_malloc_r+0x22>
 800cf7e:	6862      	ldr	r2, [r4, #4]
 800cf80:	42a3      	cmp	r3, r4
 800cf82:	bf0c      	ite	eq
 800cf84:	f8c8 2000 	streq.w	r2, [r8]
 800cf88:	605a      	strne	r2, [r3, #4]
 800cf8a:	e7eb      	b.n	800cf64 <_malloc_r+0xa8>
 800cf8c:	4623      	mov	r3, r4
 800cf8e:	6864      	ldr	r4, [r4, #4]
 800cf90:	e7ae      	b.n	800cef0 <_malloc_r+0x34>
 800cf92:	463c      	mov	r4, r7
 800cf94:	687f      	ldr	r7, [r7, #4]
 800cf96:	e7b6      	b.n	800cf06 <_malloc_r+0x4a>
 800cf98:	461a      	mov	r2, r3
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	42a3      	cmp	r3, r4
 800cf9e:	d1fb      	bne.n	800cf98 <_malloc_r+0xdc>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6053      	str	r3, [r2, #4]
 800cfa4:	e7de      	b.n	800cf64 <_malloc_r+0xa8>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f000 f80c 	bl	800cfc8 <__malloc_unlock>
 800cfb0:	e794      	b.n	800cedc <_malloc_r+0x20>
 800cfb2:	6005      	str	r5, [r0, #0]
 800cfb4:	e7d6      	b.n	800cf64 <_malloc_r+0xa8>
 800cfb6:	bf00      	nop
 800cfb8:	200006d8 	.word	0x200006d8

0800cfbc <__malloc_lock>:
 800cfbc:	4801      	ldr	r0, [pc, #4]	@ (800cfc4 <__malloc_lock+0x8>)
 800cfbe:	f7ff bf01 	b.w	800cdc4 <__retarget_lock_acquire_recursive>
 800cfc2:	bf00      	nop
 800cfc4:	200006d0 	.word	0x200006d0

0800cfc8 <__malloc_unlock>:
 800cfc8:	4801      	ldr	r0, [pc, #4]	@ (800cfd0 <__malloc_unlock+0x8>)
 800cfca:	f7ff befc 	b.w	800cdc6 <__retarget_lock_release_recursive>
 800cfce:	bf00      	nop
 800cfd0:	200006d0 	.word	0x200006d0

0800cfd4 <__ssputs_r>:
 800cfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd8:	688e      	ldr	r6, [r1, #8]
 800cfda:	461f      	mov	r7, r3
 800cfdc:	42be      	cmp	r6, r7
 800cfde:	680b      	ldr	r3, [r1, #0]
 800cfe0:	4682      	mov	sl, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	4690      	mov	r8, r2
 800cfe6:	d82d      	bhi.n	800d044 <__ssputs_r+0x70>
 800cfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cff0:	d026      	beq.n	800d040 <__ssputs_r+0x6c>
 800cff2:	6965      	ldr	r5, [r4, #20]
 800cff4:	6909      	ldr	r1, [r1, #16]
 800cff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cffa:	eba3 0901 	sub.w	r9, r3, r1
 800cffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d002:	1c7b      	adds	r3, r7, #1
 800d004:	444b      	add	r3, r9
 800d006:	106d      	asrs	r5, r5, #1
 800d008:	429d      	cmp	r5, r3
 800d00a:	bf38      	it	cc
 800d00c:	461d      	movcc	r5, r3
 800d00e:	0553      	lsls	r3, r2, #21
 800d010:	d527      	bpl.n	800d062 <__ssputs_r+0x8e>
 800d012:	4629      	mov	r1, r5
 800d014:	f7ff ff52 	bl	800cebc <_malloc_r>
 800d018:	4606      	mov	r6, r0
 800d01a:	b360      	cbz	r0, 800d076 <__ssputs_r+0xa2>
 800d01c:	6921      	ldr	r1, [r4, #16]
 800d01e:	464a      	mov	r2, r9
 800d020:	f7ff fed2 	bl	800cdc8 <memcpy>
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d02e:	81a3      	strh	r3, [r4, #12]
 800d030:	6126      	str	r6, [r4, #16]
 800d032:	6165      	str	r5, [r4, #20]
 800d034:	444e      	add	r6, r9
 800d036:	eba5 0509 	sub.w	r5, r5, r9
 800d03a:	6026      	str	r6, [r4, #0]
 800d03c:	60a5      	str	r5, [r4, #8]
 800d03e:	463e      	mov	r6, r7
 800d040:	42be      	cmp	r6, r7
 800d042:	d900      	bls.n	800d046 <__ssputs_r+0x72>
 800d044:	463e      	mov	r6, r7
 800d046:	6820      	ldr	r0, [r4, #0]
 800d048:	4632      	mov	r2, r6
 800d04a:	4641      	mov	r1, r8
 800d04c:	f7ff fe6e 	bl	800cd2c <memmove>
 800d050:	68a3      	ldr	r3, [r4, #8]
 800d052:	1b9b      	subs	r3, r3, r6
 800d054:	60a3      	str	r3, [r4, #8]
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	4433      	add	r3, r6
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	2000      	movs	r0, #0
 800d05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d062:	462a      	mov	r2, r5
 800d064:	f000 faaa 	bl	800d5bc <_realloc_r>
 800d068:	4606      	mov	r6, r0
 800d06a:	2800      	cmp	r0, #0
 800d06c:	d1e0      	bne.n	800d030 <__ssputs_r+0x5c>
 800d06e:	6921      	ldr	r1, [r4, #16]
 800d070:	4650      	mov	r0, sl
 800d072:	f7ff feb7 	bl	800cde4 <_free_r>
 800d076:	230c      	movs	r3, #12
 800d078:	f8ca 3000 	str.w	r3, [sl]
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d082:	81a3      	strh	r3, [r4, #12]
 800d084:	f04f 30ff 	mov.w	r0, #4294967295
 800d088:	e7e9      	b.n	800d05e <__ssputs_r+0x8a>
	...

0800d08c <_svfiprintf_r>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	4698      	mov	r8, r3
 800d092:	898b      	ldrh	r3, [r1, #12]
 800d094:	061b      	lsls	r3, r3, #24
 800d096:	b09d      	sub	sp, #116	@ 0x74
 800d098:	4607      	mov	r7, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	4614      	mov	r4, r2
 800d09e:	d510      	bpl.n	800d0c2 <_svfiprintf_r+0x36>
 800d0a0:	690b      	ldr	r3, [r1, #16]
 800d0a2:	b973      	cbnz	r3, 800d0c2 <_svfiprintf_r+0x36>
 800d0a4:	2140      	movs	r1, #64	@ 0x40
 800d0a6:	f7ff ff09 	bl	800cebc <_malloc_r>
 800d0aa:	6028      	str	r0, [r5, #0]
 800d0ac:	6128      	str	r0, [r5, #16]
 800d0ae:	b930      	cbnz	r0, 800d0be <_svfiprintf_r+0x32>
 800d0b0:	230c      	movs	r3, #12
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b8:	b01d      	add	sp, #116	@ 0x74
 800d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0be:	2340      	movs	r3, #64	@ 0x40
 800d0c0:	616b      	str	r3, [r5, #20]
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0c6:	2320      	movs	r3, #32
 800d0c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d0:	2330      	movs	r3, #48	@ 0x30
 800d0d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d270 <_svfiprintf_r+0x1e4>
 800d0d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d0da:	f04f 0901 	mov.w	r9, #1
 800d0de:	4623      	mov	r3, r4
 800d0e0:	469a      	mov	sl, r3
 800d0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e6:	b10a      	cbz	r2, 800d0ec <_svfiprintf_r+0x60>
 800d0e8:	2a25      	cmp	r2, #37	@ 0x25
 800d0ea:	d1f9      	bne.n	800d0e0 <_svfiprintf_r+0x54>
 800d0ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f0:	d00b      	beq.n	800d10a <_svfiprintf_r+0x7e>
 800d0f2:	465b      	mov	r3, fp
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ff6b 	bl	800cfd4 <__ssputs_r>
 800d0fe:	3001      	adds	r0, #1
 800d100:	f000 80a7 	beq.w	800d252 <_svfiprintf_r+0x1c6>
 800d104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d106:	445a      	add	r2, fp
 800d108:	9209      	str	r2, [sp, #36]	@ 0x24
 800d10a:	f89a 3000 	ldrb.w	r3, [sl]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f000 809f 	beq.w	800d252 <_svfiprintf_r+0x1c6>
 800d114:	2300      	movs	r3, #0
 800d116:	f04f 32ff 	mov.w	r2, #4294967295
 800d11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d11e:	f10a 0a01 	add.w	sl, sl, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	9307      	str	r3, [sp, #28]
 800d126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d12a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d12c:	4654      	mov	r4, sl
 800d12e:	2205      	movs	r2, #5
 800d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d134:	484e      	ldr	r0, [pc, #312]	@ (800d270 <_svfiprintf_r+0x1e4>)
 800d136:	f7f3 f82b 	bl	8000190 <memchr>
 800d13a:	9a04      	ldr	r2, [sp, #16]
 800d13c:	b9d8      	cbnz	r0, 800d176 <_svfiprintf_r+0xea>
 800d13e:	06d0      	lsls	r0, r2, #27
 800d140:	bf44      	itt	mi
 800d142:	2320      	movmi	r3, #32
 800d144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d148:	0711      	lsls	r1, r2, #28
 800d14a:	bf44      	itt	mi
 800d14c:	232b      	movmi	r3, #43	@ 0x2b
 800d14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d152:	f89a 3000 	ldrb.w	r3, [sl]
 800d156:	2b2a      	cmp	r3, #42	@ 0x2a
 800d158:	d015      	beq.n	800d186 <_svfiprintf_r+0xfa>
 800d15a:	9a07      	ldr	r2, [sp, #28]
 800d15c:	4654      	mov	r4, sl
 800d15e:	2000      	movs	r0, #0
 800d160:	f04f 0c0a 	mov.w	ip, #10
 800d164:	4621      	mov	r1, r4
 800d166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d16a:	3b30      	subs	r3, #48	@ 0x30
 800d16c:	2b09      	cmp	r3, #9
 800d16e:	d94b      	bls.n	800d208 <_svfiprintf_r+0x17c>
 800d170:	b1b0      	cbz	r0, 800d1a0 <_svfiprintf_r+0x114>
 800d172:	9207      	str	r2, [sp, #28]
 800d174:	e014      	b.n	800d1a0 <_svfiprintf_r+0x114>
 800d176:	eba0 0308 	sub.w	r3, r0, r8
 800d17a:	fa09 f303 	lsl.w	r3, r9, r3
 800d17e:	4313      	orrs	r3, r2
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	46a2      	mov	sl, r4
 800d184:	e7d2      	b.n	800d12c <_svfiprintf_r+0xa0>
 800d186:	9b03      	ldr	r3, [sp, #12]
 800d188:	1d19      	adds	r1, r3, #4
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	9103      	str	r1, [sp, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	bfbb      	ittet	lt
 800d192:	425b      	neglt	r3, r3
 800d194:	f042 0202 	orrlt.w	r2, r2, #2
 800d198:	9307      	strge	r3, [sp, #28]
 800d19a:	9307      	strlt	r3, [sp, #28]
 800d19c:	bfb8      	it	lt
 800d19e:	9204      	strlt	r2, [sp, #16]
 800d1a0:	7823      	ldrb	r3, [r4, #0]
 800d1a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1a4:	d10a      	bne.n	800d1bc <_svfiprintf_r+0x130>
 800d1a6:	7863      	ldrb	r3, [r4, #1]
 800d1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1aa:	d132      	bne.n	800d212 <_svfiprintf_r+0x186>
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	1d1a      	adds	r2, r3, #4
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	9203      	str	r2, [sp, #12]
 800d1b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1b8:	3402      	adds	r4, #2
 800d1ba:	9305      	str	r3, [sp, #20]
 800d1bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d274 <_svfiprintf_r+0x1e8>
 800d1c0:	7821      	ldrb	r1, [r4, #0]
 800d1c2:	2203      	movs	r2, #3
 800d1c4:	4650      	mov	r0, sl
 800d1c6:	f7f2 ffe3 	bl	8000190 <memchr>
 800d1ca:	b138      	cbz	r0, 800d1dc <_svfiprintf_r+0x150>
 800d1cc:	9b04      	ldr	r3, [sp, #16]
 800d1ce:	eba0 000a 	sub.w	r0, r0, sl
 800d1d2:	2240      	movs	r2, #64	@ 0x40
 800d1d4:	4082      	lsls	r2, r0
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	3401      	adds	r4, #1
 800d1da:	9304      	str	r3, [sp, #16]
 800d1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e0:	4825      	ldr	r0, [pc, #148]	@ (800d278 <_svfiprintf_r+0x1ec>)
 800d1e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d1e6:	2206      	movs	r2, #6
 800d1e8:	f7f2 ffd2 	bl	8000190 <memchr>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d036      	beq.n	800d25e <_svfiprintf_r+0x1d2>
 800d1f0:	4b22      	ldr	r3, [pc, #136]	@ (800d27c <_svfiprintf_r+0x1f0>)
 800d1f2:	bb1b      	cbnz	r3, 800d23c <_svfiprintf_r+0x1b0>
 800d1f4:	9b03      	ldr	r3, [sp, #12]
 800d1f6:	3307      	adds	r3, #7
 800d1f8:	f023 0307 	bic.w	r3, r3, #7
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	9303      	str	r3, [sp, #12]
 800d200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d202:	4433      	add	r3, r6
 800d204:	9309      	str	r3, [sp, #36]	@ 0x24
 800d206:	e76a      	b.n	800d0de <_svfiprintf_r+0x52>
 800d208:	fb0c 3202 	mla	r2, ip, r2, r3
 800d20c:	460c      	mov	r4, r1
 800d20e:	2001      	movs	r0, #1
 800d210:	e7a8      	b.n	800d164 <_svfiprintf_r+0xd8>
 800d212:	2300      	movs	r3, #0
 800d214:	3401      	adds	r4, #1
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	4619      	mov	r1, r3
 800d21a:	f04f 0c0a 	mov.w	ip, #10
 800d21e:	4620      	mov	r0, r4
 800d220:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d224:	3a30      	subs	r2, #48	@ 0x30
 800d226:	2a09      	cmp	r2, #9
 800d228:	d903      	bls.n	800d232 <_svfiprintf_r+0x1a6>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d0c6      	beq.n	800d1bc <_svfiprintf_r+0x130>
 800d22e:	9105      	str	r1, [sp, #20]
 800d230:	e7c4      	b.n	800d1bc <_svfiprintf_r+0x130>
 800d232:	fb0c 2101 	mla	r1, ip, r1, r2
 800d236:	4604      	mov	r4, r0
 800d238:	2301      	movs	r3, #1
 800d23a:	e7f0      	b.n	800d21e <_svfiprintf_r+0x192>
 800d23c:	ab03      	add	r3, sp, #12
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	462a      	mov	r2, r5
 800d242:	4b0f      	ldr	r3, [pc, #60]	@ (800d280 <_svfiprintf_r+0x1f4>)
 800d244:	a904      	add	r1, sp, #16
 800d246:	4638      	mov	r0, r7
 800d248:	f3af 8000 	nop.w
 800d24c:	1c42      	adds	r2, r0, #1
 800d24e:	4606      	mov	r6, r0
 800d250:	d1d6      	bne.n	800d200 <_svfiprintf_r+0x174>
 800d252:	89ab      	ldrh	r3, [r5, #12]
 800d254:	065b      	lsls	r3, r3, #25
 800d256:	f53f af2d 	bmi.w	800d0b4 <_svfiprintf_r+0x28>
 800d25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d25c:	e72c      	b.n	800d0b8 <_svfiprintf_r+0x2c>
 800d25e:	ab03      	add	r3, sp, #12
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	462a      	mov	r2, r5
 800d264:	4b06      	ldr	r3, [pc, #24]	@ (800d280 <_svfiprintf_r+0x1f4>)
 800d266:	a904      	add	r1, sp, #16
 800d268:	4638      	mov	r0, r7
 800d26a:	f000 f879 	bl	800d360 <_printf_i>
 800d26e:	e7ed      	b.n	800d24c <_svfiprintf_r+0x1c0>
 800d270:	0800dd68 	.word	0x0800dd68
 800d274:	0800dd6e 	.word	0x0800dd6e
 800d278:	0800dd72 	.word	0x0800dd72
 800d27c:	00000000 	.word	0x00000000
 800d280:	0800cfd5 	.word	0x0800cfd5

0800d284 <_printf_common>:
 800d284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d288:	4616      	mov	r6, r2
 800d28a:	4698      	mov	r8, r3
 800d28c:	688a      	ldr	r2, [r1, #8]
 800d28e:	690b      	ldr	r3, [r1, #16]
 800d290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d294:	4293      	cmp	r3, r2
 800d296:	bfb8      	it	lt
 800d298:	4613      	movlt	r3, r2
 800d29a:	6033      	str	r3, [r6, #0]
 800d29c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	b10a      	cbz	r2, 800d2aa <_printf_common+0x26>
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	6033      	str	r3, [r6, #0]
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	0699      	lsls	r1, r3, #26
 800d2ae:	bf42      	ittt	mi
 800d2b0:	6833      	ldrmi	r3, [r6, #0]
 800d2b2:	3302      	addmi	r3, #2
 800d2b4:	6033      	strmi	r3, [r6, #0]
 800d2b6:	6825      	ldr	r5, [r4, #0]
 800d2b8:	f015 0506 	ands.w	r5, r5, #6
 800d2bc:	d106      	bne.n	800d2cc <_printf_common+0x48>
 800d2be:	f104 0a19 	add.w	sl, r4, #25
 800d2c2:	68e3      	ldr	r3, [r4, #12]
 800d2c4:	6832      	ldr	r2, [r6, #0]
 800d2c6:	1a9b      	subs	r3, r3, r2
 800d2c8:	42ab      	cmp	r3, r5
 800d2ca:	dc26      	bgt.n	800d31a <_printf_common+0x96>
 800d2cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2d0:	6822      	ldr	r2, [r4, #0]
 800d2d2:	3b00      	subs	r3, #0
 800d2d4:	bf18      	it	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	0692      	lsls	r2, r2, #26
 800d2da:	d42b      	bmi.n	800d334 <_printf_common+0xb0>
 800d2dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2e0:	4641      	mov	r1, r8
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	47c8      	blx	r9
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	d01e      	beq.n	800d328 <_printf_common+0xa4>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	6922      	ldr	r2, [r4, #16]
 800d2ee:	f003 0306 	and.w	r3, r3, #6
 800d2f2:	2b04      	cmp	r3, #4
 800d2f4:	bf02      	ittt	eq
 800d2f6:	68e5      	ldreq	r5, [r4, #12]
 800d2f8:	6833      	ldreq	r3, [r6, #0]
 800d2fa:	1aed      	subeq	r5, r5, r3
 800d2fc:	68a3      	ldr	r3, [r4, #8]
 800d2fe:	bf0c      	ite	eq
 800d300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d304:	2500      	movne	r5, #0
 800d306:	4293      	cmp	r3, r2
 800d308:	bfc4      	itt	gt
 800d30a:	1a9b      	subgt	r3, r3, r2
 800d30c:	18ed      	addgt	r5, r5, r3
 800d30e:	2600      	movs	r6, #0
 800d310:	341a      	adds	r4, #26
 800d312:	42b5      	cmp	r5, r6
 800d314:	d11a      	bne.n	800d34c <_printf_common+0xc8>
 800d316:	2000      	movs	r0, #0
 800d318:	e008      	b.n	800d32c <_printf_common+0xa8>
 800d31a:	2301      	movs	r3, #1
 800d31c:	4652      	mov	r2, sl
 800d31e:	4641      	mov	r1, r8
 800d320:	4638      	mov	r0, r7
 800d322:	47c8      	blx	r9
 800d324:	3001      	adds	r0, #1
 800d326:	d103      	bne.n	800d330 <_printf_common+0xac>
 800d328:	f04f 30ff 	mov.w	r0, #4294967295
 800d32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d330:	3501      	adds	r5, #1
 800d332:	e7c6      	b.n	800d2c2 <_printf_common+0x3e>
 800d334:	18e1      	adds	r1, r4, r3
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	2030      	movs	r0, #48	@ 0x30
 800d33a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d33e:	4422      	add	r2, r4
 800d340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d348:	3302      	adds	r3, #2
 800d34a:	e7c7      	b.n	800d2dc <_printf_common+0x58>
 800d34c:	2301      	movs	r3, #1
 800d34e:	4622      	mov	r2, r4
 800d350:	4641      	mov	r1, r8
 800d352:	4638      	mov	r0, r7
 800d354:	47c8      	blx	r9
 800d356:	3001      	adds	r0, #1
 800d358:	d0e6      	beq.n	800d328 <_printf_common+0xa4>
 800d35a:	3601      	adds	r6, #1
 800d35c:	e7d9      	b.n	800d312 <_printf_common+0x8e>
	...

0800d360 <_printf_i>:
 800d360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	7e0f      	ldrb	r7, [r1, #24]
 800d366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d368:	2f78      	cmp	r7, #120	@ 0x78
 800d36a:	4691      	mov	r9, r2
 800d36c:	4680      	mov	r8, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	469a      	mov	sl, r3
 800d372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d376:	d807      	bhi.n	800d388 <_printf_i+0x28>
 800d378:	2f62      	cmp	r7, #98	@ 0x62
 800d37a:	d80a      	bhi.n	800d392 <_printf_i+0x32>
 800d37c:	2f00      	cmp	r7, #0
 800d37e:	f000 80d1 	beq.w	800d524 <_printf_i+0x1c4>
 800d382:	2f58      	cmp	r7, #88	@ 0x58
 800d384:	f000 80b8 	beq.w	800d4f8 <_printf_i+0x198>
 800d388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d38c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d390:	e03a      	b.n	800d408 <_printf_i+0xa8>
 800d392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d396:	2b15      	cmp	r3, #21
 800d398:	d8f6      	bhi.n	800d388 <_printf_i+0x28>
 800d39a:	a101      	add	r1, pc, #4	@ (adr r1, 800d3a0 <_printf_i+0x40>)
 800d39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3a0:	0800d3f9 	.word	0x0800d3f9
 800d3a4:	0800d40d 	.word	0x0800d40d
 800d3a8:	0800d389 	.word	0x0800d389
 800d3ac:	0800d389 	.word	0x0800d389
 800d3b0:	0800d389 	.word	0x0800d389
 800d3b4:	0800d389 	.word	0x0800d389
 800d3b8:	0800d40d 	.word	0x0800d40d
 800d3bc:	0800d389 	.word	0x0800d389
 800d3c0:	0800d389 	.word	0x0800d389
 800d3c4:	0800d389 	.word	0x0800d389
 800d3c8:	0800d389 	.word	0x0800d389
 800d3cc:	0800d50b 	.word	0x0800d50b
 800d3d0:	0800d437 	.word	0x0800d437
 800d3d4:	0800d4c5 	.word	0x0800d4c5
 800d3d8:	0800d389 	.word	0x0800d389
 800d3dc:	0800d389 	.word	0x0800d389
 800d3e0:	0800d52d 	.word	0x0800d52d
 800d3e4:	0800d389 	.word	0x0800d389
 800d3e8:	0800d437 	.word	0x0800d437
 800d3ec:	0800d389 	.word	0x0800d389
 800d3f0:	0800d389 	.word	0x0800d389
 800d3f4:	0800d4cd 	.word	0x0800d4cd
 800d3f8:	6833      	ldr	r3, [r6, #0]
 800d3fa:	1d1a      	adds	r2, r3, #4
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6032      	str	r2, [r6, #0]
 800d400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d408:	2301      	movs	r3, #1
 800d40a:	e09c      	b.n	800d546 <_printf_i+0x1e6>
 800d40c:	6833      	ldr	r3, [r6, #0]
 800d40e:	6820      	ldr	r0, [r4, #0]
 800d410:	1d19      	adds	r1, r3, #4
 800d412:	6031      	str	r1, [r6, #0]
 800d414:	0606      	lsls	r6, r0, #24
 800d416:	d501      	bpl.n	800d41c <_printf_i+0xbc>
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	e003      	b.n	800d424 <_printf_i+0xc4>
 800d41c:	0645      	lsls	r5, r0, #25
 800d41e:	d5fb      	bpl.n	800d418 <_printf_i+0xb8>
 800d420:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d424:	2d00      	cmp	r5, #0
 800d426:	da03      	bge.n	800d430 <_printf_i+0xd0>
 800d428:	232d      	movs	r3, #45	@ 0x2d
 800d42a:	426d      	negs	r5, r5
 800d42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d430:	4858      	ldr	r0, [pc, #352]	@ (800d594 <_printf_i+0x234>)
 800d432:	230a      	movs	r3, #10
 800d434:	e011      	b.n	800d45a <_printf_i+0xfa>
 800d436:	6821      	ldr	r1, [r4, #0]
 800d438:	6833      	ldr	r3, [r6, #0]
 800d43a:	0608      	lsls	r0, r1, #24
 800d43c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d440:	d402      	bmi.n	800d448 <_printf_i+0xe8>
 800d442:	0649      	lsls	r1, r1, #25
 800d444:	bf48      	it	mi
 800d446:	b2ad      	uxthmi	r5, r5
 800d448:	2f6f      	cmp	r7, #111	@ 0x6f
 800d44a:	4852      	ldr	r0, [pc, #328]	@ (800d594 <_printf_i+0x234>)
 800d44c:	6033      	str	r3, [r6, #0]
 800d44e:	bf14      	ite	ne
 800d450:	230a      	movne	r3, #10
 800d452:	2308      	moveq	r3, #8
 800d454:	2100      	movs	r1, #0
 800d456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d45a:	6866      	ldr	r6, [r4, #4]
 800d45c:	60a6      	str	r6, [r4, #8]
 800d45e:	2e00      	cmp	r6, #0
 800d460:	db05      	blt.n	800d46e <_printf_i+0x10e>
 800d462:	6821      	ldr	r1, [r4, #0]
 800d464:	432e      	orrs	r6, r5
 800d466:	f021 0104 	bic.w	r1, r1, #4
 800d46a:	6021      	str	r1, [r4, #0]
 800d46c:	d04b      	beq.n	800d506 <_printf_i+0x1a6>
 800d46e:	4616      	mov	r6, r2
 800d470:	fbb5 f1f3 	udiv	r1, r5, r3
 800d474:	fb03 5711 	mls	r7, r3, r1, r5
 800d478:	5dc7      	ldrb	r7, [r0, r7]
 800d47a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d47e:	462f      	mov	r7, r5
 800d480:	42bb      	cmp	r3, r7
 800d482:	460d      	mov	r5, r1
 800d484:	d9f4      	bls.n	800d470 <_printf_i+0x110>
 800d486:	2b08      	cmp	r3, #8
 800d488:	d10b      	bne.n	800d4a2 <_printf_i+0x142>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	07df      	lsls	r7, r3, #31
 800d48e:	d508      	bpl.n	800d4a2 <_printf_i+0x142>
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	6861      	ldr	r1, [r4, #4]
 800d494:	4299      	cmp	r1, r3
 800d496:	bfde      	ittt	le
 800d498:	2330      	movle	r3, #48	@ 0x30
 800d49a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d49e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4a2:	1b92      	subs	r2, r2, r6
 800d4a4:	6122      	str	r2, [r4, #16]
 800d4a6:	f8cd a000 	str.w	sl, [sp]
 800d4aa:	464b      	mov	r3, r9
 800d4ac:	aa03      	add	r2, sp, #12
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4640      	mov	r0, r8
 800d4b2:	f7ff fee7 	bl	800d284 <_printf_common>
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d14a      	bne.n	800d550 <_printf_i+0x1f0>
 800d4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d4be:	b004      	add	sp, #16
 800d4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	f043 0320 	orr.w	r3, r3, #32
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	4832      	ldr	r0, [pc, #200]	@ (800d598 <_printf_i+0x238>)
 800d4ce:	2778      	movs	r7, #120	@ 0x78
 800d4d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	6831      	ldr	r1, [r6, #0]
 800d4d8:	061f      	lsls	r7, r3, #24
 800d4da:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4de:	d402      	bmi.n	800d4e6 <_printf_i+0x186>
 800d4e0:	065f      	lsls	r7, r3, #25
 800d4e2:	bf48      	it	mi
 800d4e4:	b2ad      	uxthmi	r5, r5
 800d4e6:	6031      	str	r1, [r6, #0]
 800d4e8:	07d9      	lsls	r1, r3, #31
 800d4ea:	bf44      	itt	mi
 800d4ec:	f043 0320 	orrmi.w	r3, r3, #32
 800d4f0:	6023      	strmi	r3, [r4, #0]
 800d4f2:	b11d      	cbz	r5, 800d4fc <_printf_i+0x19c>
 800d4f4:	2310      	movs	r3, #16
 800d4f6:	e7ad      	b.n	800d454 <_printf_i+0xf4>
 800d4f8:	4826      	ldr	r0, [pc, #152]	@ (800d594 <_printf_i+0x234>)
 800d4fa:	e7e9      	b.n	800d4d0 <_printf_i+0x170>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	f023 0320 	bic.w	r3, r3, #32
 800d502:	6023      	str	r3, [r4, #0]
 800d504:	e7f6      	b.n	800d4f4 <_printf_i+0x194>
 800d506:	4616      	mov	r6, r2
 800d508:	e7bd      	b.n	800d486 <_printf_i+0x126>
 800d50a:	6833      	ldr	r3, [r6, #0]
 800d50c:	6825      	ldr	r5, [r4, #0]
 800d50e:	6961      	ldr	r1, [r4, #20]
 800d510:	1d18      	adds	r0, r3, #4
 800d512:	6030      	str	r0, [r6, #0]
 800d514:	062e      	lsls	r6, r5, #24
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	d501      	bpl.n	800d51e <_printf_i+0x1be>
 800d51a:	6019      	str	r1, [r3, #0]
 800d51c:	e002      	b.n	800d524 <_printf_i+0x1c4>
 800d51e:	0668      	lsls	r0, r5, #25
 800d520:	d5fb      	bpl.n	800d51a <_printf_i+0x1ba>
 800d522:	8019      	strh	r1, [r3, #0]
 800d524:	2300      	movs	r3, #0
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	4616      	mov	r6, r2
 800d52a:	e7bc      	b.n	800d4a6 <_printf_i+0x146>
 800d52c:	6833      	ldr	r3, [r6, #0]
 800d52e:	1d1a      	adds	r2, r3, #4
 800d530:	6032      	str	r2, [r6, #0]
 800d532:	681e      	ldr	r6, [r3, #0]
 800d534:	6862      	ldr	r2, [r4, #4]
 800d536:	2100      	movs	r1, #0
 800d538:	4630      	mov	r0, r6
 800d53a:	f7f2 fe29 	bl	8000190 <memchr>
 800d53e:	b108      	cbz	r0, 800d544 <_printf_i+0x1e4>
 800d540:	1b80      	subs	r0, r0, r6
 800d542:	6060      	str	r0, [r4, #4]
 800d544:	6863      	ldr	r3, [r4, #4]
 800d546:	6123      	str	r3, [r4, #16]
 800d548:	2300      	movs	r3, #0
 800d54a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d54e:	e7aa      	b.n	800d4a6 <_printf_i+0x146>
 800d550:	6923      	ldr	r3, [r4, #16]
 800d552:	4632      	mov	r2, r6
 800d554:	4649      	mov	r1, r9
 800d556:	4640      	mov	r0, r8
 800d558:	47d0      	blx	sl
 800d55a:	3001      	adds	r0, #1
 800d55c:	d0ad      	beq.n	800d4ba <_printf_i+0x15a>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	079b      	lsls	r3, r3, #30
 800d562:	d413      	bmi.n	800d58c <_printf_i+0x22c>
 800d564:	68e0      	ldr	r0, [r4, #12]
 800d566:	9b03      	ldr	r3, [sp, #12]
 800d568:	4298      	cmp	r0, r3
 800d56a:	bfb8      	it	lt
 800d56c:	4618      	movlt	r0, r3
 800d56e:	e7a6      	b.n	800d4be <_printf_i+0x15e>
 800d570:	2301      	movs	r3, #1
 800d572:	4632      	mov	r2, r6
 800d574:	4649      	mov	r1, r9
 800d576:	4640      	mov	r0, r8
 800d578:	47d0      	blx	sl
 800d57a:	3001      	adds	r0, #1
 800d57c:	d09d      	beq.n	800d4ba <_printf_i+0x15a>
 800d57e:	3501      	adds	r5, #1
 800d580:	68e3      	ldr	r3, [r4, #12]
 800d582:	9903      	ldr	r1, [sp, #12]
 800d584:	1a5b      	subs	r3, r3, r1
 800d586:	42ab      	cmp	r3, r5
 800d588:	dcf2      	bgt.n	800d570 <_printf_i+0x210>
 800d58a:	e7eb      	b.n	800d564 <_printf_i+0x204>
 800d58c:	2500      	movs	r5, #0
 800d58e:	f104 0619 	add.w	r6, r4, #25
 800d592:	e7f5      	b.n	800d580 <_printf_i+0x220>
 800d594:	0800dd79 	.word	0x0800dd79
 800d598:	0800dd8a 	.word	0x0800dd8a

0800d59c <_sbrk_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d06      	ldr	r5, [pc, #24]	@ (800d5b8 <_sbrk_r+0x1c>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	f7f4 fb22 	bl	8001bf0 <_sbrk>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_sbrk_r+0x1a>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_sbrk_r+0x1a>
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	200006cc 	.word	0x200006cc

0800d5bc <_realloc_r>:
 800d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	4614      	mov	r4, r2
 800d5c4:	460d      	mov	r5, r1
 800d5c6:	b921      	cbnz	r1, 800d5d2 <_realloc_r+0x16>
 800d5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	4611      	mov	r1, r2
 800d5ce:	f7ff bc75 	b.w	800cebc <_malloc_r>
 800d5d2:	b92a      	cbnz	r2, 800d5e0 <_realloc_r+0x24>
 800d5d4:	f7ff fc06 	bl	800cde4 <_free_r>
 800d5d8:	4625      	mov	r5, r4
 800d5da:	4628      	mov	r0, r5
 800d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e0:	f000 f81a 	bl	800d618 <_malloc_usable_size_r>
 800d5e4:	4284      	cmp	r4, r0
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	d802      	bhi.n	800d5f0 <_realloc_r+0x34>
 800d5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5ee:	d8f4      	bhi.n	800d5da <_realloc_r+0x1e>
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f7ff fc62 	bl	800cebc <_malloc_r>
 800d5f8:	4680      	mov	r8, r0
 800d5fa:	b908      	cbnz	r0, 800d600 <_realloc_r+0x44>
 800d5fc:	4645      	mov	r5, r8
 800d5fe:	e7ec      	b.n	800d5da <_realloc_r+0x1e>
 800d600:	42b4      	cmp	r4, r6
 800d602:	4622      	mov	r2, r4
 800d604:	4629      	mov	r1, r5
 800d606:	bf28      	it	cs
 800d608:	4632      	movcs	r2, r6
 800d60a:	f7ff fbdd 	bl	800cdc8 <memcpy>
 800d60e:	4629      	mov	r1, r5
 800d610:	4638      	mov	r0, r7
 800d612:	f7ff fbe7 	bl	800cde4 <_free_r>
 800d616:	e7f1      	b.n	800d5fc <_realloc_r+0x40>

0800d618 <_malloc_usable_size_r>:
 800d618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d61c:	1f18      	subs	r0, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bfbc      	itt	lt
 800d622:	580b      	ldrlt	r3, [r1, r0]
 800d624:	18c0      	addlt	r0, r0, r3
 800d626:	4770      	bx	lr

0800d628 <_init>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	bf00      	nop
 800d62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62e:	bc08      	pop	{r3}
 800d630:	469e      	mov	lr, r3
 800d632:	4770      	bx	lr

0800d634 <_fini>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	bf00      	nop
 800d638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63a:	bc08      	pop	{r3}
 800d63c:	469e      	mov	lr, r3
 800d63e:	4770      	bx	lr
