
CR_RF-OFB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc28  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800dd68  0800dd68  0000ed68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e598  0800e598  000100cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e598  0800e598  0000f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5a0  0800e5a0  000100cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5a0  0800e5a0  0000f5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e5a4  0800e5a4  0000f5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0800e5a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200000cc  0800e674  000100cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800e674  0001066c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002211c  00000000  00000000  000100f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005481  00000000  00000000  00032212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00037698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000175b  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a1b  00000000  00000000  0003aceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000231e5  00000000  00000000  0005f706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdeb1  00000000  00000000  000828eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015079c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b70  00000000  00000000  001507e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d0  00000000  00000000  00159350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000cc 	.word	0x200000cc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dd50 	.word	0x0800dd50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d0 	.word	0x200000d0
 800017c:	0800dd50 	.word	0x0800dd50

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_d2f>:
 80007fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000804:	bf24      	itt	cs
 8000806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800080a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800080e:	d90d      	bls.n	800082c <__aeabi_d2f+0x30>
 8000810:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800081c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000824:	bf08      	it	eq
 8000826:	f020 0001 	biceq.w	r0, r0, #1
 800082a:	4770      	bx	lr
 800082c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000830:	d121      	bne.n	8000876 <__aeabi_d2f+0x7a>
 8000832:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000836:	bfbc      	itt	lt
 8000838:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800083c:	4770      	bxlt	lr
 800083e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000842:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000846:	f1c2 0218 	rsb	r2, r2, #24
 800084a:	f1c2 0c20 	rsb	ip, r2, #32
 800084e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000852:	fa20 f002 	lsr.w	r0, r0, r2
 8000856:	bf18      	it	ne
 8000858:	f040 0001 	orrne.w	r0, r0, #1
 800085c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000864:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000868:	ea40 000c 	orr.w	r0, r0, ip
 800086c:	fa23 f302 	lsr.w	r3, r3, r2
 8000870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000874:	e7cc      	b.n	8000810 <__aeabi_d2f+0x14>
 8000876:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800087a:	d107      	bne.n	800088c <__aeabi_d2f+0x90>
 800087c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000880:	bf1e      	ittt	ne
 8000882:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000886:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800088a:	4770      	bxne	lr
 800088c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000890:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000894:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_frsub>:
 800089c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80008a0:	e002      	b.n	80008a8 <__addsf3>
 80008a2:	bf00      	nop

080008a4 <__aeabi_fsub>:
 80008a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080008a8 <__addsf3>:
 80008a8:	0042      	lsls	r2, r0, #1
 80008aa:	bf1f      	itttt	ne
 80008ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008b0:	ea92 0f03 	teqne	r2, r3
 80008b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008bc:	d06a      	beq.n	8000994 <__addsf3+0xec>
 80008be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008c6:	bfc1      	itttt	gt
 80008c8:	18d2      	addgt	r2, r2, r3
 80008ca:	4041      	eorgt	r1, r0
 80008cc:	4048      	eorgt	r0, r1
 80008ce:	4041      	eorgt	r1, r0
 80008d0:	bfb8      	it	lt
 80008d2:	425b      	neglt	r3, r3
 80008d4:	2b19      	cmp	r3, #25
 80008d6:	bf88      	it	hi
 80008d8:	4770      	bxhi	lr
 80008da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80008de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80008e6:	bf18      	it	ne
 80008e8:	4240      	negne	r0, r0
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80008f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80008f6:	bf18      	it	ne
 80008f8:	4249      	negne	r1, r1
 80008fa:	ea92 0f03 	teq	r2, r3
 80008fe:	d03f      	beq.n	8000980 <__addsf3+0xd8>
 8000900:	f1a2 0201 	sub.w	r2, r2, #1
 8000904:	fa41 fc03 	asr.w	ip, r1, r3
 8000908:	eb10 000c 	adds.w	r0, r0, ip
 800090c:	f1c3 0320 	rsb	r3, r3, #32
 8000910:	fa01 f103 	lsl.w	r1, r1, r3
 8000914:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000918:	d502      	bpl.n	8000920 <__addsf3+0x78>
 800091a:	4249      	negs	r1, r1
 800091c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000920:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000924:	d313      	bcc.n	800094e <__addsf3+0xa6>
 8000926:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800092a:	d306      	bcc.n	800093a <__addsf3+0x92>
 800092c:	0840      	lsrs	r0, r0, #1
 800092e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000932:	f102 0201 	add.w	r2, r2, #1
 8000936:	2afe      	cmp	r2, #254	@ 0xfe
 8000938:	d251      	bcs.n	80009de <__addsf3+0x136>
 800093a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800093e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000942:	bf08      	it	eq
 8000944:	f020 0001 	biceq.w	r0, r0, #1
 8000948:	ea40 0003 	orr.w	r0, r0, r3
 800094c:	4770      	bx	lr
 800094e:	0049      	lsls	r1, r1, #1
 8000950:	eb40 0000 	adc.w	r0, r0, r0
 8000954:	3a01      	subs	r2, #1
 8000956:	bf28      	it	cs
 8000958:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800095c:	d2ed      	bcs.n	800093a <__addsf3+0x92>
 800095e:	fab0 fc80 	clz	ip, r0
 8000962:	f1ac 0c08 	sub.w	ip, ip, #8
 8000966:	ebb2 020c 	subs.w	r2, r2, ip
 800096a:	fa00 f00c 	lsl.w	r0, r0, ip
 800096e:	bfaa      	itet	ge
 8000970:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000974:	4252      	neglt	r2, r2
 8000976:	4318      	orrge	r0, r3
 8000978:	bfbc      	itt	lt
 800097a:	40d0      	lsrlt	r0, r2
 800097c:	4318      	orrlt	r0, r3
 800097e:	4770      	bx	lr
 8000980:	f092 0f00 	teq	r2, #0
 8000984:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000988:	bf06      	itte	eq
 800098a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800098e:	3201      	addeq	r2, #1
 8000990:	3b01      	subne	r3, #1
 8000992:	e7b5      	b.n	8000900 <__addsf3+0x58>
 8000994:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000998:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800099c:	bf18      	it	ne
 800099e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a2:	d021      	beq.n	80009e8 <__addsf3+0x140>
 80009a4:	ea92 0f03 	teq	r2, r3
 80009a8:	d004      	beq.n	80009b4 <__addsf3+0x10c>
 80009aa:	f092 0f00 	teq	r2, #0
 80009ae:	bf08      	it	eq
 80009b0:	4608      	moveq	r0, r1
 80009b2:	4770      	bx	lr
 80009b4:	ea90 0f01 	teq	r0, r1
 80009b8:	bf1c      	itt	ne
 80009ba:	2000      	movne	r0, #0
 80009bc:	4770      	bxne	lr
 80009be:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009c2:	d104      	bne.n	80009ce <__addsf3+0x126>
 80009c4:	0040      	lsls	r0, r0, #1
 80009c6:	bf28      	it	cs
 80009c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80009d2:	bf3c      	itt	cc
 80009d4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bxcc	lr
 80009da:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009de:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80009e2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e6:	4770      	bx	lr
 80009e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009ec:	bf16      	itet	ne
 80009ee:	4608      	movne	r0, r1
 80009f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009f4:	4601      	movne	r1, r0
 80009f6:	0242      	lsls	r2, r0, #9
 80009f8:	bf06      	itte	eq
 80009fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009fe:	ea90 0f01 	teqeq	r0, r1
 8000a02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a06:	4770      	bx	lr

08000a08 <__aeabi_ui2f>:
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e004      	b.n	8000a18 <__aeabi_i2f+0x8>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_i2f>:
 8000a10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a14:	bf48      	it	mi
 8000a16:	4240      	negmi	r0, r0
 8000a18:	ea5f 0c00 	movs.w	ip, r0
 8000a1c:	bf08      	it	eq
 8000a1e:	4770      	bxeq	lr
 8000a20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a24:	4601      	mov	r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	e01c      	b.n	8000a66 <__aeabi_l2f+0x2a>

08000a2c <__aeabi_ul2f>:
 8000a2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a30:	bf08      	it	eq
 8000a32:	4770      	bxeq	lr
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	e00a      	b.n	8000a50 <__aeabi_l2f+0x14>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_l2f>:
 8000a3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a40:	bf08      	it	eq
 8000a42:	4770      	bxeq	lr
 8000a44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__aeabi_l2f+0x14>
 8000a4a:	4240      	negs	r0, r0
 8000a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a50:	ea5f 0c01 	movs.w	ip, r1
 8000a54:	bf02      	ittt	eq
 8000a56:	4684      	moveq	ip, r0
 8000a58:	4601      	moveq	r1, r0
 8000a5a:	2000      	moveq	r0, #0
 8000a5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a60:	bf08      	it	eq
 8000a62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a6a:	fabc f28c 	clz	r2, ip
 8000a6e:	3a08      	subs	r2, #8
 8000a70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a74:	db10      	blt.n	8000a98 <__aeabi_l2f+0x5c>
 8000a76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a7a:	4463      	add	r3, ip
 8000a7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a80:	f1c2 0220 	rsb	r2, r2, #32
 8000a84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a88:	fa20 f202 	lsr.w	r2, r0, r2
 8000a8c:	eb43 0002 	adc.w	r0, r3, r2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f102 0220 	add.w	r2, r2, #32
 8000a9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aa0:	f1c2 0220 	rsb	r2, r2, #32
 8000aa4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000aa8:	fa21 f202 	lsr.w	r2, r1, r2
 8000aac:	eb43 0002 	adc.w	r0, r3, r2
 8000ab0:	bf08      	it	eq
 8000ab2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_fmul>:
 8000ab8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ac6:	ea92 0f0c 	teqne	r2, ip
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d06f      	beq.n	8000bb0 <__aeabi_fmul+0xf8>
 8000ad0:	441a      	add	r2, r3
 8000ad2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ad6:	0240      	lsls	r0, r0, #9
 8000ad8:	bf18      	it	ne
 8000ada:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ade:	d01e      	beq.n	8000b1e <__aeabi_fmul+0x66>
 8000ae0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ae4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ae8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000aec:	fba0 3101 	umull	r3, r1, r0, r1
 8000af0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000af4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000af8:	bf3e      	ittt	cc
 8000afa:	0049      	lslcc	r1, r1, #1
 8000afc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b00:	005b      	lslcc	r3, r3, #1
 8000b02:	ea40 0001 	orr.w	r0, r0, r1
 8000b06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b0c:	d81d      	bhi.n	8000b4a <__aeabi_fmul+0x92>
 8000b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b16:	bf08      	it	eq
 8000b18:	f020 0001 	biceq.w	r0, r0, #1
 8000b1c:	4770      	bx	lr
 8000b1e:	f090 0f00 	teq	r0, #0
 8000b22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b26:	bf08      	it	eq
 8000b28:	0249      	lsleq	r1, r1, #9
 8000b2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b32:	3a7f      	subs	r2, #127	@ 0x7f
 8000b34:	bfc2      	ittt	gt
 8000b36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b3e:	4770      	bxgt	lr
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	dc5d      	bgt.n	8000c08 <__aeabi_fmul+0x150>
 8000b4c:	f112 0f19 	cmn.w	r2, #25
 8000b50:	bfdc      	itt	le
 8000b52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bxle	lr
 8000b58:	f1c2 0200 	rsb	r2, r2, #0
 8000b5c:	0041      	lsls	r1, r0, #1
 8000b5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b62:	f1c2 0220 	rsb	r2, r2, #32
 8000b66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b6e:	f140 0000 	adc.w	r0, r0, #0
 8000b72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b76:	bf08      	it	eq
 8000b78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7c:	4770      	bx	lr
 8000b7e:	f092 0f00 	teq	r2, #0
 8000b82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b86:	bf02      	ittt	eq
 8000b88:	0040      	lsleq	r0, r0, #1
 8000b8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b8e:	3a01      	subeq	r2, #1
 8000b90:	d0f9      	beq.n	8000b86 <__aeabi_fmul+0xce>
 8000b92:	ea40 000c 	orr.w	r0, r0, ip
 8000b96:	f093 0f00 	teq	r3, #0
 8000b9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b9e:	bf02      	ittt	eq
 8000ba0:	0049      	lsleq	r1, r1, #1
 8000ba2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ba6:	3b01      	subeq	r3, #1
 8000ba8:	d0f9      	beq.n	8000b9e <__aeabi_fmul+0xe6>
 8000baa:	ea41 010c 	orr.w	r1, r1, ip
 8000bae:	e78f      	b.n	8000ad0 <__aeabi_fmul+0x18>
 8000bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bb4:	ea92 0f0c 	teq	r2, ip
 8000bb8:	bf18      	it	ne
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d00a      	beq.n	8000bd6 <__aeabi_fmul+0x11e>
 8000bc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bc4:	bf18      	it	ne
 8000bc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	d1d8      	bne.n	8000b7e <__aeabi_fmul+0xc6>
 8000bcc:	ea80 0001 	eor.w	r0, r0, r1
 8000bd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f090 0f00 	teq	r0, #0
 8000bda:	bf17      	itett	ne
 8000bdc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000be0:	4608      	moveq	r0, r1
 8000be2:	f091 0f00 	teqne	r1, #0
 8000be6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bea:	d014      	beq.n	8000c16 <__aeabi_fmul+0x15e>
 8000bec:	ea92 0f0c 	teq	r2, ip
 8000bf0:	d101      	bne.n	8000bf6 <__aeabi_fmul+0x13e>
 8000bf2:	0242      	lsls	r2, r0, #9
 8000bf4:	d10f      	bne.n	8000c16 <__aeabi_fmul+0x15e>
 8000bf6:	ea93 0f0c 	teq	r3, ip
 8000bfa:	d103      	bne.n	8000c04 <__aeabi_fmul+0x14c>
 8000bfc:	024b      	lsls	r3, r1, #9
 8000bfe:	bf18      	it	ne
 8000c00:	4608      	movne	r0, r1
 8000c02:	d108      	bne.n	8000c16 <__aeabi_fmul+0x15e>
 8000c04:	ea80 0001 	eor.w	r0, r0, r1
 8000c08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_fdiv>:
 8000c20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c28:	bf1e      	ittt	ne
 8000c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c2e:	ea92 0f0c 	teqne	r2, ip
 8000c32:	ea93 0f0c 	teqne	r3, ip
 8000c36:	d069      	beq.n	8000d0c <__aeabi_fdiv+0xec>
 8000c38:	eba2 0203 	sub.w	r2, r2, r3
 8000c3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c40:	0249      	lsls	r1, r1, #9
 8000c42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c46:	d037      	beq.n	8000cb8 <__aeabi_fdiv+0x98>
 8000c48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	bf38      	it	cc
 8000c5c:	005b      	lslcc	r3, r3, #1
 8000c5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c66:	428b      	cmp	r3, r1
 8000c68:	bf24      	itt	cs
 8000c6a:	1a5b      	subcs	r3, r3, r1
 8000c6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c74:	bf24      	itt	cs
 8000c76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c82:	bf24      	itt	cs
 8000c84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c90:	bf24      	itt	cs
 8000c92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	bf18      	it	ne
 8000c9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ca2:	d1e0      	bne.n	8000c66 <__aeabi_fdiv+0x46>
 8000ca4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ca6:	f63f af50 	bhi.w	8000b4a <__aeabi_fmul+0x92>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc0:	327f      	adds	r2, #127	@ 0x7f
 8000cc2:	bfc2      	ittt	gt
 8000cc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ccc:	4770      	bxgt	lr
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	3a01      	subs	r2, #1
 8000cd8:	e737      	b.n	8000b4a <__aeabi_fmul+0x92>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ce2:	bf02      	ittt	eq
 8000ce4:	0040      	lsleq	r0, r0, #1
 8000ce6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cea:	3a01      	subeq	r2, #1
 8000cec:	d0f9      	beq.n	8000ce2 <__aeabi_fdiv+0xc2>
 8000cee:	ea40 000c 	orr.w	r0, r0, ip
 8000cf2:	f093 0f00 	teq	r3, #0
 8000cf6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cfa:	bf02      	ittt	eq
 8000cfc:	0049      	lsleq	r1, r1, #1
 8000cfe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d02:	3b01      	subeq	r3, #1
 8000d04:	d0f9      	beq.n	8000cfa <__aeabi_fdiv+0xda>
 8000d06:	ea41 010c 	orr.w	r1, r1, ip
 8000d0a:	e795      	b.n	8000c38 <__aeabi_fdiv+0x18>
 8000d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d10:	ea92 0f0c 	teq	r2, ip
 8000d14:	d108      	bne.n	8000d28 <__aeabi_fdiv+0x108>
 8000d16:	0242      	lsls	r2, r0, #9
 8000d18:	f47f af7d 	bne.w	8000c16 <__aeabi_fmul+0x15e>
 8000d1c:	ea93 0f0c 	teq	r3, ip
 8000d20:	f47f af70 	bne.w	8000c04 <__aeabi_fmul+0x14c>
 8000d24:	4608      	mov	r0, r1
 8000d26:	e776      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d28:	ea93 0f0c 	teq	r3, ip
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_fdiv+0x118>
 8000d2e:	024b      	lsls	r3, r1, #9
 8000d30:	f43f af4c 	beq.w	8000bcc <__aeabi_fmul+0x114>
 8000d34:	4608      	mov	r0, r1
 8000d36:	e76e      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d3c:	bf18      	it	ne
 8000d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d42:	d1ca      	bne.n	8000cda <__aeabi_fdiv+0xba>
 8000d44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d48:	f47f af5c 	bne.w	8000c04 <__aeabi_fmul+0x14c>
 8000d4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d50:	f47f af3c 	bne.w	8000bcc <__aeabi_fmul+0x114>
 8000d54:	e75f      	b.n	8000c16 <__aeabi_fmul+0x15e>
 8000d56:	bf00      	nop

08000d58 <__aeabi_f2iz>:
 8000d58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d60:	d30f      	bcc.n	8000d82 <__aeabi_f2iz+0x2a>
 8000d62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d6a:	d90d      	bls.n	8000d88 <__aeabi_f2iz+0x30>
 8000d6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d74:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d78:	fa23 f002 	lsr.w	r0, r3, r2
 8000d7c:	bf18      	it	ne
 8000d7e:	4240      	negne	r0, r0
 8000d80:	4770      	bx	lr
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	4770      	bx	lr
 8000d88:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d8c:	d101      	bne.n	8000d92 <__aeabi_f2iz+0x3a>
 8000d8e:	0242      	lsls	r2, r0, #9
 8000d90:	d105      	bne.n	8000d9e <__aeabi_f2iz+0x46>
 8000d92:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d96:	bf08      	it	eq
 8000d98:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_f2uiz>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	d20e      	bcs.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000da8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dac:	d30b      	bcc.n	8000dc6 <__aeabi_f2uiz+0x22>
 8000dae:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000db2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000db6:	d409      	bmi.n	8000dcc <__aeabi_f2uiz+0x28>
 8000db8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc4:	4770      	bx	lr
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4770      	bx	lr
 8000dcc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_f2uiz+0x32>
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_f2uiz+0x38>
 8000dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_uldivmod>:
 8000de4:	b953      	cbnz	r3, 8000dfc <__aeabi_uldivmod+0x18>
 8000de6:	b94a      	cbnz	r2, 8000dfc <__aeabi_uldivmod+0x18>
 8000de8:	2900      	cmp	r1, #0
 8000dea:	bf08      	it	eq
 8000dec:	2800      	cmpeq	r0, #0
 8000dee:	bf1c      	itt	ne
 8000df0:	f04f 31ff 	movne.w	r1, #4294967295
 8000df4:	f04f 30ff 	movne.w	r0, #4294967295
 8000df8:	f000 b988 	b.w	800110c <__aeabi_idiv0>
 8000dfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e04:	f000 f806 	bl	8000e14 <__udivmoddi4>
 8000e08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e10:	b004      	add	sp, #16
 8000e12:	4770      	bx	lr

08000e14 <__udivmoddi4>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	9d08      	ldr	r5, [sp, #32]
 8000e1a:	468e      	mov	lr, r1
 8000e1c:	4604      	mov	r4, r0
 8000e1e:	4688      	mov	r8, r1
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d14a      	bne.n	8000eba <__udivmoddi4+0xa6>
 8000e24:	428a      	cmp	r2, r1
 8000e26:	4617      	mov	r7, r2
 8000e28:	d962      	bls.n	8000ef0 <__udivmoddi4+0xdc>
 8000e2a:	fab2 f682 	clz	r6, r2
 8000e2e:	b14e      	cbz	r6, 8000e44 <__udivmoddi4+0x30>
 8000e30:	f1c6 0320 	rsb	r3, r6, #32
 8000e34:	fa01 f806 	lsl.w	r8, r1, r6
 8000e38:	fa20 f303 	lsr.w	r3, r0, r3
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	ea43 0808 	orr.w	r8, r3, r8
 8000e42:	40b4      	lsls	r4, r6
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	fa1f fc87 	uxth.w	ip, r7
 8000e4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d909      	bls.n	8000e76 <__udivmoddi4+0x62>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e68:	f080 80ea 	bcs.w	8001040 <__udivmoddi4+0x22c>
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f240 80e7 	bls.w	8001040 <__udivmoddi4+0x22c>
 8000e72:	3902      	subs	r1, #2
 8000e74:	443b      	add	r3, r7
 8000e76:	1a9a      	subs	r2, r3, r2
 8000e78:	b2a3      	uxth	r3, r4
 8000e7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e8a:	459c      	cmp	ip, r3
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x8e>
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	f080 80d6 	bcs.w	8001044 <__udivmoddi4+0x230>
 8000e98:	459c      	cmp	ip, r3
 8000e9a:	f240 80d3 	bls.w	8001044 <__udivmoddi4+0x230>
 8000e9e:	443b      	add	r3, r7
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ea6:	eba3 030c 	sub.w	r3, r3, ip
 8000eaa:	2100      	movs	r1, #0
 8000eac:	b11d      	cbz	r5, 8000eb6 <__udivmoddi4+0xa2>
 8000eae:	40f3      	lsrs	r3, r6
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d905      	bls.n	8000eca <__udivmoddi4+0xb6>
 8000ebe:	b10d      	cbz	r5, 8000ec4 <__udivmoddi4+0xb0>
 8000ec0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e7f5      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000eca:	fab3 f183 	clz	r1, r3
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d146      	bne.n	8000f60 <__udivmoddi4+0x14c>
 8000ed2:	4573      	cmp	r3, lr
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0xc8>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 8105 	bhi.w	80010e6 <__udivmoddi4+0x2d2>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	4690      	mov	r8, r2
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0e5      	beq.n	8000eb6 <__udivmoddi4+0xa2>
 8000eea:	e9c5 4800 	strd	r4, r8, [r5]
 8000eee:	e7e2      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	f000 8090 	beq.w	8001016 <__udivmoddi4+0x202>
 8000ef6:	fab2 f682 	clz	r6, r2
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	f040 80a4 	bne.w	8001048 <__udivmoddi4+0x234>
 8000f00:	1a8a      	subs	r2, r1, r2
 8000f02:	0c03      	lsrs	r3, r0, #16
 8000f04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f08:	b280      	uxth	r0, r0
 8000f0a:	b2bc      	uxth	r4, r7
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x11e>
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x11c>
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	f200 80e0 	bhi.w	80010f0 <__udivmoddi4+0x2dc>
 8000f30:	46c4      	mov	ip, r8
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f40:	fb02 f404 	mul.w	r4, r2, r4
 8000f44:	429c      	cmp	r4, r3
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x144>
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f4e:	d202      	bcs.n	8000f56 <__udivmoddi4+0x142>
 8000f50:	429c      	cmp	r4, r3
 8000f52:	f200 80ca 	bhi.w	80010ea <__udivmoddi4+0x2d6>
 8000f56:	4602      	mov	r2, r0
 8000f58:	1b1b      	subs	r3, r3, r4
 8000f5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f5e:	e7a5      	b.n	8000eac <__udivmoddi4+0x98>
 8000f60:	f1c1 0620 	rsb	r6, r1, #32
 8000f64:	408b      	lsls	r3, r1
 8000f66:	fa22 f706 	lsr.w	r7, r2, r6
 8000f6a:	431f      	orrs	r7, r3
 8000f6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f70:	fa20 f306 	lsr.w	r3, r0, r6
 8000f74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f7c:	4323      	orrs	r3, r4
 8000f7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f82:	fa1f fc87 	uxth.w	ip, r7
 8000f86:	fbbe f0f9 	udiv	r0, lr, r9
 8000f8a:	0c1c      	lsrs	r4, r3, #16
 8000f8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f9e:	d909      	bls.n	8000fb4 <__udivmoddi4+0x1a0>
 8000fa0:	193c      	adds	r4, r7, r4
 8000fa2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fa6:	f080 809c 	bcs.w	80010e2 <__udivmoddi4+0x2ce>
 8000faa:	45a6      	cmp	lr, r4
 8000fac:	f240 8099 	bls.w	80010e2 <__udivmoddi4+0x2ce>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	443c      	add	r4, r7
 8000fb4:	eba4 040e 	sub.w	r4, r4, lr
 8000fb8:	fa1f fe83 	uxth.w	lr, r3
 8000fbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fcc:	45a4      	cmp	ip, r4
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x1ce>
 8000fd0:	193c      	adds	r4, r7, r4
 8000fd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fd6:	f080 8082 	bcs.w	80010de <__udivmoddi4+0x2ca>
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d97f      	bls.n	80010de <__udivmoddi4+0x2ca>
 8000fde:	3b02      	subs	r3, #2
 8000fe0:	443c      	add	r4, r7
 8000fe2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fe6:	eba4 040c 	sub.w	r4, r4, ip
 8000fea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fee:	4564      	cmp	r4, ip
 8000ff0:	4673      	mov	r3, lr
 8000ff2:	46e1      	mov	r9, ip
 8000ff4:	d362      	bcc.n	80010bc <__udivmoddi4+0x2a8>
 8000ff6:	d05f      	beq.n	80010b8 <__udivmoddi4+0x2a4>
 8000ff8:	b15d      	cbz	r5, 8001012 <__udivmoddi4+0x1fe>
 8000ffa:	ebb8 0203 	subs.w	r2, r8, r3
 8000ffe:	eb64 0409 	sbc.w	r4, r4, r9
 8001002:	fa04 f606 	lsl.w	r6, r4, r6
 8001006:	fa22 f301 	lsr.w	r3, r2, r1
 800100a:	431e      	orrs	r6, r3
 800100c:	40cc      	lsrs	r4, r1
 800100e:	e9c5 6400 	strd	r6, r4, [r5]
 8001012:	2100      	movs	r1, #0
 8001014:	e74f      	b.n	8000eb6 <__udivmoddi4+0xa2>
 8001016:	fbb1 fcf2 	udiv	ip, r1, r2
 800101a:	0c01      	lsrs	r1, r0, #16
 800101c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001020:	b280      	uxth	r0, r0
 8001022:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001026:	463b      	mov	r3, r7
 8001028:	4638      	mov	r0, r7
 800102a:	463c      	mov	r4, r7
 800102c:	46b8      	mov	r8, r7
 800102e:	46be      	mov	lr, r7
 8001030:	2620      	movs	r6, #32
 8001032:	fbb1 f1f7 	udiv	r1, r1, r7
 8001036:	eba2 0208 	sub.w	r2, r2, r8
 800103a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800103e:	e766      	b.n	8000f0e <__udivmoddi4+0xfa>
 8001040:	4601      	mov	r1, r0
 8001042:	e718      	b.n	8000e76 <__udivmoddi4+0x62>
 8001044:	4610      	mov	r0, r2
 8001046:	e72c      	b.n	8000ea2 <__udivmoddi4+0x8e>
 8001048:	f1c6 0220 	rsb	r2, r6, #32
 800104c:	fa2e f302 	lsr.w	r3, lr, r2
 8001050:	40b7      	lsls	r7, r6
 8001052:	40b1      	lsls	r1, r6
 8001054:	fa20 f202 	lsr.w	r2, r0, r2
 8001058:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800105c:	430a      	orrs	r2, r1
 800105e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001062:	b2bc      	uxth	r4, r7
 8001064:	fb0e 3318 	mls	r3, lr, r8, r3
 8001068:	0c11      	lsrs	r1, r2, #16
 800106a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800106e:	fb08 f904 	mul.w	r9, r8, r4
 8001072:	40b0      	lsls	r0, r6
 8001074:	4589      	cmp	r9, r1
 8001076:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800107a:	b280      	uxth	r0, r0
 800107c:	d93e      	bls.n	80010fc <__udivmoddi4+0x2e8>
 800107e:	1879      	adds	r1, r7, r1
 8001080:	f108 3cff 	add.w	ip, r8, #4294967295
 8001084:	d201      	bcs.n	800108a <__udivmoddi4+0x276>
 8001086:	4589      	cmp	r9, r1
 8001088:	d81f      	bhi.n	80010ca <__udivmoddi4+0x2b6>
 800108a:	eba1 0109 	sub.w	r1, r1, r9
 800108e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001092:	fb09 f804 	mul.w	r8, r9, r4
 8001096:	fb0e 1119 	mls	r1, lr, r9, r1
 800109a:	b292      	uxth	r2, r2
 800109c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a0:	4542      	cmp	r2, r8
 80010a2:	d229      	bcs.n	80010f8 <__udivmoddi4+0x2e4>
 80010a4:	18ba      	adds	r2, r7, r2
 80010a6:	f109 31ff 	add.w	r1, r9, #4294967295
 80010aa:	d2c4      	bcs.n	8001036 <__udivmoddi4+0x222>
 80010ac:	4542      	cmp	r2, r8
 80010ae:	d2c2      	bcs.n	8001036 <__udivmoddi4+0x222>
 80010b0:	f1a9 0102 	sub.w	r1, r9, #2
 80010b4:	443a      	add	r2, r7
 80010b6:	e7be      	b.n	8001036 <__udivmoddi4+0x222>
 80010b8:	45f0      	cmp	r8, lr
 80010ba:	d29d      	bcs.n	8000ff8 <__udivmoddi4+0x1e4>
 80010bc:	ebbe 0302 	subs.w	r3, lr, r2
 80010c0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010c4:	3801      	subs	r0, #1
 80010c6:	46e1      	mov	r9, ip
 80010c8:	e796      	b.n	8000ff8 <__udivmoddi4+0x1e4>
 80010ca:	eba7 0909 	sub.w	r9, r7, r9
 80010ce:	4449      	add	r1, r9
 80010d0:	f1a8 0c02 	sub.w	ip, r8, #2
 80010d4:	fbb1 f9fe 	udiv	r9, r1, lr
 80010d8:	fb09 f804 	mul.w	r8, r9, r4
 80010dc:	e7db      	b.n	8001096 <__udivmoddi4+0x282>
 80010de:	4673      	mov	r3, lr
 80010e0:	e77f      	b.n	8000fe2 <__udivmoddi4+0x1ce>
 80010e2:	4650      	mov	r0, sl
 80010e4:	e766      	b.n	8000fb4 <__udivmoddi4+0x1a0>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e6fd      	b.n	8000ee6 <__udivmoddi4+0xd2>
 80010ea:	443b      	add	r3, r7
 80010ec:	3a02      	subs	r2, #2
 80010ee:	e733      	b.n	8000f58 <__udivmoddi4+0x144>
 80010f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010f4:	443b      	add	r3, r7
 80010f6:	e71c      	b.n	8000f32 <__udivmoddi4+0x11e>
 80010f8:	4649      	mov	r1, r9
 80010fa:	e79c      	b.n	8001036 <__udivmoddi4+0x222>
 80010fc:	eba1 0109 	sub.w	r1, r1, r9
 8001100:	46c4      	mov	ip, r8
 8001102:	fbb1 f9fe 	udiv	r9, r1, lr
 8001106:	fb09 f804 	mul.w	r8, r9, r4
 800110a:	e7c4      	b.n	8001096 <__udivmoddi4+0x282>

0800110c <__aeabi_idiv0>:
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800111c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800114e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001164:	68fb      	ldr	r3, [r7, #12]
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001180:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001182:	4a31      	ldr	r2, [pc, #196]	@ (8001248 <MX_ADC_Init+0xd8>)
 8001184:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001188:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800118c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_ADC_Init+0xd4>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011e2:	2206      	movs	r2, #6
 80011e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011e8:	2206      	movs	r2, #6
 80011ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = ENABLE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011f6:	221c      	movs	r2, #28
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_ADC_Init+0xd4>)
 80011fc:	2280      	movs	r2, #128	@ 0x80
 80011fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001202:	2200      	movs	r2, #0
 8001204:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_ADC_Init+0xd4>)
 8001208:	2200      	movs	r2, #0
 800120a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	@ (8001244 <MX_ADC_Init+0xd4>)
 800120e:	f001 fc4d 	bl	8002aac <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC_Init+0xac>
  {
    Error_Handler();
 8001218:	f000 fab0 	bl	800177c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_ADC_Init+0xdc>)
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ADC_Init+0xd4>)
 800122e:	f001 feed 	bl	800300c <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC_Init+0xcc>
  {
    Error_Handler();
 8001238:	f000 faa0 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000e8 	.word	0x200000e8
 8001248:	40012400 	.word	0x40012400
 800124c:	10000010 	.word	0x10000010

08001250 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b096      	sub	sp, #88	@ 0x58
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2238      	movs	r2, #56	@ 0x38
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f00b fd24 	bl	800ccbe <memset>
  if(adcHandle->Instance==ADC)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a15      	ldr	r2, [pc, #84]	@ (80012d0 <HAL_ADC_MspInit+0x80>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d122      	bne.n	80012c6 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8001286:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f004 f833 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800129c:	f000 fa6e 	bl	800177c <Error_Handler>
    }

    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012a4:	f7ff ff4c 	bl	8001140 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff ff31 	bl	8001110 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = PRESSION_Pin;
 80012ae:	2304      	movs	r3, #4
 80012b0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(PRESSION_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <HAL_ADC_MspInit+0x84>)
 80012c2:	f002 fc1b 	bl	8003afc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80012c6:	bf00      	nop
 80012c8:	3758      	adds	r7, #88	@ 0x58
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012400 	.word	0x40012400
 80012d4:	48000400 	.word	0x48000400

080012d8 <LL_AHB2_GRP1_EnableClock>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <MX_GPIO_Init>:

/** Configure pins
     PA8   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff ffdb 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ffd8 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	2080      	movs	r0, #128	@ 0x80
 800132a:	f7ff ffd5 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2004      	movs	r0, #4
 8001330:	f7ff ffd2 	bl	80012d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RES_OUT_Pin|LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin
 8001334:	2200      	movs	r2, #0
 8001336:	214f      	movs	r1, #79	@ 0x4f
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f002 fd55 	bl	8003dea <HAL_GPIO_WritePin>
                          |FE_CTRL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SECHEUR_Pin CASIER_Pin GAZ_Pin */
  GPIO_InitStruct.Pin = SECHEUR_Pin|CASIER_Pin|GAZ_Pin;
 8001340:	2338      	movs	r3, #56	@ 0x38
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	482b      	ldr	r0, [pc, #172]	@ (8001400 <MX_GPIO_Init+0xf8>)
 8001352:	f002 fbd3 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_IN_Pin */
  GPIO_InitStruct.Pin = RES_IN_Pin;
 8001356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001360:	2302      	movs	r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RES_IN_GPIO_Port, &GPIO_InitStruct);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4825      	ldr	r0, [pc, #148]	@ (8001400 <MX_GPIO_Init+0xf8>)
 800136a:	f002 fbc7 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : RES_OUT_Pin */
  GPIO_InitStruct.Pin = RES_OUT_Pin;
 800136e:	2301      	movs	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RES_OUT_GPIO_Port, &GPIO_InitStruct);
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001386:	f002 fbb9 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_BLUE_Pin LED_GREEN_Pin FE_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLUE_Pin|LED_GREEN_Pin|FE_CTRL_Pin;
 800138a:	234e      	movs	r3, #78	@ 0x4e
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001392:	2302      	movs	r3, #2
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f002 fbab 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : MASTER_Pin ALERT_Pin */
  GPIO_InitStruct.Pin = MASTER_Pin|ALERT_Pin;
 80013a6:	2390      	movs	r3, #144	@ 0x90
 80013a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ae:	2302      	movs	r3, #2
 80013b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f002 fb9f 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : VENTILATEUR_Pin */
  GPIO_InitStruct.Pin = VENTILATEUR_Pin;
 80013be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(VENTILATEUR_GPIO_Port, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f002 fb8e 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_Pin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80013e0:	2308      	movs	r3, #8
 80013e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_GPIO_Init+0xfc>)
 80013f2:	f002 fb83 	bl	8003afc <HAL_GPIO_Init>

}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400
 8001404:	48001c00 	.word	0x48001c00

08001408 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <MX_IWDG_Init+0x34>)
 800140e:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <MX_IWDG_Init+0x38>)
 8001410:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_IWDG_Init+0x34>)
 8001414:	2203      	movs	r2, #3
 8001416:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 999;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <MX_IWDG_Init+0x34>)
 800141a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 999;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_IWDG_Init+0x34>)
 8001422:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001426:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_IWDG_Init+0x34>)
 800142a:	f002 fcf5 	bl	8003e18 <HAL_IWDG_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001434:	f000 f9a2 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000014c 	.word	0x2000014c
 8001440:	40003000 	.word	0x40003000

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4906      	ldr	r1, [pc, #24]	@ (8001478 <__NVIC_EnableIRQ+0x34>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100

0800147c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001494:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800149c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	e000      	b.n	80014a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f9      	beq.n	80014a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014d8:	f023 0218 	bic.w	r2, r3, #24
 80014dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
	...

080014f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014f8:	f001 f8fa 	bl	80026f0 <HAL_Init>

	// Initialisation du générateur aléatoire pour le jitter radio
	// Utilisation de la RTC ou d'une valeur ADC comme entropie si possible
	srand((unsigned int)HAL_GetTick());
 80014fc:	f000 fa60 	bl	80019c0 <HAL_GetTick>
 8001500:	4603      	mov	r3, r0
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fa38 	bl	800c978 <srand>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001508:	f000 f828 	bl	800155c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800150c:	f7ff fefc 	bl	8001308 <MX_GPIO_Init>
	MX_ADC_Init();
 8001510:	f7ff fe2e 	bl	8001170 <MX_ADC_Init>
	MX_SubGHz_Phy_Init();
 8001514:	f00a f9b5 	bl	800b882 <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 8001518:	f000 feea 	bl	80022f0 <MX_USART1_UART_Init>
	MX_IWDG_Init();
 800151c:	f7ff ff74 	bl	8001408 <MX_IWDG_Init>
	MX_RTC_Init();
 8001520:	f000 f95a 	bl	80017d8 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	APP_TMP275_Init();
 8001524:	f000 f8f6 	bl	8001714 <APP_TMP275_Init>

	TIM2_Init();
 8001528:	f000 f87a 	bl	8001620 <TIM2_Init>
	if(!HAL_GPIO_ReadPin(MASTER_GPIO_Port, MASTER_Pin)) TIM16_Init();
 800152c:	2110      	movs	r1, #16
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f002 fc43 	bl	8003dbc <HAL_GPIO_ReadPin>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <main+0x4c>
 800153c:	f000 f8a2 	bl	8001684 <TIM16_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001540:	b662      	cpsie	i
}
 8001542:	bf00      	nop

	__enable_irq();

	SubghzApp_Start();
 8001544:	f00a fec4 	bl	800c2d0 <SubghzApp_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8001548:	4803      	ldr	r0, [pc, #12]	@ (8001558 <main+0x64>)
 800154a:	f002 fcb4 	bl	8003eb6 <HAL_IWDG_Refresh>
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800154e:	f00a f9a0 	bl	800b892 <MX_SubGHz_Phy_Process>
		HAL_IWDG_Refresh(&hiwdg);
 8001552:	bf00      	nop
 8001554:	e7f8      	b.n	8001548 <main+0x54>
 8001556:	bf00      	nop
 8001558:	2000014c 	.word	0x2000014c

0800155c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09a      	sub	sp, #104	@ 0x68
 8001560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2248      	movs	r2, #72	@ 0x48
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00b fba7 	bl	800ccbe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001582:	f002 fca7 	bl	8003ed4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff ff9e 	bl	80014c8 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <SystemClock_Config+0xc0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <SystemClock_Config+0xc0>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <SystemClock_Config+0xc0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80015a8:	232e      	movs	r3, #46	@ 0x2e
 80015aa:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ac:	2381      	movs	r3, #129	@ 0x81
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015b6:	2301      	movs	r3, #1
 80015b8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ba:	2340      	movs	r3, #64	@ 0x40
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80015c2:	23a0      	movs	r3, #160	@ 0xa0
 80015c4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 ff4e 	bl	8004478 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80015e2:	f000 f8cb 	bl	800177c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80015e6:	234f      	movs	r3, #79	@ 0x4f
 80015e8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f003 faba 	bl	8004b7c <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800160e:	f000 f8b5 	bl	800177c <Error_Handler>
	}
}
 8001612:	bf00      	nop
 8001614:	3768      	adds	r7, #104	@ 0x68
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400

08001620 <TIM2_Init>:

/* USER CODE BEGIN 4 */
void TIM2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6593      	str	r3, [r2, #88]	@ 0x58
	TIM2->PSC = (uint16_t)31999;
 8001634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001638:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = (uint16_t)5000; // 5 seconds period
 800163e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001646:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER |= (1 << 0);
 8001648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8001658:	201b      	movs	r0, #27
 800165a:	f7ff fef3 	bl	8001444 <__NVIC_EnableIRQ>
	// Start TIM2 only for transmitters (MASTER pin high)
	if (HAL_GPIO_ReadPin(MASTER_GPIO_Port, MASTER_Pin)) {
 800165e:	2110      	movs	r1, #16
 8001660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001664:	f002 fbaa 	bl	8003dbc <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <TIM2_Init+0x5e>
		TIM2->CR1 |= TIM_CR1_CEN;
 800166e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6013      	str	r3, [r2, #0]
	}
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <TIM16_Init>:

void TIM16_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001696:	6613      	str	r3, [r2, #96]	@ 0x60
	TIM16->PSC = (uint16_t)31999;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <TIM16_Init+0x54>)
 800169a:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM16->ARR = (uint16_t)10000;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <TIM16_Init+0x54>)
 80016a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM16->CR1 &= ~TIM_CR1_DIR;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <TIM16_Init+0x54>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <TIM16_Init+0x54>)
 80016ae:	f023 0310 	bic.w	r3, r3, #16
 80016b2:	6013      	str	r3, [r2, #0]
	TIM16->DIER |= TIM_DIER_UIE;
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <TIM16_Init+0x54>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <TIM16_Init+0x54>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM16_IRQn);
 80016c0:	201c      	movs	r0, #28
 80016c2:	f7ff febf 	bl	8001444 <__NVIC_EnableIRQ>
	TIM16->CR1 |= TIM_CR1_CEN;
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <TIM16_Init+0x54>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <TIM16_Init+0x54>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6013      	str	r3, [r2, #0]
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40014400 	.word	0x40014400

080016dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	SubghzApp_Event();
 80016e0:	f00a fbfa 	bl	800bed8 <SubghzApp_Event>
	TIM2->SR &= ~(1 << 0);
 80016e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6113      	str	r3, [r2, #16]
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	SubGHz_Phy_Timeout();
 80016fc:	f00a f8cf 	bl	800b89e <SubGHz_Phy_Timeout>
	TIM16->SR &= ~(1 << 0);
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <TIM16_IRQHandler+0x18>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a02      	ldr	r2, [pc, #8]	@ (8001710 <TIM16_IRQHandler+0x18>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6113      	str	r3, [r2, #16]
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40014400 	.word	0x40014400

08001714 <APP_TMP275_Init>:

void APP_TMP275_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	TMP275_GPIO_Init();
 8001718:	f000 fd7a 	bl	8002210 <TMP275_GPIO_Init>
	TMP275_I2C_Init();
 800171c:	f000 fd56 	bl	80021cc <TMP275_I2C_Init>

	TMP275_Init(&tmp_sensor_1);
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <APP_TMP275_Init+0x24>)
 8001722:	f000 fc49 	bl	8001fb8 <TMP275_Init>
	TMP275_Init(&tmp_sensor_2);
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <APP_TMP275_Init+0x28>)
 8001728:	f000 fc46 	bl	8001fb8 <TMP275_Init>
	TMP275_Init(&tmp_sensor_3);
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <APP_TMP275_Init+0x2c>)
 800172e:	f000 fc43 	bl	8001fb8 <TMP275_Init>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000004 	.word	0x20000004
 800173c:	20000020 	.word	0x20000020
 8001740:	2000003c 	.word	0x2000003c

08001744 <_write>:

int _write(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e009      	b.n	800176a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	60ba      	str	r2, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe8c 	bl	800147c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf1      	blt.n	8001756 <_write+0x12>
	}
	return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <LL_APB1_GRP1_EnableClock>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017cc:	68fb      	ldr	r3, [r7, #12]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_RTC_Init+0x58>)
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <MX_RTC_Init+0x5c>)
 80017e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017e2:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <MX_RTC_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_RTC_Init+0x58>)
 80017ea:	227f      	movs	r2, #127	@ 0x7f
 80017ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_RTC_Init+0x58>)
 80017f0:	22ff      	movs	r2, #255	@ 0xff
 80017f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_RTC_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <MX_RTC_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <MX_RTC_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001806:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_RTC_Init+0x58>)
 8001808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <MX_RTC_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_RTC_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_RTC_Init+0x58>)
 800181c:	f003 fe88 	bl	8005530 <HAL_RTC_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001826:	f7ff ffa9 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000015c 	.word	0x2000015c
 8001834:	40002800 	.word	0x40002800

08001838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	@ 0x40
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2238      	movs	r2, #56	@ 0x38
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f00b fa38 	bl	800ccbe <memset>
  if(rtcHandle->Instance==RTC)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0e      	ldr	r2, [pc, #56]	@ (800188c <HAL_RTC_MspInit+0x54>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d115      	bne.n	8001884 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800185c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800185e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fd47 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001874:	f7ff ff82 	bl	800177c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001878:	f7ff ff86 	bl	8001788 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800187c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001880:	f7ff ff92 	bl	80017a8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001884:	bf00      	nop
 8001886:	3740      	adds	r7, #64	@ 0x40
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40002800 	.word	0x40002800

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2005      	movs	r0, #5
 800189a:	f002 f83e 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800189e:	2005      	movs	r0, #5
 80018a0:	f002 f855 	bl	800394e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f8:	f000 ff54 	bl	80027a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <USART1_IRQHandler+0x14>)
 8001912:	f004 fd8d 	bl	8006430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USART1_Interrupt();
 8001916:	f000 fd8d 	bl	8002434 <USART1_Interrupt>
  /* USER CODE END USART1_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000248 	.word	0x20000248

08001924 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <SUBGHZ_Radio_IRQHandler+0x10>)
 800192a:	f004 fa73 	bl	8005e14 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000194 	.word	0x20000194

08001938 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001944:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800195c:	68fb      	ldr	r3, [r7, #12]
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_2;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SUBGHZ_Init+0x20>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_SUBGHZ_Init+0x20>)
 8001974:	f003 ff90 	bl	8005898 <HAL_SUBGHZ_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800197e:	f7ff fefd 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000194 	.word	0x20000194

0800198c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff ffcf 	bl	8001938 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2101      	movs	r1, #1
 800199e:	2032      	movs	r0, #50	@ 0x32
 80019a0:	f001 ffbb 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019a4:	2032      	movs	r0, #50	@ 0x32
 80019a6:	f001 ffd2 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_GetTick+0x2c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_GetTick+0x1a>
    /* please use temporarily another timebase source (SysTick or TIMx), which implies also */
    /* to rework the above function HAL_InitTick() and to call HAL_IncTick() on the timebase IRQ */
    /* Note: when TIMER_IF is based on RTC, stm32wlxx_hal_rtc.c calls this function before TimeServer is functional */
    /* RTC TIMEOUT will not expire, i.e. if RTC has an hw problem it will keep looping in the RTC_Init function */
    /* USER CODE BEGIN HAL_GetTick_EarlyCall */
	  ret = uwTick;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_GetTick+0x30>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	e002      	b.n	80019e0 <HAL_GetTick+0x20>
    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80019da:	f000 f904 	bl	8001be6 <TIMER_IF_GetTimerValue>
 80019de:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200001d0 	.word	0x200001d0
 80019f0:	20000314 	.word	0x20000314

080019f4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f91f 	bl	8001c42 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <_kill>:

int _kill(int pid, int sig)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a24:	f00b f99a 	bl	800cd5c <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2216      	movs	r2, #22
 8001a2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_exit>:

void _exit (int status)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a42:	f04f 31ff 	mov.w	r1, #4294967295
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffe7 	bl	8001a1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <_exit+0x12>

08001a50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
  }

  return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f00b f91e 	bl	800cd5c <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20010000 	.word	0x20010000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	200001d4 	.word	0x200001d4
 8001b54:	20000670 	.word	0x20000670

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b085      	sub	sp, #20
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001bac:	4b02      	ldr	r3, [pc, #8]	@ (8001bb8 <TIMER_IF_SetTimerContext+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	200001d8 	.word	0x200001d8

08001bbc <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <TIMER_IF_GetTimerContext+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	200001d8 	.word	0x200001d8

08001bd0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8001bda:	687b      	ldr	r3, [r7, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001bf0:	687b      	ldr	r3, [r7, #4]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <I2C_WriteRegister>:
		0.0625f   // 12-bit
};

/* ===== FONCTIONS PRIVÉES ===== */
static TMP275_Status_t I2C_WriteRegister(TMP275_Handle_t* htmp275, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	@ 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	72fb      	strb	r3, [r7, #11]
 8001c64:	4613      	mov	r3, r2
 8001c66:	72bb      	strb	r3, [r7, #10]
	I2C_TypeDef* I2Cx = htmp275->i2c_instance;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	61bb      	str	r3, [r7, #24]
	uint8_t device_address = htmp275->device_address << 1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]

	while (I2Cx->ISR & I2C_ISR_BUSY);
 8001c76:	bf00      	nop
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <I2C_WriteRegister+0x24>

	I2Cx->CR2 = 0;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 &= ~I2C_CR2_ADD10;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= ((length+1) << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	7abb      	ldrb	r3, [r7, #10]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 &= ~I2C_CR2_RD_WRN;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_START;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	605a      	str	r2, [r3, #4]

	//wait TXIS flag
	while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8001cce:	e00f      	b.n	8001cf0 <I2C_WriteRegister+0x9c>
		//check errors
		if (I2Cx->ISR & I2C_ISR_ARLO)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_WriteRegister+0x8c>
		{
			return TMP275_BUS_ERROR;
 8001cdc:	2305      	movs	r3, #5
 8001cde:	e064      	b.n	8001daa <I2C_WriteRegister+0x156>
		}
		else if (I2Cx->ISR & I2C_ISR_NACKF)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <I2C_WriteRegister+0x9c>
		{
			return TMP275_NACK;
 8001cec:	2304      	movs	r3, #4
 8001cee:	e05c      	b.n	8001daa <I2C_WriteRegister+0x156>
	while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0e9      	beq.n	8001cd0 <I2C_WriteRegister+0x7c>
		}
	}
	//write data
	I2Cx->TXDR = reg;
 8001cfc:	7afa      	ldrb	r2, [r7, #11]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	629a      	str	r2, [r3, #40]	@ 0x28

	//send data
	for (uint16_t i = 0; i < length; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	e01f      	b.n	8001d48 <I2C_WriteRegister+0xf4>
		//wait TXIS flag
		while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
			//check errors
			if (I2Cx->ISR & I2C_ISR_ARLO)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <I2C_WriteRegister+0xc4>
			{
				return TMP275_BUS_ERROR;
 8001d14:	2305      	movs	r3, #5
 8001d16:	e048      	b.n	8001daa <I2C_WriteRegister+0x156>
			}
			else if (I2Cx->ISR & I2C_ISR_NACKF)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <I2C_WriteRegister+0xd4>
			{
				return TMP275_NACK;
 8001d24:	2304      	movs	r3, #4
 8001d26:	e040      	b.n	8001daa <I2C_WriteRegister+0x156>
		while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e9      	beq.n	8001d08 <I2C_WriteRegister+0xb4>
			}
		}
		//write data
		I2Cx->TXDR = data[i];
 8001d34:	8bfb      	ldrh	r3, [r7, #30]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
	for (uint16_t i = 0; i < length; i++) {
 8001d42:	8bfb      	ldrh	r3, [r7, #30]
 8001d44:	3301      	adds	r3, #1
 8001d46:	83fb      	strh	r3, [r7, #30]
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	8bfa      	ldrh	r2, [r7, #30]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3ea      	bcc.n	8001d28 <I2C_WriteRegister+0xd4>
	}

	//wait end of transmission
	while (!(I2Cx->ISR & I2C_ISR_TC)) {
 8001d52:	e00f      	b.n	8001d74 <I2C_WriteRegister+0x120>
		if (I2Cx->ISR & I2C_ISR_ARLO)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <I2C_WriteRegister+0x110>
		{
			return TMP275_BUS_ERROR;
 8001d60:	2305      	movs	r3, #5
 8001d62:	e022      	b.n	8001daa <I2C_WriteRegister+0x156>
		}
		else if (I2Cx->ISR & I2C_ISR_NACKF)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <I2C_WriteRegister+0x120>
		{
			return TMP275_NACK;
 8001d70:	2304      	movs	r3, #4
 8001d72:	e01a      	b.n	8001daa <I2C_WriteRegister+0x156>
	while (!(I2Cx->ISR & I2C_ISR_TC)) {
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0e9      	beq.n	8001d54 <I2C_WriteRegister+0x100>
		}
	}
	//generate stop
	I2Cx->CR2 |= I2C_CR2_STOP;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
	//wait stop
	while (!(I2Cx->ISR & I2C_ISR_STOPF));
 8001d8c:	bf00      	nop
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f9      	beq.n	8001d8e <I2C_WriteRegister+0x13a>
	while(I2Cx->ISR & I2C_ISR_BUSY);
 8001d9a:	bf00      	nop
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <I2C_WriteRegister+0x148>
	return TMP275_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <I2C_ReadRegister>:

static TMP275_Status_t I2C_ReadRegister(TMP275_Handle_t* htmp275, uint8_t reg, uint8_t *buffer, uint8_t length)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	72fb      	strb	r3, [r7, #11]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	72bb      	strb	r3, [r7, #10]
	I2C_TypeDef* I2Cx = htmp275->i2c_instance;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
	uint8_t device_address = htmp275->device_address << 1;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	791b      	ldrb	r3, [r3, #4]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]

	while (I2Cx->ISR & I2C_ISR_BUSY);
 8001dd6:	bf00      	nop
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <I2C_ReadRegister+0x24>

	//set reg into pointer register
	I2Cx->CR2 = 0;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 &= ~I2C_CR2_ADD10;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= (1 << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 &= ~I2C_CR2_RD_WRN;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_START;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	605a      	str	r2, [r3, #4]

	//wait TXIS flag
	while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8001e26:	e00f      	b.n	8001e48 <I2C_ReadRegister+0x94>
		//check errors
		if (I2Cx->ISR & I2C_ISR_ARLO)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <I2C_ReadRegister+0x84>
		{
			return TMP275_BUS_ERROR;
 8001e34:	2305      	movs	r3, #5
 8001e36:	e082      	b.n	8001f3e <I2C_ReadRegister+0x18a>
		}
		else if (I2Cx->ISR & I2C_ISR_NACKF)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <I2C_ReadRegister+0x94>
		{
			return TMP275_NACK;
 8001e44:	2304      	movs	r3, #4
 8001e46:	e07a      	b.n	8001f3e <I2C_ReadRegister+0x18a>
	while (!(I2Cx->ISR & I2C_ISR_TXIS)) {
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0e9      	beq.n	8001e28 <I2C_ReadRegister+0x74>
		}
	}
	//write reg
	I2Cx->TXDR = reg;
 8001e54:	7afa      	ldrb	r2, [r7, #11]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28

	// Attendre la fin de la première transmission
	while (!(I2Cx->ISR & I2C_ISR_TC)) {
 8001e5a:	e00f      	b.n	8001e7c <I2C_ReadRegister+0xc8>
	    if (I2Cx->ISR & I2C_ISR_ARLO) return TMP275_BUS_ERROR;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <I2C_ReadRegister+0xb8>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	e068      	b.n	8001f3e <I2C_ReadRegister+0x18a>
	    if (I2Cx->ISR & I2C_ISR_NACKF) return TMP275_NACK;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <I2C_ReadRegister+0xc8>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e060      	b.n	8001f3e <I2C_ReadRegister+0x18a>
	while (!(I2Cx->ISR & I2C_ISR_TC)) {
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0e9      	beq.n	8001e5c <I2C_ReadRegister+0xa8>
	}

	// Reconfigurer pour la lecture
	I2Cx->CR2 = 0; // Reset complet
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= device_address & I2C_CR2_SADD_Msk;
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= (length << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES_Msk;
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	7abb      	ldrb	r3, [r7, #10]
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_RD_WRN;
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
	I2Cx->CR2 |= I2C_CR2_START;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]

	//receive data
	for (uint16_t i = 0; i < length; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	83fb      	strh	r3, [r7, #30]
 8001ec8:	e01f      	b.n	8001f0a <I2C_ReadRegister+0x156>
		//wait for data
		while (!(I2Cx->ISR & I2C_ISR_RXNE)) {
			//check errors
			if (I2Cx->ISR & I2C_ISR_ARLO)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_ReadRegister+0x126>
			{
				return TMP275_BUS_ERROR;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e031      	b.n	8001f3e <I2C_ReadRegister+0x18a>
			}
			else if (I2Cx->ISR & I2C_ISR_NACKF)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <I2C_ReadRegister+0x136>
			{
				return TMP275_NACK;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e029      	b.n	8001f3e <I2C_ReadRegister+0x18a>
		while (!(I2Cx->ISR & I2C_ISR_RXNE)) {
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0e9      	beq.n	8001eca <I2C_ReadRegister+0x116>
			}
		}
		//read data
		buffer[i] = I2Cx->RXDR;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001efa:	8bfb      	ldrh	r3, [r7, #30]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	b2ca      	uxtb	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i++) {
 8001f04:	8bfb      	ldrh	r3, [r7, #30]
 8001f06:	3301      	adds	r3, #1
 8001f08:	83fb      	strh	r3, [r7, #30]
 8001f0a:	7abb      	ldrb	r3, [r7, #10]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8bfa      	ldrh	r2, [r7, #30]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3ea      	bcc.n	8001eea <I2C_ReadRegister+0x136>
	}

	//generate stop
	I2Cx->CR2 |= I2C_CR2_STOP;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
	//wait stop
	while (!(I2Cx->ISR & I2C_ISR_STOPF));
 8001f20:	bf00      	nop
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f9      	beq.n	8001f22 <I2C_ReadRegister+0x16e>
	while(I2Cx->ISR & I2C_ISR_BUSY);
 8001f2e:	bf00      	nop
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <I2C_ReadRegister+0x17c>
	return TMP275_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <TMP275_ConvertRawToTemperature>:

float TMP275_ConvertRawToTemperature(int16_t raw_temp, TMP275_Resolution_t resolution) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	460a      	mov	r2, r1
 8001f52:	80fb      	strh	r3, [r7, #6]
 8001f54:	4613      	mov	r3, r2
 8001f56:	717b      	strb	r3, [r7, #5]
	return (float)raw_temp * resolution_factors[resolution];
 8001f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fd57 	bl	8000a10 <__aeabi_i2f>
 8001f62:	4602      	mov	r2, r0
 8001f64:	797b      	ldrb	r3, [r7, #5]
 8001f66:	4906      	ldr	r1, [pc, #24]	@ (8001f80 <TMP275_ConvertRawToTemperature+0x38>)
 8001f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f7fe fda2 	bl	8000ab8 <__aeabi_fmul>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0800e340 	.word	0x0800e340

08001f84 <TMP275_ConvertTemperatureToRaw>:

int16_t TMP275_ConvertTemperatureToRaw(float temperature, TMP275_Resolution_t resolution) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
	return (int16_t)(temperature / resolution_factors[resolution]);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	4a08      	ldr	r2, [pc, #32]	@ (8001fb4 <TMP275_ConvertTemperatureToRaw+0x30>)
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fe40 	bl	8000c20 <__aeabi_fdiv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fed8 	bl	8000d58 <__aeabi_f2iz>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b21b      	sxth	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0800e340 	.word	0x0800e340

08001fb8 <TMP275_Init>:

/* ===== IMPLÉMENTATION DES FONCTIONS PUBLIQUES ===== */

TMP275_Status_t TMP275_Init(TMP275_Handle_t* htmp275) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	if (htmp275 == NULL) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <TMP275_Init+0x12>
		return TMP275_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e01d      	b.n	8002006 <TMP275_Init+0x4e>
	}

	htmp275->initialized = false;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	761a      	strb	r2, [r3, #24]

	// Tester la communication
	uint8_t config_reg;
	if (I2C_ReadRegister(htmp275, TMP275_REG_CONFIG, &config_reg, 1) != TMP275_OK) {
 8001fd0:	f107 020f 	add.w	r2, r7, #15
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff feeb 	bl	8001db4 <I2C_ReadRegister>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <TMP275_Init+0x30>
		return TMP275_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e00e      	b.n	8002006 <TMP275_Init+0x4e>
	}

	// Appliquer la configuration par défaut
	if (TMP275_Configure(htmp275, &htmp275->config) != TMP275_OK) {
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3308      	adds	r3, #8
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f80d 	bl	800200e <TMP275_Configure>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <TMP275_Init+0x46>
		return TMP275_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e003      	b.n	8002006 <TMP275_Init+0x4e>
	}

	htmp275->initialized = true;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	761a      	strb	r2, [r3, #24]
	return TMP275_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <TMP275_Configure>:

	htmp275->initialized = false;
	return TMP275_OK;
}

TMP275_Status_t TMP275_Configure(TMP275_Handle_t* htmp275, TMP275_Config_t* config) {
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b087      	sub	sp, #28
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
	if (htmp275 == NULL || config == NULL) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <TMP275_Configure+0x16>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <TMP275_Configure+0x1a>
		return TMP275_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e098      	b.n	800215a <TMP275_Configure+0x14c>
	}

	uint8_t config_reg = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	757b      	strb	r3, [r7, #21]

	// Construire le registre de configuration
	if (config->mode == TMP275_MODE_SHUTDOWN) {
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	785b      	ldrb	r3, [r3, #1]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d104      	bne.n	800203e <TMP275_Configure+0x30>
		config_reg |= TMP275_CONFIG_SD_BIT;
 8002034:	7d7b      	ldrb	r3, [r7, #21]
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	757b      	strb	r3, [r7, #21]
	}

	if (config->alert_mode == TMP275_INTERRUPT_MODE) {
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d104      	bne.n	8002050 <TMP275_Configure+0x42>
		config_reg |= TMP275_CONFIG_TM_BIT;
 8002046:	7d7b      	ldrb	r3, [r7, #21]
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	757b      	strb	r3, [r7, #21]
	}

	if (config->alert_polarity_high) {
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	791b      	ldrb	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <TMP275_Configure+0x54>
		config_reg |= TMP275_CONFIG_POL_BIT;
 8002058:	7d7b      	ldrb	r3, [r7, #21]
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	757b      	strb	r3, [r7, #21]
	}

	// Configuration de la queue de fautes
	switch (config->fault_queue) {
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	78db      	ldrb	r3, [r3, #3]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d012      	beq.n	8002090 <TMP275_Configure+0x82>
 800206a:	2b06      	cmp	r3, #6
 800206c:	dc16      	bgt.n	800209c <TMP275_Configure+0x8e>
 800206e:	2b02      	cmp	r3, #2
 8002070:	d002      	beq.n	8002078 <TMP275_Configure+0x6a>
 8002072:	2b04      	cmp	r3, #4
 8002074:	d006      	beq.n	8002084 <TMP275_Configure+0x76>
	case 2: config_reg |= TMP275_CONFIG_F0_BIT; break;
	case 4: config_reg |= TMP275_CONFIG_F1_BIT; break;
	case 6: config_reg |= TMP275_CONFIG_F1_BIT | TMP275_CONFIG_F0_BIT; break;
	default: break; // 1 fault (par défaut)
 8002076:	e011      	b.n	800209c <TMP275_Configure+0x8e>
	case 2: config_reg |= TMP275_CONFIG_F0_BIT; break;
 8002078:	7d7b      	ldrb	r3, [r7, #21]
 800207a:	f043 0308 	orr.w	r3, r3, #8
 800207e:	b2db      	uxtb	r3, r3
 8002080:	757b      	strb	r3, [r7, #21]
 8002082:	e00c      	b.n	800209e <TMP275_Configure+0x90>
	case 4: config_reg |= TMP275_CONFIG_F1_BIT; break;
 8002084:	7d7b      	ldrb	r3, [r7, #21]
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	b2db      	uxtb	r3, r3
 800208c:	757b      	strb	r3, [r7, #21]
 800208e:	e006      	b.n	800209e <TMP275_Configure+0x90>
	case 6: config_reg |= TMP275_CONFIG_F1_BIT | TMP275_CONFIG_F0_BIT; break;
 8002090:	7d7b      	ldrb	r3, [r7, #21]
 8002092:	f043 0318 	orr.w	r3, r3, #24
 8002096:	b2db      	uxtb	r3, r3
 8002098:	757b      	strb	r3, [r7, #21]
 800209a:	e000      	b.n	800209e <TMP275_Configure+0x90>
	default: break; // 1 fault (par défaut)
 800209c:	bf00      	nop
	}

	// Configuration de la résolution
	config_reg |= config->resolution << 5;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	015b      	lsls	r3, r3, #5
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	7d7b      	ldrb	r3, [r7, #21]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	757b      	strb	r3, [r7, #21]

	// Écrire la configuration
	if (I2C_WriteRegister(htmp275, TMP275_REG_CONFIG, &config_reg, 1) != TMP275_OK) {
 80020b4:	f107 0215 	add.w	r2, r7, #21
 80020b8:	2301      	movs	r3, #1
 80020ba:	2101      	movs	r1, #1
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fdc9 	bl	8001c54 <I2C_WriteRegister>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <TMP275_Configure+0xbe>
		return TMP275_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e046      	b.n	800215a <TMP275_Configure+0x14c>
	}

	// Configurer les seuils
	int16_t raw_temp = TMP275_ConvertTemperatureToRaw(htmp275->config.temp_low_threshold, htmp275->config.resolution);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7a1b      	ldrb	r3, [r3, #8]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7ff ff54 	bl	8001f84 <TMP275_ConvertTemperatureToRaw>
 80020dc:	4603      	mov	r3, r0
 80020de:	82fb      	strh	r3, [r7, #22]
	if (I2C_WriteRegister(htmp275, TMP275_REG_TLOW, (uint8_t[]){raw_temp >> 8, raw_temp}, 2) != TMP275_OK) {
 80020e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020e4:	121b      	asrs	r3, r3, #8
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	743b      	strb	r3, [r7, #16]
 80020ec:	8afb      	ldrh	r3, [r7, #22]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	747b      	strb	r3, [r7, #17]
 80020f2:	f107 0210 	add.w	r2, r7, #16
 80020f6:	2302      	movs	r3, #2
 80020f8:	2102      	movs	r1, #2
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fdaa 	bl	8001c54 <I2C_WriteRegister>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <TMP275_Configure+0xfc>
		return TMP275_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e027      	b.n	800215a <TMP275_Configure+0x14c>
	}

	raw_temp = TMP275_ConvertTemperatureToRaw(htmp275->config.temp_high_threshold, htmp275->config.resolution);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f7ff ff35 	bl	8001f84 <TMP275_ConvertTemperatureToRaw>
 800211a:	4603      	mov	r3, r0
 800211c:	82fb      	strh	r3, [r7, #22]
	if (I2C_WriteRegister(htmp275, TMP275_REG_THIGH, (uint8_t[]){raw_temp >> 8, raw_temp}, 2) != TMP275_OK) {
 800211e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002122:	121b      	asrs	r3, r3, #8
 8002124:	b21b      	sxth	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	733b      	strb	r3, [r7, #12]
 800212a:	8afb      	ldrh	r3, [r7, #22]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	737b      	strb	r3, [r7, #13]
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	2302      	movs	r3, #2
 8002136:	2103      	movs	r1, #3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd8b 	bl	8001c54 <I2C_WriteRegister>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <TMP275_Configure+0x13a>
		return TMP275_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e008      	b.n	800215a <TMP275_Configure+0x14c>
	}

	// Sauvegarder la configuration
	htmp275->config = *config;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	f103 0408 	add.w	r4, r3, #8
 8002150:	4613      	mov	r3, r2
 8002152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return TMP275_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}

08002162 <TMP275_ReadTemperatureRaw>:
	}

	return status;
}

TMP275_Status_t TMP275_ReadTemperatureRaw(TMP275_Handle_t* htmp275, int16_t* temp_raw) {
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	if (htmp275 == NULL || temp_raw == NULL || !htmp275->initialized) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <TMP275_ReadTemperatureRaw+0x24>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <TMP275_ReadTemperatureRaw+0x24>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e1b      	ldrb	r3, [r3, #24]
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <TMP275_ReadTemperatureRaw+0x28>
		return TMP275_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e01c      	b.n	80021c4 <TMP275_ReadTemperatureRaw+0x62>
	}

	uint8_t _raw[2];
	TMP275_Status_t status = I2C_ReadRegister(htmp275, TMP275_REG_TEMP, _raw, 2);
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	2302      	movs	r3, #2
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fe0e 	bl	8001db4 <I2C_ReadRegister>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]

	if (status != TMP275_OK) *temp_raw = 0;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <TMP275_ReadTemperatureRaw+0x48>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
 80021a8:	e00b      	b.n	80021c2 <TMP275_ReadTemperatureRaw+0x60>
	else *temp_raw = (int16_t)((_raw[0] << 8) | _raw[1]) >> 4;
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	7b7b      	ldrb	r3, [r7, #13]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	111b      	asrs	r3, r3, #4
 80021bc:	b21a      	sxth	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	801a      	strh	r2, [r3, #0]

	return status;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TMP275_I2C_Init>:

bool TMP275_IsInitialized(TMP275_Handle_t* htmp275) {
	return (htmp275 != NULL) && htmp275->initialized;
}

void TMP275_I2C_Init(void) {
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021de:	6593      	str	r3, [r2, #88]	@ 0x58

	I2C1->CR1 &= ~I2C_CR1_PE;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <TMP275_I2C_Init+0x3c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a08      	ldr	r2, [pc, #32]	@ (8002208 <TMP275_I2C_Init+0x3c>)
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = I2C_TIMING_32MHZ_100K;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <TMP275_I2C_Init+0x3c>)
 80021ee:	4a07      	ldr	r2, [pc, #28]	@ (800220c <TMP275_I2C_Init+0x40>)
 80021f0:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= I2C_CR1_PE;
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <TMP275_I2C_Init+0x3c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <TMP275_I2C_Init+0x3c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40005400 	.word	0x40005400
 800220c:	00707cbb 	.word	0x00707cbb

08002210 <TMP275_GPIO_Init>:

void TMP275_GPIO_Init(void) {
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Configuration PB6 (SCL) et PB7 (SDA) pour I2C1
	// Mode alternatif
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a18      	ldr	r2, [pc, #96]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800222a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800222e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8002230:	4b16      	ldr	r3, [pc, #88]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002236:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800223a:	6013      	str	r3, [r2, #0]
	// Open-drain
	GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 800223c:	4b13      	ldr	r3, [pc, #76]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a12      	ldr	r2, [pc, #72]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002242:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002246:	6053      	str	r3, [r2, #4]
	// Vitesse élevée
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800224e:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8002252:	6093      	str	r3, [r2, #8]
	// Pull-up interne (optionnel si pull-up externes présentes)
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a0c      	ldr	r2, [pc, #48]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800225a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800225e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD6_0 | GPIO_PUPDR_PUPD7_0);
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002266:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 800226a:	60d3      	str	r3, [r2, #12]
	// Fonction alternative AF4 pour I2C1
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a06      	ldr	r2, [pc, #24]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 8002272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002276:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((0x4 << GPIO_AFRL_AFSEL6_Pos) | (0x4 << GPIO_AFRL_AFSEL7_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a03      	ldr	r2, [pc, #12]	@ (800228c <TMP275_GPIO_Init+0x7c>)
 800227e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8002282:	6213      	str	r3, [r2, #32]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	48000400 	.word	0x48000400

08002290 <LL_AHB2_GRP1_EnableClock>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <LL_APB2_GRP1_EnableClock>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e4:	68fb      	ldr	r3, [r7, #12]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f4:	4b25      	ldr	r3, [pc, #148]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 80022f6:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <MX_USART1_UART_Init+0xa0>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b22      	ldr	r3, [pc, #136]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800230e:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b19      	ldr	r3, [pc, #100]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800232c:	4b17      	ldr	r3, [pc, #92]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002332:	4b16      	ldr	r3, [pc, #88]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002334:	2200      	movs	r2, #0
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002338:	4814      	ldr	r0, [pc, #80]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800233a:	f003 ff47 	bl	80061cc <HAL_UART_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002344:	f7ff fa1a 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002348:	2100      	movs	r1, #0
 800234a:	4810      	ldr	r0, [pc, #64]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800234c:	f005 ffc9 	bl	80082e2 <HAL_UARTEx_SetTxFifoThreshold>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002356:	f7ff fa11 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800235a:	2100      	movs	r1, #0
 800235c:	480b      	ldr	r0, [pc, #44]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800235e:	f005 fffe 	bl	800835e <HAL_UARTEx_SetRxFifoThreshold>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002368:	f7ff fa08 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800236c:	4807      	ldr	r0, [pc, #28]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 800236e:	f005 ff80 	bl	8008272 <HAL_UARTEx_DisableFifoMode>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002378:	f7ff fa00 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800237c:	2201      	movs	r2, #1
 800237e:	4905      	ldr	r1, [pc, #20]	@ (8002394 <MX_USART1_UART_Init+0xa4>)
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <MX_USART1_UART_Init+0x9c>)
 8002382:	f004 f809 	bl	8006398 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000248 	.word	0x20000248
 8002390:	40013800 	.word	0x40013800
 8002394:	200001dc 	.word	0x200001dc

08002398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b096      	sub	sp, #88	@ 0x58
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2238      	movs	r2, #56	@ 0x38
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f00a fc80 	bl	800ccbe <memset>
  if(uartHandle->Instance==USART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_UART_MspInit+0x98>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d12f      	bne.n	8002428 <HAL_UART_MspInit+0x90>
  /* USER CODE BEGIN USART1_MspInit 0 */
  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023cc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80023d0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 ff90 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023e2:	f7ff f9cb 	bl	800177c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80023ea:	f7ff ff69 	bl	80022c0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff ff4e 	bl	8002290 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023f8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002406:	2307      	movs	r3, #7
 8002408:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002414:	f001 fb72 	bl	8003afc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2102      	movs	r1, #2
 800241c:	2024      	movs	r0, #36	@ 0x24
 800241e:	f001 fa7c 	bl	800391a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002422:	2024      	movs	r0, #36	@ 0x24
 8002424:	f001 fa93 	bl	800394e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002428:	bf00      	nop
 800242a:	3758      	adds	r7, #88	@ 0x58
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40013800 	.word	0x40013800

08002434 <USART1_Interrupt>:
  }
}

/* USER CODE BEGIN 1 */
void USART1_Interrupt(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	if(uart1_rx_index == 0)
 8002438:	4b31      	ldr	r3, [pc, #196]	@ (8002500 <USART1_Interrupt+0xcc>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <USART1_Interrupt+0x24>
	{
		if(waiting_for_ack) ack_code = 0;
 8002440:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <USART1_Interrupt+0xd0>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <USART1_Interrupt+0x1a>
 8002448:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <USART1_Interrupt+0xd4>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
		memset(uart1_rx_buffer, 0, UART1_RX_BUFFER_MAX_SIZE);
 800244e:	2264      	movs	r2, #100	@ 0x64
 8002450:	2100      	movs	r1, #0
 8002452:	482e      	ldr	r0, [pc, #184]	@ (800250c <USART1_Interrupt+0xd8>)
 8002454:	f00a fc33 	bl	800ccbe <memset>
	}

	if((uart1_rx_index + 1) > UART1_RX_BUFFER_MAX_SIZE)
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <USART1_Interrupt+0xcc>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b63      	cmp	r3, #99	@ 0x63
 800245e:	d905      	bls.n	800246c <USART1_Interrupt+0x38>
	{
		//overflow
		uart1_rx_index = 0;
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <USART1_Interrupt+0xcc>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
		waiting_for_ack = 0;
 8002466:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <USART1_Interrupt+0xd0>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
	}

	uart1_rx_buffer[uart1_rx_index] = uart1_rx_data;
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <USART1_Interrupt+0xcc>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <USART1_Interrupt+0xdc>)
 8002474:	7819      	ldrb	r1, [r3, #0]
 8002476:	4b25      	ldr	r3, [pc, #148]	@ (800250c <USART1_Interrupt+0xd8>)
 8002478:	5499      	strb	r1, [r3, r2]
	uart1_rx_index++;
 800247a:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <USART1_Interrupt+0xcc>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <USART1_Interrupt+0xcc>)
 8002484:	701a      	strb	r2, [r3, #0]

	// Ensure we have at least 3 bytes before checking the 3x 0xFF terminator
	if (uart1_rx_index >= 3 &&
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <USART1_Interrupt+0xcc>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d931      	bls.n	80024f2 <USART1_Interrupt+0xbe>
		uart1_rx_buffer[uart1_rx_index-1] == 0xFF &&
 800248e:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <USART1_Interrupt+0xcc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <USART1_Interrupt+0xd8>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
	if (uart1_rx_index >= 3 &&
 8002498:	2bff      	cmp	r3, #255	@ 0xff
 800249a:	d12a      	bne.n	80024f2 <USART1_Interrupt+0xbe>
		uart1_rx_buffer[uart1_rx_index-2] == 0xFF &&
 800249c:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <USART1_Interrupt+0xcc>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b02      	subs	r3, #2
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <USART1_Interrupt+0xd8>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
		uart1_rx_buffer[uart1_rx_index-1] == 0xFF &&
 80024a6:	2bff      	cmp	r3, #255	@ 0xff
 80024a8:	d123      	bne.n	80024f2 <USART1_Interrupt+0xbe>
		uart1_rx_buffer[uart1_rx_index-3] == 0xFF)
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <USART1_Interrupt+0xcc>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b03      	subs	r3, #3
 80024b0:	4a16      	ldr	r2, [pc, #88]	@ (800250c <USART1_Interrupt+0xd8>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
		uart1_rx_buffer[uart1_rx_index-2] == 0xFF &&
 80024b4:	2bff      	cmp	r3, #255	@ 0xff
 80024b6:	d11c      	bne.n	80024f2 <USART1_Interrupt+0xbe>
	{
		//command received
		if(uart1_rx_index == 4 && waiting_for_ack)
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <USART1_Interrupt+0xcc>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d10b      	bne.n	80024d8 <USART1_Interrupt+0xa4>
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <USART1_Interrupt+0xd0>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <USART1_Interrupt+0xa4>
		{
			//ACK (e.g., 0x01 0xFF 0xFF 0xFF)
			ack_code = uart1_rx_buffer[0];
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <USART1_Interrupt+0xd8>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <USART1_Interrupt+0xd4>)
 80024ce:	701a      	strb	r2, [r3, #0]
			waiting_for_ack = 0;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <USART1_Interrupt+0xd0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e009      	b.n	80024ec <USART1_Interrupt+0xb8>
		}
		else if(uart1_rx_index > 4)
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <USART1_Interrupt+0xcc>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d905      	bls.n	80024ec <USART1_Interrupt+0xb8>
		{
			//command with payload, forward to app with length for validation
			SubghzApp_UART_RxDone(uart1_rx_buffer, uart1_rx_index);
 80024e0:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <USART1_Interrupt+0xcc>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4809      	ldr	r0, [pc, #36]	@ (800250c <USART1_Interrupt+0xd8>)
 80024e8:	f009 fe76 	bl	800c1d8 <SubghzApp_UART_RxDone>
		// for (uint8_t i = 0; i < uart1_rx_index; ++i) {
		//     ITM_SendChar(uart1_rx_buffer[i]);
		// }
		// ITM_SendChar('\n');

		uart1_rx_index = 0;
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <USART1_Interrupt+0xcc>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
	}
	//relancer l'écoute
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80024f2:	2201      	movs	r2, #1
 80024f4:	4906      	ldr	r1, [pc, #24]	@ (8002510 <USART1_Interrupt+0xdc>)
 80024f6:	4807      	ldr	r0, [pc, #28]	@ (8002514 <USART1_Interrupt+0xe0>)
 80024f8:	f003 ff4e 	bl	8006398 <HAL_UART_Receive_IT>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000244 	.word	0x20000244
 8002504:	20000245 	.word	0x20000245
 8002508:	20000246 	.word	0x20000246
 800250c:	200001e0 	.word	0x200001e0
 8002510:	200001dc 	.word	0x200001dc
 8002514:	20000248 	.word	0x20000248

08002518 <NEXTION_SendCommand>:

void NEXTION_SendCommand(const char* command)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	uint8_t end_cmd[3] = {0xFF, 0xFF, 0xFF};
 8002520:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <NEXTION_SendCommand+0x48>)
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4611      	mov	r1, r2
 800252a:	8019      	strh	r1, [r3, #0]
 800252c:	3302      	adds	r3, #2
 800252e:	0c12      	lsrs	r2, r2, #16
 8002530:	701a      	strb	r2, [r3, #0]
	//send command
	HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), 10);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fd fe24 	bl	8000180 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	230a      	movs	r3, #10
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4808      	ldr	r0, [pc, #32]	@ (8002564 <NEXTION_SendCommand+0x4c>)
 8002542:	f003 fea3 	bl	800628c <HAL_UART_Transmit>
	//send 3 last bytes
	HAL_UART_Transmit(&huart1, end_cmd, 3, 10);
 8002546:	f107 010c 	add.w	r1, r7, #12
 800254a:	230a      	movs	r3, #10
 800254c:	2203      	movs	r2, #3
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <NEXTION_SendCommand+0x4c>)
 8002550:	f003 fe9c 	bl	800628c <HAL_UART_Transmit>

	NEXTION_WaitForACK();
 8002554:	f000 f808 	bl	8002568 <NEXTION_WaitForACK>
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	0800dd68 	.word	0x0800dd68
 8002564:	20000248 	.word	0x20000248

08002568 <NEXTION_WaitForACK>:

void NEXTION_WaitForACK(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
	uint8_t time = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	71fb      	strb	r3, [r7, #7]
	waiting_for_ack = 1;
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <NEXTION_WaitForACK+0x3c>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
	while(time < 10)
 8002578:	e009      	b.n	800258e <NEXTION_WaitForACK+0x26>
	{
		if(ack_code != 0)
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <NEXTION_WaitForACK+0x40>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <NEXTION_WaitForACK+0x34>
		{
			return;
		}
		HAL_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f7ff fa36 	bl	80019f4 <HAL_Delay>
		time++;
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	3301      	adds	r3, #1
 800258c:	71fb      	strb	r3, [r7, #7]
	while(time < 10)
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b09      	cmp	r3, #9
 8002592:	d9f2      	bls.n	800257a <NEXTION_WaitForACK+0x12>
	}
	ack_code = 0xFF;
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <NEXTION_WaitForACK+0x40>)
 8002596:	22ff      	movs	r2, #255	@ 0xff
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e000      	b.n	800259e <NEXTION_WaitForACK+0x36>
			return;
 800259c:	bf00      	nop
}
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000245 	.word	0x20000245
 80025a8:	20000246 	.word	0x20000246

080025ac <NEXTION_SetText>:

void NEXTION_SetText(const char* object_name, const char* text)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0a2      	sub	sp, #136	@ 0x88
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	char command[128];
	sprintf(command, "%s.txt=\"%s\"", object_name, text);
 80025b6:	f107 0008 	add.w	r0, r7, #8
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4906      	ldr	r1, [pc, #24]	@ (80025d8 <NEXTION_SetText+0x2c>)
 80025c0:	f00a fb08 	bl	800cbd4 <siprintf>
	NEXTION_SendCommand(command);
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ffa5 	bl	8002518 <NEXTION_SendCommand>
}
 80025ce:	bf00      	nop
 80025d0:	3788      	adds	r7, #136	@ 0x88
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	0800dd6c 	.word	0x0800dd6c

080025dc <NEXTION_SetValue>:

void NEXTION_SetValue(const char* object_name, int value)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0a2      	sub	sp, #136	@ 0x88
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
	char command[128];
	sprintf(command, "%s.val=%d", object_name, value);
 80025e6:	f107 0008 	add.w	r0, r7, #8
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4906      	ldr	r1, [pc, #24]	@ (8002608 <NEXTION_SetValue+0x2c>)
 80025f0:	f00a faf0 	bl	800cbd4 <siprintf>
	NEXTION_SendCommand(command);
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff8d 	bl	8002518 <NEXTION_SendCommand>
}
 80025fe:	bf00      	nop
 8002600:	3788      	adds	r7, #136	@ 0x88
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	0800dd78 	.word	0x0800dd78

0800260c <NEXTION_SetBackgroundColor>:

void NEXTION_SetBackgroundColor(const char* object_name, uint16_t color)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a2      	sub	sp, #136	@ 0x88
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
	char command[128];
	sprintf(command, "%s.bco=%d", object_name, color);
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	f107 0008 	add.w	r0, r7, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4905      	ldr	r1, [pc, #20]	@ (8002638 <NEXTION_SetBackgroundColor+0x2c>)
 8002622:	f00a fad7 	bl	800cbd4 <siprintf>
	NEXTION_SendCommand(command);
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff74 	bl	8002518 <NEXTION_SendCommand>
}
 8002630:	bf00      	nop
 8002632:	3788      	adds	r7, #136	@ 0x88
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	0800dd84 	.word	0x0800dd84

0800263c <NEXTION_ChangePage>:
	sprintf(command, "%s.pco=%d", object_name, color);
	NEXTION_SendCommand(command);
}

void NEXTION_ChangePage(uint8_t page_id)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a2      	sub	sp, #136	@ 0x88
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	char command[128];
	sprintf(command, "page %d", page_id);
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4906      	ldr	r1, [pc, #24]	@ (8002668 <NEXTION_ChangePage+0x2c>)
 800264e:	4618      	mov	r0, r3
 8002650:	f00a fac0 	bl	800cbd4 <siprintf>
	NEXTION_SendCommand(command);
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <NEXTION_SendCommand>
}
 800265e:	bf00      	nop
 8002660:	3788      	adds	r7, #136	@ 0x88
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	0800dd9c 	.word	0x0800dd9c

0800266c <NEXTION_SetPicture>:
	sprintf(command, "cls %d", color);
	NEXTION_SendCommand(command);
}

void NEXTION_SetPicture(const char* object_name, uint8_t picture)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0a2      	sub	sp, #136	@ 0x88
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
	char command[128];
	sprintf(command, "%s.pic=%d", object_name, picture);
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	f107 0008 	add.w	r0, r7, #8
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4905      	ldr	r1, [pc, #20]	@ (8002698 <NEXTION_SetPicture+0x2c>)
 8002682:	f00a faa7 	bl	800cbd4 <siprintf>
	NEXTION_SendCommand(command);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff44 	bl	8002518 <NEXTION_SendCommand>
}
 8002690:	bf00      	nop
 8002692:	3788      	adds	r7, #136	@ 0x88
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	0800ddc4 	.word	0x0800ddc4

0800269c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800269c:	480d      	ldr	r0, [pc, #52]	@ (80026d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800269e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026a0:	f7ff fa5a 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	@ (80026dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <LoopForever+0xe>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <LoopForever+0x16>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ca:	f00a fb4d 	bl	800cd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ce:	f7fe ff11 	bl	80014f4 <main>

080026d2 <LoopForever>:

LoopForever:
    b LoopForever
 80026d2:	e7fe      	b.n	80026d2 <LoopForever>
  ldr   r0, =_estack
 80026d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80026e0:	0800e5a8 	.word	0x0800e5a8
  ldr r2, =_sbss
 80026e4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80026e8:	2000066c 	.word	0x2000066c

080026ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f001 f902 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002700:	f002 fc1e 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8002704:	4603      	mov	r3, r0
 8002706:	4a09      	ldr	r2, [pc, #36]	@ (800272c <HAL_Init+0x3c>)
 8002708:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f810 	bl	8002730 <HAL_InitTick>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	71fb      	strb	r3, [r7, #7]
 800271a:	e001      	b.n	8002720 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800271c:	f7ff f8b8 	bl	8001890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002720:	79fb      	ldrb	r3, [r7, #7]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800273c:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_InitTick+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d024      	beq.n	800278e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002744:	f002 fbfc 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_InitTick+0x6c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4619      	mov	r1, r3
 8002750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002754:	fbb3 f3f1 	udiv	r3, r3, r1
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f904 	bl	800396a <HAL_SYSTICK_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d809      	bhi.n	8002782 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276e:	2200      	movs	r2, #0
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	f04f 30ff 	mov.w	r0, #4294967295
 8002776:	f001 f8d0 	bl	800391a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_InitTick+0x70>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e007      	b.n	8002792 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
 8002786:	e004      	b.n	8002792 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e001      	b.n	8002792 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000005c 	.word	0x2000005c
 80027a0:	20000058 	.word	0x20000058

080027a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_IncTick+0x1c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	461a      	mov	r2, r3
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_IncTick+0x20>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	4a03      	ldr	r2, [pc, #12]	@ (80027c4 <HAL_IncTick+0x20>)
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	2000005c 	.word	0x2000005c
 80027c4:	20000314 	.word	0x20000314

080027c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2107      	movs	r1, #7
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	431a      	orrs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2107      	movs	r1, #7
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	210f      	movs	r1, #15
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	401a      	ands	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	f003 010f 	and.w	r1, r3, #15
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0219      	lsls	r1, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	400b      	ands	r3, r1
 8002942:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002946:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800294a:	431a      	orrs	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800296a:	f023 0317 	bic.w	r3, r3, #23
 800296e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002994:	d101      	bne.n	800299a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029b6:	f023 0317 	bic.w	r3, r3, #23
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029dc:	f023 0317 	bic.w	r3, r3, #23
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_IsEnabled+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_ADC_IsEnabled+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d101      	bne.n	8002a2e <LL_ADC_IsDisableOngoing+0x18>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <LL_ADC_IsDisableOngoing+0x1a>
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a4a:	f023 0317 	bic.w	r3, r3, #23
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a70:	f023 0317 	bic.w	r3, r3, #23
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d101      	bne.n	8002a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e17e      	b.n	8002dcc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7fe fbb7 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff43 	bl	8002980 <LL_ADC_IsInternalRegulatorEnabled>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d115      	bne.n	8002b2c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff28 	bl	800295a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002d84 <HAL_ADC_Init+0x2d8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	4a9d      	ldr	r2, [pc, #628]	@ (8002d88 <HAL_ADC_Init+0x2dc>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	3301      	adds	r3, #1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff25 	bl	8002980 <LL_ADC_IsInternalRegulatorEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff92 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8002b62:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 8124 	bne.w	8002dba <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 8120 	bne.w	8002dba <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff2f 	bl	80029f2 <LL_ADC_IsEnabled>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 80a7 	bne.w	8002cea <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7e1b      	ldrb	r3, [r3, #24]
 8002ba4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ba6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7e5b      	ldrb	r3, [r3, #25]
 8002bac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7e9b      	ldrb	r3, [r3, #26]
 8002bb4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bb6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bbc:	2a00      	cmp	r2, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_ADC_Init+0x11a>
 8002bc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_Init+0x11c>
 8002bc6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bc8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bce:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	da04      	bge.n	8002be2 <HAL_ADC_Init+0x136>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002be0:	e001      	b.n	8002be6 <HAL_ADC_Init+0x13a>
 8002be2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002be6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002bee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bf0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d114      	bne.n	8002c2c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7e9b      	ldrb	r3, [r3, #26]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e00b      	b.n	8002c2c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c18:	f043 0220 	orr.w	r2, r3, #32
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c40:	4313      	orrs	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002c52:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d111      	bne.n	8002ca2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c8a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c90:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c96:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_ADC_Init+0x2e0>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002cbe:	d014      	beq.n	8002cea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc8:	d00f      	beq.n	8002cea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd2:	d00a      	beq.n	8002cea <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d90 <HAL_ADC_Init+0x2e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ce4:	492a      	ldr	r1, [pc, #168]	@ (8002d90 <HAL_ADC_Init+0x2e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f7ff fd86 	bl	8002806 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	461a      	mov	r2, r3
 8002d04:	4923      	ldr	r1, [pc, #140]	@ (8002d94 <HAL_ADC_Init+0x2e8>)
 8002d06:	f7ff fd7e 	bl	8002806 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d108      	bne.n	8002d24 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f062 020f 	orn	r2, r2, #15
 8002d20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d22:	e017      	b.n	8002d54 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d2c:	d112      	bne.n	8002d54 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	f003 031c 	and.w	r3, r3, #28
 8002d40:	f06f 020f 	mvn.w	r2, #15
 8002d44:	fa02 f103 	lsl.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd71 	bl	8002842 <LL_ADC_GetSamplingTimeCommonChannels>
 8002d60:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d116      	bne.n	8002d98 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f023 0303 	bic.w	r3, r3, #3
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d80:	e023      	b.n	8002dca <HAL_ADC_Init+0x31e>
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000
 8002d88:	053e2d63 	.word	0x053e2d63
 8002d8c:	1ffffc02 	.word	0x1ffffc02
 8002d90:	40012708 	.word	0x40012708
 8002d94:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	f023 0312 	bic.w	r3, r3, #18
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002db8:	e007      	b.n	8002dca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe50 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d132      	bne.n	8002e52 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Start+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e02e      	b.n	8002e58 <HAL_ADC_Start+0x84>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa80 	bl	8003308 <ADC_Enable>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11a      	bne.n	8002e48 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	221c      	movs	r2, #28
 8002e32:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fdfa 	bl	8002a3a <LL_ADC_REG_StartConversion>
 8002e46:	e006      	b.n	8002e56 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002e50:	e001      	b.n	8002e56 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_Stop+0x16>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e022      	b.n	8002ebc <HAL_ADC_Stop+0x5c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9fc 	bl	800327c <ADC_ConversionStop>
 8002e84:	4603      	mov	r3, r0
 8002e86:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fac0 	bl	8003414 <ADC_Disable>
 8002e94:	4603      	mov	r3, r0
 8002e96:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d102      	bne.n	8002edc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e010      	b.n	8002efe <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e077      	b.n	8002fea <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002efa:	2304      	movs	r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002efe:	f7fe fd5f 	bl	80019c0 <HAL_GetTick>
 8002f02:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f04:	e021      	b.n	8002f4a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d01d      	beq.n	8002f4a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f0e:	f7fe fd57 	bl	80019c0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <HAL_ADC_PollForConversion+0x60>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d112      	bne.n	8002f4a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e04f      	b.n	8002fea <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0d6      	beq.n	8002f06 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fc82 	bl	8002872 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d031      	beq.n	8002fd8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7e9b      	ldrb	r3, [r3, #26]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d12d      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d126      	bne.n	8002fd8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fd79 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 020c 	bic.w	r2, r2, #12
 8002fa8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fbe:	e00b      	b.n	8002fd8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	220c      	movs	r2, #12
 8002fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
	...

0800300c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x28>
 8003030:	2302      	movs	r3, #2
 8003032:	e110      	b.n	8003256 <HAL_ADC_ConfigChannel+0x24a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fd20 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 80f7 	bne.w	800323c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	f000 80b1 	beq.w	80031ba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003060:	d004      	beq.n	800306c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003066:	4a7e      	ldr	r2, [pc, #504]	@ (8003260 <HAL_ADC_ConfigChannel+0x254>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f7ff fc2e 	bl	80028d8 <LL_ADC_REG_SetSequencerChAdd>
 800307c:	e041      	b.n	8003102 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	210f      	movs	r1, #15
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_ADC_ConfigChannel+0xa0>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	e011      	b.n	80030d0 <HAL_ADC_ConfigChannel+0xc4>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	6849      	ldr	r1, [r1, #4]
 80030d4:	f001 011f 	and.w	r1, r1, #31
 80030d8:	408b      	lsls	r3, r1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d808      	bhi.n	8003102 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7ff fbca 	bl	8002896 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff fc07 	bl	8002922 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f280 8097 	bge.w	800324c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311e:	4851      	ldr	r0, [pc, #324]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 8003120:	f7ff fb64 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 8003124:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4f      	ldr	r2, [pc, #316]	@ (8003268 <HAL_ADC_ConfigChannel+0x25c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d120      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003140:	4619      	mov	r1, r3
 8003142:	4848      	ldr	r0, [pc, #288]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 8003144:	f7ff fb40 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003148:	4b48      	ldr	r3, [pc, #288]	@ (800326c <HAL_ADC_ConfigChannel+0x260>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	4a48      	ldr	r2, [pc, #288]	@ (8003270 <HAL_ADC_ConfigChannel+0x264>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003162:	e002      	b.n	800316a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003170:	e06c      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3f      	ldr	r2, [pc, #252]	@ (8003274 <HAL_ADC_ConfigChannel+0x268>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d10c      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318c:	4619      	mov	r1, r3
 800318e:	4835      	ldr	r0, [pc, #212]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 8003190:	f7ff fb1a 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
 8003194:	e05a      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a37      	ldr	r2, [pc, #220]	@ (8003278 <HAL_ADC_ConfigChannel+0x26c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d155      	bne.n	800324c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d150      	bne.n	800324c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031b0:	4619      	mov	r1, r3
 80031b2:	482c      	ldr	r0, [pc, #176]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 80031b4:	f7ff fb08 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
 80031b8:	e048      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031c2:	d004      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031c8:	4a25      	ldr	r2, [pc, #148]	@ (8003260 <HAL_ADC_ConfigChannel+0x254>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d107      	bne.n	80031de <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	4610      	mov	r0, r2
 80031da:	f7ff fb8f 	bl	80028fc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da32      	bge.n	800324c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e6:	481f      	ldr	r0, [pc, #124]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 80031e8:	f7ff fb00 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 80031ec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <HAL_ADC_ConfigChannel+0x25c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d107      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031fe:	4619      	mov	r1, r3
 8003200:	4818      	ldr	r0, [pc, #96]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 8003202:	f7ff fae1 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
 8003206:	e021      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <HAL_ADC_ConfigChannel+0x268>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d107      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003218:	4619      	mov	r1, r3
 800321a:	4812      	ldr	r0, [pc, #72]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 800321c:	f7ff fad4 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
 8003220:	e014      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <HAL_ADC_ConfigChannel+0x26c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10f      	bne.n	800324c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003232:	4619      	mov	r1, r3
 8003234:	480b      	ldr	r0, [pc, #44]	@ (8003264 <HAL_ADC_ConfigChannel+0x258>)
 8003236:	f7ff fac7 	bl	80027c8 <LL_ADC_SetCommonPathInternalCh>
 800323a:	e007      	b.n	800324c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003254:	7ffb      	ldrb	r3, [r7, #31]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	80000004 	.word	0x80000004
 8003264:	40012708 	.word	0x40012708
 8003268:	b0001000 	.word	0xb0001000
 800326c:	20000000 	.word	0x20000000
 8003270:	053e2d63 	.word	0x053e2d63
 8003274:	b8004000 	.word	0xb8004000
 8003278:	b4002000 	.word	0xb4002000

0800327c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fbfc 	bl	8002a86 <LL_ADC_REG_IsConversionOngoing>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d033      	beq.n	80032fc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fbbc 	bl	8002a16 <LL_ADC_IsDisableOngoing>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fbd9 	bl	8002a60 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ae:	f7fe fb87 	bl	80019c0 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80032b4:	e01b      	b.n	80032ee <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80032b6:	f7fe fb83 	bl	80019c0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d914      	bls.n	80032ee <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1dc      	bne.n	80032b6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fb6a 	bl	80029f2 <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d169      	bne.n	80033f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	4b36      	ldr	r3, [pc, #216]	@ (8003404 <ADC_Enable+0xfc>)
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e055      	b.n	80033fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fb27 	bl	80029a6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003358:	482b      	ldr	r0, [pc, #172]	@ (8003408 <ADC_Enable+0x100>)
 800335a:	f7ff fa47 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00f      	beq.n	8003388 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003368:	4b28      	ldr	r3, [pc, #160]	@ (800340c <ADC_Enable+0x104>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	4a28      	ldr	r2, [pc, #160]	@ (8003410 <ADC_Enable+0x108>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003378:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800337a:	e002      	b.n	8003382 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	3b01      	subs	r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e5b      	ldrb	r3, [r3, #25]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d033      	beq.n	80033f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003390:	f7fe fb16 	bl	80019c0 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003396:	e028      	b.n	80033ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fb28 	bl	80029f2 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fafa 	bl	80029a6 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033b2:	f7fe fb05 	bl	80019c0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d914      	bls.n	80033ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d00d      	beq.n	80033ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d1cf      	bne.n	8003398 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	80000017 	.word	0x80000017
 8003408:	40012708 	.word	0x40012708
 800340c:	20000000 	.word	0x20000000
 8003410:	053e2d63 	.word	0x053e2d63

08003414 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff faf8 	bl	8002a16 <LL_ADC_IsDisableOngoing>
 8003426:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff fae0 	bl	80029f2 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d047      	beq.n	80034c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d144      	bne.n	80034c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0305 	and.w	r3, r3, #5
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10c      	bne.n	8003466 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fabb 	bl	80029cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2203      	movs	r2, #3
 800345c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800345e:	f7fe faaf 	bl	80019c0 <HAL_GetTick>
 8003462:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003464:	e029      	b.n	80034ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e023      	b.n	80034ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003482:	f7fe fa9d 	bl	80019c0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d914      	bls.n	80034ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1dc      	bne.n	8003482 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <LL_ADC_SetCalibrationFactor>:
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034e2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_GetCalibrationFactor>:
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <LL_ADC_Enable>:
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003526:	f023 0317 	bic.w	r3, r3, #23
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <LL_ADC_Disable>:
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800354c:	f023 0317 	bic.w	r3, r3, #23
 8003550:	f043 0202 	orr.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <LL_ADC_IsEnabled>:
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <LL_ADC_IsEnabled+0x18>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <LL_ADC_IsEnabled+0x1a>
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <LL_ADC_StartCalibration>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003596:	f023 0317 	bic.w	r3, r3, #23
 800359a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	609a      	str	r2, [r3, #8]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_IsCalibrationOnGoing>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035c0:	d101      	bne.n	80035c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b088      	sub	sp, #32
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_ADCEx_Calibration_Start+0x1e>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b9      	b.n	8003764 <HAL_ADCEx_Calibration_Start+0x192>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff0b 	bl	8003414 <ADC_Disable>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffab 	bl	8003562 <LL_ADC_IsEnabled>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 809d 	bne.w	800374e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800361c:	f043 0202 	orr.w	r2, r3, #2
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	f248 0303 	movw	r3, #32771	@ 0x8003
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003640:	f023 0303 	bic.w	r3, r3, #3
 8003644:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e02e      	b.n	80036aa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff98 	bl	8003586 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003656:	e014      	b.n	8003682 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003664:	d30d      	bcc.n	8003682 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366a:	f023 0312 	bic.w	r3, r3, #18
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e070      	b.n	8003764 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff90 	bl	80035ac <LL_ADC_IsCalibrationOnGoing>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e2      	bne.n	8003658 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff2f 	bl	80034fa <LL_ADC_GetCalibrationFactor>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b07      	cmp	r3, #7
 80036ae:	d9cd      	bls.n	800364c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ff29 	bl	8003516 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ff01 	bl	80034d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff31 	bl	800353c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036da:	f7fe f971 	bl	80019c0 <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036e0:	e01c      	b.n	800371c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036e2:	f7fe f96d 	bl	80019c0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d915      	bls.n	800371c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff34 	bl	8003562 <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003704:	f043 0210 	orr.w	r2, r3, #16
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e023      	b.n	8003764 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff1e 	bl	8003562 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1da      	bne.n	80036e2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68d9      	ldr	r1, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	@ 0x58
 800374c:	e005      	b.n	800375a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003762:	7dfb      	ldrb	r3, [r7, #23]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <__NVIC_SetPriorityGrouping>:
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4906      	ldr	r1, [pc, #24]	@ (8003804 <__NVIC_EnableIRQ+0x34>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	@ (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	@ (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	@ 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	@ 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <SysTick_Config>:
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff90 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff2d 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003928:	f7ff ff44 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 800392c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff92 	bl	800385c <NVIC_EncodePriority>
 8003938:	4602      	mov	r2, r0
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff61 	bl	8003808 <__NVIC_SetPriority>
}
 8003946:	bf00      	nop
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff37 	bl	80037d0 <__NVIC_EnableIRQ>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffa4 	bl	80038c0 <SysTick_Config>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e04f      	b.n	8003a34 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d008      	beq.n	80039b2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e040      	b.n	8003a34 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 020e 	bic.w	r2, r2, #14
 80039c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f003 021c 	and.w	r2, r3, #28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d005      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e047      	b.n	8003af2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 020e 	bic.w	r2, r2, #14
 8003a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 021c 	and.w	r2, r3, #28
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ad0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
    }
  }
  return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b0a:	e140      	b.n	8003d8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8132 	beq.w	8003d88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d005      	beq.n	8003b3c <HAL_GPIO_Init+0x40>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d130      	bne.n	8003b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b72:	2201      	movs	r2, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0201 	and.w	r2, r3, #1
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d017      	beq.n	8003bda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d123      	bne.n	8003c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	6939      	ldr	r1, [r7, #16]
 8003c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 808c 	beq.w	8003d88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c70:	4a4e      	ldr	r2, [pc, #312]	@ (8003dac <HAL_GPIO_Init+0x2b0>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3302      	adds	r3, #2
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	2207      	movs	r2, #7
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_GPIO_Init+0x1bc>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	@ (8003db0 <HAL_GPIO_Init+0x2b4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <HAL_GPIO_Init+0x1b8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a43      	ldr	r2, [pc, #268]	@ (8003db4 <HAL_GPIO_Init+0x2b8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_GPIO_Init+0x1b4>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e004      	b.n	8003cba <HAL_GPIO_Init+0x1be>
 8003cb0:	2307      	movs	r3, #7
 8003cb2:	e002      	b.n	8003cba <HAL_GPIO_Init+0x1be>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <HAL_GPIO_Init+0x1be>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	f002 0203 	and.w	r2, r2, #3
 8003cc0:	0092      	lsls	r2, r2, #2
 8003cc2:	4093      	lsls	r3, r2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cca:	4938      	ldr	r1, [pc, #224]	@ (8003dac <HAL_GPIO_Init+0x2b0>)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	089b      	lsrs	r3, r3, #2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd8:	4b37      	ldr	r3, [pc, #220]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d02:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d26:	4a24      	ldr	r2, [pc, #144]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003d2c:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d32:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003d52:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d60:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003d80:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <HAL_GPIO_Init+0x2bc>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f aeb7 	bne.w	8003b0c <HAL_GPIO_Init+0x10>
  }
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40010000 	.word	0x40010000
 8003db0:	48000400 	.word	0x48000400
 8003db4:	48000800 	.word	0x48000800
 8003db8:	58000800 	.word	0x58000800

08003dbc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e001      	b.n	8003dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr

08003dea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	460b      	mov	r3, r1
 8003df4:	807b      	strh	r3, [r7, #2]
 8003df6:	4613      	mov	r3, r2
 8003df8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dfa:	787b      	ldrb	r3, [r7, #1]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e00:	887a      	ldrh	r2, [r7, #2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e06:	e002      	b.n	8003e0e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e08:	887a      	ldrh	r2, [r7, #2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e041      	b.n	8003eae <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003e32:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6852      	ldr	r2, [r2, #4]
 8003e46:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6892      	ldr	r2, [r2, #8]
 8003e50:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003e52:	f7fd fdb5 	bl	80019c0 <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e58:	e00f      	b.n	8003e7a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003e5a:	f7fd fdb1 	bl	80019c0 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b31      	cmp	r3, #49	@ 0x31
 8003e66:	d908      	bls.n	8003e7a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e019      	b.n	8003eae <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e8      	bne.n	8003e5a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d005      	beq.n	8003ea2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
 8003ea0:	e004      	b.n	8003eac <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x18>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	58000400 	.word	0x58000400

08003ef0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b03      	ldr	r3, [pc, #12]	@ (8003f04 <HAL_PWREx_GetVoltageRange+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	58000400 	.word	0x58000400

08003f08 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f18:	d101      	bne.n	8003f1e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	58000400 	.word	0x58000400

08003f2c <LL_RCC_HSE_EnableTcxo>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_HSE_DisableTcxo>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f5a:	6013      	str	r3, [r2, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f76:	d101      	bne.n	8003f7c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <LL_RCC_HSE_Enable>:
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <LL_RCC_HSE_Disable>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_HSE_IsReady>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fd0:	d101      	bne.n	8003fd6 <LL_RCC_HSE_IsReady+0x18>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <LL_RCC_HSE_IsReady+0x1a>
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_HSI_Enable>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <LL_RCC_HSI_Disable>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800400a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800400e:	6013      	str	r3, [r2, #0]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <LL_RCC_HSI_IsReady>:
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402a:	d101      	bne.n	8004030 <LL_RCC_HSI_IsReady+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_RCC_HSI_IsReady+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <LL_RCC_HSI_SetCalibTrimming>:
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <LL_RCC_LSE_IsReady>:
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d101      	bne.n	800407a <LL_RCC_LSE_IsReady+0x18>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_RCC_LSE_IsReady+0x1a>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <LL_RCC_LSI_Enable>:
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_LSI_Disable>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_LSI_IsReady>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d101      	bne.n	80040dc <LL_RCC_LSI_IsReady+0x18>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <LL_RCC_LSI_IsReady+0x1a>
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_MSI_Enable>:
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80040ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6013      	str	r3, [r2, #0]
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <LL_RCC_MSI_Disable>:
{
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6013      	str	r3, [r2, #0]
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <LL_RCC_MSI_IsReady>:
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d101      	bne.n	8004134 <LL_RCC_MSI_IsReady+0x16>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_RCC_MSI_IsReady+0x18>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d101      	bne.n	8004154 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <LL_RCC_MSI_GetRange>:
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004180:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <LL_RCC_MSI_SetCalibTrimming>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_SetSysClkSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr

080041da <LL_RCC_GetSysClkSource>:
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <LL_RCC_SetAHBPrescaler>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004222:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004226:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800422a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <LL_RCC_SetAHB3Prescaler>:
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004250:	f023 020f 	bic.w	r2, r3, #15
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <LL_RCC_SetAPB1Prescaler>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800427e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <LL_RCC_SetAPB2Prescaler>:
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <LL_RCC_GetAHBPrescaler>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <LL_RCC_GetAHB3Prescaler>:
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_GetAPB1Prescaler>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_GetAPB2Prescaler>:
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	6013      	str	r3, [r2, #0]
}
 8004328:	bf00      	nop
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800433e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	bf00      	nop
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435e:	d101      	bne.n	8004364 <LL_RCC_PLL_IsReady+0x18>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <LL_RCC_PLL_IsReady+0x1a>
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800437e:	4618      	mov	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004386:	b480      	push	{r7}
 8004388:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800438a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043b2:	b480      	push	{r7}
 80043b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043da:	d101      	bne.n	80043e0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fe:	d101      	bne.n	8004404 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004416:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800441a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004422:	d101      	bne.n	8004428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004444:	d101      	bne.n	800444a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004466:	d101      	bne.n	800446c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
	...

08004478 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e36f      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	f7ff fea6 	bl	80041da <LL_RCC_GetSysClkSource>
 800448e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004490:	f7ff ff8f 	bl	80043b2 <LL_RCC_PLL_GetMainSource>
 8004494:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80c4 	beq.w	800462c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x3e>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d176      	bne.n	800459e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d173      	bne.n	800459e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e353      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x68>
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044de:	e006      	b.n	80044ee <HAL_RCC_OscConfig+0x76>
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d222      	bcs.n	8004538 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fd5a 	bl	8004fb0 <RCC_SetFlashLatencyFromMSIRange>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e331      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004510:	f043 0308 	orr.w	r3, r3, #8
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fe2b 	bl	800418c <LL_RCC_MSI_SetCalibTrimming>
 8004536:	e021      	b.n	800457c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004542:	f043 0308 	orr.w	r3, r3, #8
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fe12 	bl	800418c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fd1f 	bl	8004fb0 <RCC_SetFlashLatencyFromMSIRange>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e2f6      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800457c:	f000 fce0 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004580:	4603      	mov	r3, r0
 8004582:	4aa7      	ldr	r2, [pc, #668]	@ (8004820 <HAL_RCC_OscConfig+0x3a8>)
 8004584:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004586:	4ba7      	ldr	r3, [pc, #668]	@ (8004824 <HAL_RCC_OscConfig+0x3ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe f8d0 	bl	8002730 <HAL_InitTick>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d047      	beq.n	800462a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	e2e5      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02c      	beq.n	8004600 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045a6:	f7ff fd9e 	bl	80040e6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fa09 	bl	80019c0 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b2:	f7fd fa05 	bl	80019c0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e2d2      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80045c4:	f7ff fdab 	bl	800411e <LL_RCC_MSI_IsReady>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f1      	beq.n	80045b2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fdc7 	bl	800418c <LL_RCC_MSI_SetCalibTrimming>
 80045fe:	e015      	b.n	800462c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004600:	f7ff fd7f 	bl	8004102 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004604:	f7fd f9dc 	bl	80019c0 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800460c:	f7fd f9d8 	bl	80019c0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e2a5      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800461e:	f7ff fd7e 	bl	800411e <LL_RCC_MSI_IsReady>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f1      	bne.n	800460c <HAL_RCC_OscConfig+0x194>
 8004628:	e000      	b.n	800462c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800462a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d058      	beq.n	80046ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d005      	beq.n	800464a <HAL_RCC_OscConfig+0x1d2>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d108      	bne.n	8004656 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d105      	bne.n	8004656 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d14b      	bne.n	80046ea <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e289      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d102      	bne.n	800467c <HAL_RCC_OscConfig+0x204>
 8004676:	f7ff fc86 	bl	8003f86 <LL_RCC_HSE_Enable>
 800467a:	e00d      	b.n	8004698 <HAL_RCC_OscConfig+0x220>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004684:	d104      	bne.n	8004690 <HAL_RCC_OscConfig+0x218>
 8004686:	f7ff fc51 	bl	8003f2c <LL_RCC_HSE_EnableTcxo>
 800468a:	f7ff fc7c 	bl	8003f86 <LL_RCC_HSE_Enable>
 800468e:	e003      	b.n	8004698 <HAL_RCC_OscConfig+0x220>
 8004690:	f7ff fc87 	bl	8003fa2 <LL_RCC_HSE_Disable>
 8004694:	f7ff fc58 	bl	8003f48 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d012      	beq.n	80046c6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fd f98e 	bl	80019c0 <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fd f98a 	bl	80019c0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e257      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046ba:	f7ff fc80 	bl	8003fbe <LL_RCC_HSE_IsReady>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f1      	beq.n	80046a8 <HAL_RCC_OscConfig+0x230>
 80046c4:	e011      	b.n	80046ea <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fd f97b 	bl	80019c0 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ce:	f7fd f977 	bl	80019c0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b64      	cmp	r3, #100	@ 0x64
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e244      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046e0:	f7ff fc6d 	bl	8003fbe <LL_RCC_HSE_IsReady>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f1      	bne.n	80046ce <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d046      	beq.n	8004784 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_OscConfig+0x290>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b0c      	cmp	r3, #12
 8004700:	d10e      	bne.n	8004720 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d10b      	bne.n	8004720 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e22a      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fc8e 	bl	800403a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800471e:	e031      	b.n	8004784 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d019      	beq.n	800475c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004728:	f7ff fc5a 	bl	8003fe0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd f948 	bl	80019c0 <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fd f944 	bl	80019c0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e211      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004746:	f7ff fc67 	bl	8004018 <LL_RCC_HSI_IsReady>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f1      	beq.n	8004734 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fc70 	bl	800403a <LL_RCC_HSI_SetCalibTrimming>
 800475a:	e013      	b.n	8004784 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475c:	f7ff fc4e 	bl	8003ffc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fd f92e 	bl	80019c0 <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004768:	f7fd f92a 	bl	80019c0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1f7      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800477a:	f7ff fc4d 	bl	8004018 <LL_RCC_HSI_IsReady>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f1      	bne.n	8004768 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d06e      	beq.n	800486e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d056      	beq.n	8004846 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047a0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d031      	beq.n	8004814 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e1d0      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d013      	beq.n	80047fa <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80047d2:	f7ff fc67 	bl	80040a4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047d6:	f7fd f8f3 	bl	80019c0 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7fd f8ef 	bl	80019c0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b11      	cmp	r3, #17
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1bc      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80047f0:	f7ff fc68 	bl	80040c4 <LL_RCC_LSI_IsReady>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f1      	bne.n	80047de <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	f023 0210 	bic.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004814:	f7ff fc36 	bl	8004084 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004818:	f7fd f8d2 	bl	80019c0 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800481e:	e00c      	b.n	800483a <HAL_RCC_OscConfig+0x3c2>
 8004820:	20000000 	.word	0x20000000
 8004824:	20000058 	.word	0x20000058
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004828:	f7fd f8ca 	bl	80019c0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b11      	cmp	r3, #17
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e197      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800483a:	f7ff fc43 	bl	80040c4 <LL_RCC_LSI_IsReady>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f1      	beq.n	8004828 <HAL_RCC_OscConfig+0x3b0>
 8004844:	e013      	b.n	800486e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004846:	f7ff fc2d 	bl	80040a4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fd f8b9 	bl	80019c0 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004852:	f7fd f8b5 	bl	80019c0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b11      	cmp	r3, #17
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e182      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004864:	f7ff fc2e 	bl	80040c4 <LL_RCC_LSI_IsReady>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f1      	bne.n	8004852 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80d8 	beq.w	8004a2c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800487c:	f7ff fb44 	bl	8003f08 <LL_PWR_IsEnabledBkUpAccess>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d113      	bne.n	80048ae <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004886:	f7ff fb25 	bl	8003ed4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488a:	f7fd f899 	bl	80019c0 <HAL_GetTick>
 800488e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004892:	f7fd f895 	bl	80019c0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e162      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80048a4:	f7ff fb30 	bl	8003f08 <LL_PWR_IsEnabledBkUpAccess>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f1      	beq.n	8004892 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d07b      	beq.n	80049ae <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b85      	cmp	r3, #133	@ 0x85
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d109      	bne.n	80048da <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fd f871 	bl	80019c0 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd f863 	bl	80019c0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e12e      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800490c:	f7ff fba9 	bl	8004062 <LL_RCC_LSE_IsReady>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0ef      	beq.n	80048f6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b81      	cmp	r3, #129	@ 0x81
 800491c:	d003      	beq.n	8004926 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b85      	cmp	r3, #133	@ 0x85
 8004924:	d121      	bne.n	800496a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fd f84b 	bl	80019c0 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004934:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fd f83d 	bl	80019c0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e108      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ec      	beq.n	8004942 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004968:	e060      	b.n	8004a2c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fd f829 	bl	80019c0 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004978:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800497c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd f81b 	bl	80019c0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0e6      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ec      	bne.n	8004986 <HAL_RCC_OscConfig+0x50e>
 80049ac:	e03e      	b.n	8004a2c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fd f807 	bl	80019c0 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fc fff9 	bl	80019c0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0c4      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ec      	bne.n	80049ca <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f0:	f7fc ffe6 	bl	80019c0 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fc ffd8 	bl	80019c0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0a3      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a22:	f7ff fb1e 	bl	8004062 <LL_RCC_LSE_IsReady>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ef      	bne.n	8004a0c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8099 	beq.w	8004b68 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d06c      	beq.n	8004b16 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d14b      	bne.n	8004adc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a44:	f7ff fc74 	bl	8004330 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc ffba 	bl	80019c0 <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fc ffb6 	bl	80019c0 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b0a      	cmp	r3, #10
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e083      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a62:	f7ff fc73 	bl	800434c <LL_RCC_PLL_IsReady>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f1      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	4b40      	ldr	r3, [pc, #256]	@ (8004b74 <HAL_RCC_OscConfig+0x6fc>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a84:	0212      	lsls	r2, r2, #8
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a92:	4311      	orrs	r1, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa2:	f7ff fc37 	bl	8004314 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab6:	f7fc ff83 	bl	80019c0 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fc ff7f 	bl	80019c0 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b0a      	cmp	r3, #10
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e04c      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004ad0:	f7ff fc3c 	bl	800434c <LL_RCC_PLL_IsReady>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f1      	beq.n	8004abe <HAL_RCC_OscConfig+0x646>
 8004ada:	e045      	b.n	8004b68 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	f7ff fc28 	bl	8004330 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fc ff6e 	bl	80019c0 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fc ff6a 	bl	80019c0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b0a      	cmp	r3, #10
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e037      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004afa:	f7ff fc27 	bl	800434c <LL_RCC_PLL_IsReady>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f1      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b78 <HAL_RCC_OscConfig+0x700>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60cb      	str	r3, [r1, #12]
 8004b14:	e028      	b.n	8004b68 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e023      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d115      	bne.n	8004b64 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d10e      	bne.n	8004b64 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	11c1808c 	.word	0x11c1808c
 8004b78:	eefefffc 	.word	0xeefefffc

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e12c      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b98      	ldr	r3, [pc, #608]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d91b      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b95      	ldr	r3, [pc, #596]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	4993      	ldr	r1, [pc, #588]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bae:	f7fc ff07 	bl	80019c0 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004bb6:	f7fc ff03 	bl	80019c0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e110      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc8:	4b8a      	ldr	r3, [pc, #552]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d1ef      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fb02 	bl	80041f0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bec:	f7fc fee8 	bl	80019c0 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bf4:	f7fc fee4 	bl	80019c0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0f1      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c06:	f7ff fbdf 	bl	80043c8 <LL_RCC_IsActiveFlag_HPRE>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f1      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d016      	beq.n	8004c4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff faf8 	bl	8004216 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c26:	f7fc fecb 	bl	80019c0 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c2e:	f7fc fec7 	bl	80019c0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0d4      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c40:	f7ff fbd3 	bl	80043ea <LL_RCC_IsActiveFlag_C2HPRE>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f1      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff faf0 	bl	8004240 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c60:	f7fc feae 	bl	80019c0 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c68:	f7fc feaa 	bl	80019c0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0b7      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c7a:	f7ff fbc8 	bl	800440e <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f1      	beq.n	8004c68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff fae9 	bl	800426c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c9a:	f7fc fe91 	bl	80019c0 <HAL_GetTick>
 8004c9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ca2:	f7fc fe8d 	bl	80019c0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e09a      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004cb4:	f7ff fbbd 	bl	8004432 <LL_RCC_IsActiveFlag_PPRE1>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f1      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d017      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fade 	bl	8004292 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fe73 	bl	80019c0 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cde:	f7fc fe6f 	bl	80019c0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e07c      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cf0:	f7ff fbb0 	bl	8004454 <LL_RCC_IsActiveFlag_PPRE2>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f1      	beq.n	8004cde <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d043      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d0e:	f7ff f956 	bl	8003fbe <LL_RCC_HSE_IsReady>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11e      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e066      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d24:	f7ff fb12 	bl	800434c <LL_RCC_PLL_IsReady>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e05b      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004d3a:	f7ff f9f0 	bl	800411e <LL_RCC_MSI_IsReady>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e050      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d48:	f7ff f966 	bl	8004018 <LL_RCC_HSI_IsReady>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e049      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fa2a 	bl	80041b4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fc fe2e 	bl	80019c0 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fc fe2a 	bl	80019c0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e035      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	f7ff fa2c 	bl	80041da <LL_RCC_GetSysClkSource>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d1ec      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8e:	4b19      	ldr	r3, [pc, #100]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d21b      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9c:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f023 0207 	bic.w	r2, r3, #7
 8004da4:	4913      	ldr	r1, [pc, #76]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dac:	f7fc fe08 	bl	80019c0 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004db4:	f7fc fe04 	bl	80019c0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e011      	b.n	8004dea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <HAL_RCC_ClockConfig+0x278>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1ef      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dd4:	f000 f8b4 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <HAL_RCC_ClockConfig+0x27c>)
 8004ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <HAL_RCC_ClockConfig+0x280>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fca4 	bl	8002730 <HAL_InitTick>
 8004de8:	4603      	mov	r3, r0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58004000 	.word	0x58004000
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	20000058 	.word	0x20000058

08004e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e0e:	f7ff f9e4 	bl	80041da <LL_RCC_GetSysClkSource>
 8004e12:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e14:	f7ff facd 	bl	80043b2 <LL_RCC_PLL_GetMainSource>
 8004e18:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x2c>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d139      	bne.n	8004e9a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d136      	bne.n	8004e9a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004e2c:	f7ff f987 	bl	800413e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d115      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x62>
 8004e36:	f7ff f982 	bl	800413e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_GetSysClockFreq+0x4e>
 8004e40:	f7ff f98d 	bl	800415e <LL_RCC_MSI_GetRange>
 8004e44:	4603      	mov	r3, r0
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	e005      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0x5a>
 8004e4e:	f7ff f991 	bl	8004174 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e52:	4603      	mov	r3, r0
 8004e54:	0a1b      	lsrs	r3, r3, #8
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	4a36      	ldr	r2, [pc, #216]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e60:	e014      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x8c>
 8004e62:	f7ff f96c 	bl	800413e <LL_RCC_MSI_IsEnabledRangeSelect>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_GetSysClockFreq+0x7a>
 8004e6c:	f7ff f977 	bl	800415e <LL_RCC_MSI_GetRange>
 8004e70:	4603      	mov	r3, r0
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	e005      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x86>
 8004e7a:	f7ff f97b 	bl	8004174 <LL_RCC_MSI_GetRangeAfterStandby>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	4a2b      	ldr	r2, [pc, #172]	@ (8004f34 <HAL_RCC_GetSysClockFreq+0x134>)
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d115      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e98:	e012      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d102      	bne.n	8004ea6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ea0:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e00c      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d109      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004eac:	f7ff f85a 	bl	8003f64 <LL_RCC_HSE_IsEnabledDiv2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004eb6:	4b20      	ldr	r3, [pc, #128]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x138>)
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e001      	b.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ebe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec0:	f7ff f98b 	bl	80041da <LL_RCC_GetSysClkSource>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d12f      	bne.n	8004f2a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004eca:	f7ff fa72 	bl	80043b2 <LL_RCC_PLL_GetMainSource>
 8004ece:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d003      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0xde>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xe4>
 8004edc:	e00d      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ede:	4b16      	ldr	r3, [pc, #88]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ee0:	60fb      	str	r3, [r7, #12]
        break;
 8004ee2:	e00d      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ee4:	f7ff f83e 	bl	8003f64 <LL_RCC_HSE_IsEnabledDiv2>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d102      	bne.n	8004ef4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004eee:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ef0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ef2:	e005      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ef6:	60fb      	str	r3, [r7, #12]
        break;
 8004ef8:	e002      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	60fb      	str	r3, [r7, #12]
        break;
 8004efe:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f00:	f7ff fa35 	bl	800436e <LL_RCC_PLL_GetN>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	fb03 f402 	mul.w	r4, r3, r2
 8004f0c:	f7ff fa46 	bl	800439c <LL_RCC_PLL_GetDivider>
 8004f10:	4603      	mov	r3, r0
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	3301      	adds	r3, #1
 8004f16:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f1a:	f7ff fa34 	bl	8004386 <LL_RCC_PLL_GetR>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	0f5b      	lsrs	r3, r3, #29
 8004f22:	3301      	adds	r3, #1
 8004f24:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f28:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f2a:	697b      	ldr	r3, [r7, #20]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd90      	pop	{r4, r7, pc}
 8004f34:	0800e2c4 	.word	0x0800e2c4
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	01e84800 	.word	0x01e84800

08004f40 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f40:	b598      	push	{r3, r4, r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f44:	f7ff ff5c 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004f48:	4604      	mov	r4, r0
 8004f4a:	f7ff f9b5 	bl	80042b8 <LL_RCC_GetAHBPrescaler>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	4a03      	ldr	r2, [pc, #12]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd98      	pop	{r3, r4, r7, pc}
 8004f64:	0800e264 	.word	0x0800e264

08004f68 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f68:	b598      	push	{r3, r4, r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f6c:	f7ff ffe8 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f70:	4604      	mov	r4, r0
 8004f72:	f7ff f9b9 	bl	80042e8 <LL_RCC_GetAPB1Prescaler>
 8004f76:	4603      	mov	r3, r0
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	4a03      	ldr	r2, [pc, #12]	@ (8004f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd98      	pop	{r3, r4, r7, pc}
 8004f88:	0800e2a4 	.word	0x0800e2a4

08004f8c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f8c:	b598      	push	{r3, r4, r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f90:	f7ff ffd6 	bl	8004f40 <HAL_RCC_GetHCLKFreq>
 8004f94:	4604      	mov	r4, r0
 8004f96:	f7ff f9b2 	bl	80042fe <LL_RCC_GetAPB2Prescaler>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	0adb      	lsrs	r3, r3, #11
 8004f9e:	4a03      	ldr	r2, [pc, #12]	@ (8004fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd98      	pop	{r3, r4, r7, pc}
 8004fac:	0800e2a4 	.word	0x0800e2a4

08004fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	4a10      	ldr	r2, [pc, #64]	@ (8005004 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004fc8:	f7ff f981 	bl	80042ce <LL_RCC_GetAHB3Prescaler>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4a09      	ldr	r2, [pc, #36]	@ (800500c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	0c9c      	lsrs	r4, r3, #18
 8004fec:	f7fe ff80 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 f80b 	bl	8005010 <RCC_SetFlashLatency>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}
 8005004:	0800e2c4 	.word	0x0800e2c4
 8005008:	0800e264 	.word	0x0800e264
 800500c:	431bde83 	.word	0x431bde83

08005010 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	@ 0x38
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800501a:	4a3a      	ldr	r2, [pc, #232]	@ (8005104 <RCC_SetFlashLatency+0xf4>)
 800501c:	f107 0320 	add.w	r3, r7, #32
 8005020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005024:	6018      	str	r0, [r3, #0]
 8005026:	3304      	adds	r3, #4
 8005028:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800502a:	4a37      	ldr	r2, [pc, #220]	@ (8005108 <RCC_SetFlashLatency+0xf8>)
 800502c:	f107 0318 	add.w	r3, r7, #24
 8005030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005034:	6018      	str	r0, [r3, #0]
 8005036:	3304      	adds	r3, #4
 8005038:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800503a:	4a34      	ldr	r2, [pc, #208]	@ (800510c <RCC_SetFlashLatency+0xfc>)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	ca07      	ldmia	r2, {r0, r1, r2}
 8005042:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005050:	d11b      	bne.n	800508a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005052:	2300      	movs	r3, #0
 8005054:	633b      	str	r3, [r7, #48]	@ 0x30
 8005056:	e014      	b.n	8005082 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	3338      	adds	r3, #56	@ 0x38
 800505e:	443b      	add	r3, r7
 8005060:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4293      	cmp	r3, r2
 800506a:	d807      	bhi.n	800507c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	3338      	adds	r3, #56	@ 0x38
 8005072:	443b      	add	r3, r7
 8005074:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800507a:	e021      	b.n	80050c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	3301      	adds	r3, #1
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	2b02      	cmp	r3, #2
 8005086:	d9e7      	bls.n	8005058 <RCC_SetFlashLatency+0x48>
 8005088:	e01a      	b.n	80050c0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800508a:	2300      	movs	r3, #0
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508e:	e014      	b.n	80050ba <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	3338      	adds	r3, #56	@ 0x38
 8005096:	443b      	add	r3, r7
 8005098:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d807      	bhi.n	80050b4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	3338      	adds	r3, #56	@ 0x38
 80050aa:	443b      	add	r3, r7
 80050ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050b2:	e005      	b.n	80050c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	3301      	adds	r3, #1
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d9e7      	bls.n	8005090 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050c0:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <RCC_SetFlashLatency+0x100>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0207 	bic.w	r2, r3, #7
 80050c8:	4911      	ldr	r1, [pc, #68]	@ (8005110 <RCC_SetFlashLatency+0x100>)
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050d0:	f7fc fc76 	bl	80019c0 <HAL_GetTick>
 80050d4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050d6:	e008      	b.n	80050ea <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050d8:	f7fc fc72 	bl	80019c0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e007      	b.n	80050fa <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050ea:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <RCC_SetFlashLatency+0x100>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1ef      	bne.n	80050d8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3738      	adds	r7, #56	@ 0x38
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	0800ddd0 	.word	0x0800ddd0
 8005108:	0800ddd8 	.word	0x0800ddd8
 800510c:	0800dde0 	.word	0x0800dde0
 8005110:	58004000 	.word	0x58004000

08005114 <LL_RCC_LSE_IsReady>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d101      	bne.n	800512c <LL_RCC_LSE_IsReady+0x18>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <LL_RCC_LSE_IsReady+0x1a>
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <LL_RCC_SetUSARTClockSource>:
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005142:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	43db      	mvns	r3, r3
 800514c:	401a      	ands	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <LL_RCC_SetI2SClockSource>:
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800517a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <LL_RCC_SetLPUARTClockSource>:
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_SetI2CClockSource>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80051d2:	43db      	mvns	r3, r3
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80051de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <LL_RCC_SetLPTIMClockSource>:
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <LL_RCC_SetRNGClockSource>:
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005234:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <LL_RCC_SetADCClockSource>:
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005262:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <LL_RCC_SetRTCClockSource>:
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800528c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <LL_RCC_GetRTCClockSource>:
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80052a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <LL_RCC_ForceBackupDomainReset>:
{
 80052ba:	b480      	push	{r7}
 80052bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <LL_RCC_ReleaseBackupDomainReset>:
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80052f2:	bf00      	nop
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
	...

080052fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005308:	2300      	movs	r3, #0
 800530a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800530c:	2300      	movs	r3, #0
 800530e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d058      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800531c:	f7fe fdda 	bl	8003ed4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005320:	f7fc fb4e 	bl	80019c0 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005326:	e009      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005328:	f7fc fb4a 	bl	80019c0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d902      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	74fb      	strb	r3, [r7, #19]
        break;
 800533a:	e006      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800533c:	4b7b      	ldr	r3, [pc, #492]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005348:	d1ee      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d13c      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005350:	f7ff ffa7 	bl	80052a2 <LL_RCC_GetRTCClockSource>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535a:	429a      	cmp	r2, r3
 800535c:	d00f      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800536a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	f7ff ffa5 	bl	80052ba <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005370:	f7ff ffb3 	bl	80052da <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d014      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fc fb1a 	bl	80019c0 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800538e:	e00b      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fc fb16 	bl	80019c0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d902      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	74fb      	strb	r3, [r7, #19]
            break;
 80053a6:	e004      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80053a8:	f7ff feb4 	bl	8005114 <LL_RCC_LSE_IsReady>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d1ee      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff5b 	bl	8005278 <LL_RCC_SetRTCClockSource>
 80053c2:	e004      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	74bb      	strb	r3, [r7, #18]
 80053c8:	e001      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fea9 	bl	8005136 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fe9e 	bl	8005136 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fec0 	bl	8005190 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fee6 	bl	80051f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fedb 	bl	80051f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fed0 	bl	80051f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fea9 	bl	80051ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fe9e 	bl	80051ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fe93 	bl	80051ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d011      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fe5e 	bl	8005166 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b2:	d107      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fea5 	bl	8005224 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fea3 	bl	800524e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005522:	7cbb      	ldrb	r3, [r7, #18]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	58000400 	.word	0x58000400

08005530 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d071      	beq.n	8005626 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f96e 	bl	8001838 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005564:	4b32      	ldr	r3, [pc, #200]	@ (8005630 <HAL_RTC_Init+0x100>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b10      	cmp	r3, #16
 800556e:	d051      	beq.n	8005614 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005570:	4b2f      	ldr	r3, [pc, #188]	@ (8005630 <HAL_RTC_Init+0x100>)
 8005572:	22ca      	movs	r2, #202	@ 0xca
 8005574:	625a      	str	r2, [r3, #36]	@ 0x24
 8005576:	4b2e      	ldr	r3, [pc, #184]	@ (8005630 <HAL_RTC_Init+0x100>)
 8005578:	2253      	movs	r2, #83	@ 0x53
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f87f 	bl	8005680 <RTC_EnterInitMode>
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13f      	bne.n	800560c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800558c:	4b28      	ldr	r3, [pc, #160]	@ (8005630 <HAL_RTC_Init+0x100>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4a27      	ldr	r2, [pc, #156]	@ (8005630 <HAL_RTC_Init+0x100>)
 8005592:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800559a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800559c:	4b24      	ldr	r3, [pc, #144]	@ (8005630 <HAL_RTC_Init+0x100>)
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4319      	orrs	r1, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	491f      	ldr	r1, [pc, #124]	@ (8005630 <HAL_RTC_Init+0x100>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	491b      	ldr	r1, [pc, #108]	@ (8005630 <HAL_RTC_Init+0x100>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80055c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005630 <HAL_RTC_Init+0x100>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	430b      	orrs	r3, r1
 80055d8:	4915      	ldr	r1, [pc, #84]	@ (8005630 <HAL_RTC_Init+0x100>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f882 	bl	80056e8 <RTC_ExitInitMode>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10e      	bne.n	800560c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80055ee:	4b10      	ldr	r3, [pc, #64]	@ (8005630 <HAL_RTC_Init+0x100>)
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a19      	ldr	r1, [r3, #32]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	4319      	orrs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	430b      	orrs	r3, r1
 8005606:	490a      	ldr	r1, [pc, #40]	@ (8005630 <HAL_RTC_Init+0x100>)
 8005608:	4313      	orrs	r3, r2
 800560a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <HAL_RTC_Init+0x100>)
 800560e:	22ff      	movs	r2, #255	@ 0xff
 8005610:	625a      	str	r2, [r3, #36]	@ 0x24
 8005612:	e001      	b.n	8005618 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40002800 	.word	0x40002800

08005634 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800563c:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <HAL_RTC_WaitForSynchro+0x48>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a0e      	ldr	r2, [pc, #56]	@ (800567c <HAL_RTC_WaitForSynchro+0x48>)
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005648:	f7fc f9ba 	bl	80019c0 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800564e:	e009      	b.n	8005664 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005650:	f7fc f9b6 	bl	80019c0 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800565e:	d901      	bls.n	8005664 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e006      	b.n	8005672 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_RTC_WaitForSynchro+0x48>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ef      	beq.n	8005650 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40002800 	.word	0x40002800

08005680 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <RTC_EnterInitMode+0x64>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d120      	bne.n	80056da <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005698:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <RTC_EnterInitMode+0x64>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <RTC_EnterInitMode+0x64>)
 800569e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80056a4:	f7fc f98c 	bl	80019c0 <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056aa:	e00d      	b.n	80056c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056ac:	f7fc f988 	bl	80019c0 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056ba:	d905      	bls.n	80056c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2203      	movs	r2, #3
 80056c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <RTC_EnterInitMode+0x64>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <RTC_EnterInitMode+0x5a>
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d1e8      	bne.n	80056ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40002800 	.word	0x40002800

080056e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <RTC_ExitInitMode+0x78>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <RTC_ExitInitMode+0x78>)
 80056fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056fe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005700:	4b17      	ldr	r3, [pc, #92]	@ (8005760 <RTC_ExitInitMode+0x78>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff ff91 	bl	8005634 <HAL_RTC_WaitForSynchro>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01e      	beq.n	8005756 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2203      	movs	r2, #3
 800571c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	73fb      	strb	r3, [r7, #15]
 8005724:	e017      	b.n	8005756 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005726:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <RTC_ExitInitMode+0x78>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <RTC_ExitInitMode+0x78>)
 800572c:	f023 0320 	bic.w	r3, r3, #32
 8005730:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ff7e 	bl	8005634 <HAL_RTC_WaitForSynchro>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2203      	movs	r2, #3
 8005742:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800574a:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <RTC_ExitInitMode+0x78>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <RTC_ExitInitMode+0x78>)
 8005750:	f043 0320 	orr.w	r3, r3, #32
 8005754:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40002800 	.word	0x40002800

08005764 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800576c:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005774:	4904      	ldr	r1, [pc, #16]	@ (8005788 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	58000400 	.word	0x58000400

0800578c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005790:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	4a04      	ldr	r2, [pc, #16]	@ (80057a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr
 80057a8:	58000400 	.word	0x58000400

080057ac <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057b0:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	4a04      	ldr	r2, [pc, #16]	@ (80057c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80057b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	58000400 	.word	0x58000400

080057cc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80057d0:	4b03      	ldr	r3, [pc, #12]	@ (80057e0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80057d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057d6:	619a      	str	r2, [r3, #24]
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	58000400 	.word	0x58000400

080057e4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80057e8:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d101      	bne.n	80057f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	58000400 	.word	0x58000400

08005808 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d101      	bne.n	800581c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	58000400 	.word	0x58000400

0800582c <LL_RCC_RF_DisableReset>:
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800583c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005844:	bf00      	nop
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <LL_RCC_IsRFUnderReset>:
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800585c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005860:	d101      	bne.n	8005866 <LL_RCC_IsRFUnderReset+0x1a>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <LL_RCC_IsRFUnderReset+0x1c>
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <LL_EXTI_EnableIT_32_63+0x24>)
 800587a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800587e:	4905      	ldr	r1, [pc, #20]	@ (8005894 <LL_EXTI_EnableIT_32_63+0x24>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	58000800 	.word	0x58000800

08005898 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
    return status;
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	e078      	b.n	80059a0 <HAL_SUBGHZ_Init+0x108>
  }
  else
  {
    status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	799b      	ldrb	r3, [r3, #6]
 80058b6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SUBGHZ_Init+0x2c>
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d12f      	bne.n	8005924 <HAL_SUBGHZ_Init+0x8c>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1)
    /* Init the SUBGHZ Legacy weak Callback settings */
    hsubghz->TxCpltCallback              = HAL_SUBGHZ_TxCpltCallback;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a36      	ldr	r2, [pc, #216]	@ (80059a8 <HAL_SUBGHZ_Init+0x110>)
 80058ce:	60da      	str	r2, [r3, #12]
    hsubghz->RxCpltCallback              = HAL_SUBGHZ_RxCpltCallback;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a36      	ldr	r2, [pc, #216]	@ (80059ac <HAL_SUBGHZ_Init+0x114>)
 80058d4:	611a      	str	r2, [r3, #16]
    hsubghz->PreambleDetectedCallback    = HAL_SUBGHZ_PreambleDetectedCallback;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a35      	ldr	r2, [pc, #212]	@ (80059b0 <HAL_SUBGHZ_Init+0x118>)
 80058da:	615a      	str	r2, [r3, #20]
    hsubghz->SyncWordValidCallback       = HAL_SUBGHZ_SyncWordValidCallback;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a35      	ldr	r2, [pc, #212]	@ (80059b4 <HAL_SUBGHZ_Init+0x11c>)
 80058e0:	619a      	str	r2, [r3, #24]
    hsubghz->HeaderValidCallback         = HAL_SUBGHZ_HeaderValidCallback;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a34      	ldr	r2, [pc, #208]	@ (80059b8 <HAL_SUBGHZ_Init+0x120>)
 80058e6:	61da      	str	r2, [r3, #28]
    hsubghz->HeaderErrorCallback         = HAL_SUBGHZ_HeaderErrorCallback;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a34      	ldr	r2, [pc, #208]	@ (80059bc <HAL_SUBGHZ_Init+0x124>)
 80058ec:	621a      	str	r2, [r3, #32]
    hsubghz->CRCErrorCallback            = HAL_SUBGHZ_CRCErrorCallback;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a33      	ldr	r2, [pc, #204]	@ (80059c0 <HAL_SUBGHZ_Init+0x128>)
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsubghz->CADStatusCallback           = HAL_SUBGHZ_CADStatusCallback;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a33      	ldr	r2, [pc, #204]	@ (80059c4 <HAL_SUBGHZ_Init+0x12c>)
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28
    hsubghz->RxTxTimeoutCallback         = HAL_SUBGHZ_RxTxTimeoutCallback;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a32      	ldr	r2, [pc, #200]	@ (80059c8 <HAL_SUBGHZ_Init+0x130>)
 80058fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsubghz->LrFhssHopCallback           = HAL_SUBGHZ_LrFhssHopCallback;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a32      	ldr	r2, [pc, #200]	@ (80059cc <HAL_SUBGHZ_Init+0x134>)
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hsubghz->MspInitCallback == NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_SUBGHZ_Init+0x7c>
    {
      hsubghz->MspInitCallback = HAL_SUBGHZ_MspInit; /* Legacy weak MspInit  */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2f      	ldr	r2, [pc, #188]	@ (80059d0 <HAL_SUBGHZ_Init+0x138>)
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800591c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005920:	f7ff ffa6 	bl	8005870 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d126      	bne.n	8005978 <HAL_SUBGHZ_Init+0xe0>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005930:	f7ff ff7c 	bl	800582c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005934:	4b27      	ldr	r3, [pc, #156]	@ (80059d4 <HAL_SUBGHZ_Init+0x13c>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	0cdb      	lsrs	r3, r3, #19
 8005942:	2264      	movs	r2, #100	@ 0x64
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_SUBGHZ_Init+0xc4>
      {
        status  = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	609a      	str	r2, [r3, #8]
        break;
 800595a:	e007      	b.n	800596c <HAL_SUBGHZ_Init+0xd4>
      }
      count--;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3b01      	subs	r3, #1
 8005960:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005962:	f7ff ff73 	bl	800584c <LL_RCC_IsRFUnderReset>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ee      	bne.n	800594a <HAL_SUBGHZ_Init+0xb2>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800596c:	f7ff ff0e 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005970:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005974:	f7ff fef6 	bl	8005764 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005978:	f7ff ff28 	bl	80057cc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <HAL_SUBGHZ_Init+0x100>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fade 	bl	8005f48 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	719a      	strb	r2, [r3, #6]

  return status;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	0800b4cd 	.word	0x0800b4cd
 80059ac:	0800b4e9 	.word	0x0800b4e9
 80059b0:	0800b599 	.word	0x0800b599
 80059b4:	0800b5b5 	.word	0x0800b5b5
 80059b8:	0800b5d1 	.word	0x0800b5d1
 80059bc:	0800b57d 	.word	0x0800b57d
 80059c0:	0800b505 	.word	0x0800b505
 80059c4:	0800b521 	.word	0x0800b521
 80059c8:	0800b55d 	.word	0x0800b55d
 80059cc:	0800b5ed 	.word	0x0800b5ed
 80059d0:	0800198d 	.word	0x0800198d
 80059d4:	20000000 	.word	0x20000000

080059d8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	460b      	mov	r3, r1
 80059e6:	817b      	strh	r3, [r7, #10]
 80059e8:	4613      	mov	r3, r2
 80059ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	799b      	ldrb	r3, [r3, #6]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d14a      	bne.n	8005a8c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	795b      	ldrb	r3, [r3, #5]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e045      	b.n	8005a8e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fb68 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a14:	f7ff feca 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005a18:	210d      	movs	r1, #13
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fab4 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005a20:	897b      	ldrh	r3, [r7, #10]
 8005a22:	0a1b      	lsrs	r3, r3, #8
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 faac 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005a30:	897b      	ldrh	r3, [r7, #10]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 faa6 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	82bb      	strh	r3, [r7, #20]
 8005a40:	e00a      	b.n	8005a58 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a42:	8abb      	ldrh	r3, [r7, #20]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4413      	add	r3, r2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fa9b 	bl	8005f88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a52:	8abb      	ldrh	r3, [r7, #20]
 8005a54:	3301      	adds	r3, #1
 8005a56:	82bb      	strh	r3, [r7, #20]
 8005a58:	8aba      	ldrh	r2, [r7, #20]
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3f0      	bcc.n	8005a42 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a60:	f7ff fe94 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fb61 	bl	800612c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75fb      	strb	r3, [r7, #23]
 8005a76:	e001      	b.n	8005a7c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	715a      	strb	r2, [r3, #5]

    return status;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	e000      	b.n	8005a8e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b088      	sub	sp, #32
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	799b      	ldrb	r3, [r3, #6]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d14a      	bne.n	8005b4e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	795b      	ldrb	r3, [r3, #5]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e045      	b.n	8005b50 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fb0a 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ad0:	f7ff fe6c 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005ad4:	211d      	movs	r1, #29
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fa56 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005adc:	897b      	ldrh	r3, [r7, #10]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fa4e 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	4619      	mov	r1, r3
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fa48 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005af8:	2100      	movs	r1, #0
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fa44 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	82fb      	strh	r3, [r7, #22]
 8005b04:	e009      	b.n	8005b1a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005b06:	69b9      	ldr	r1, [r7, #24]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 fa93 	bl	8006034 <SUBGHZSPI_Receive>
      pData++;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005b14:	8afb      	ldrh	r3, [r7, #22]
 8005b16:	3301      	adds	r3, #1
 8005b18:	82fb      	strh	r3, [r7, #22]
 8005b1a:	8afa      	ldrh	r2, [r7, #22]
 8005b1c:	893b      	ldrh	r3, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3f1      	bcc.n	8005b06 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b22:	f7ff fe33 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fb00 	bl	800612c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e001      	b.n	8005b3e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	715a      	strb	r2, [r3, #5]

    return status;
 8005b4a:	7ffb      	ldrb	r3, [r7, #31]
 8005b4c:	e000      	b.n	8005b50 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005b4e:	2302      	movs	r3, #2
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	461a      	mov	r2, r3
 8005b64:	460b      	mov	r3, r1
 8005b66:	72fb      	strb	r3, [r7, #11]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	799b      	ldrb	r3, [r3, #6]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d14a      	bne.n	8005c0c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	795b      	ldrb	r3, [r3, #5]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e045      	b.n	8005c0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 faab 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	2b84      	cmp	r3, #132	@ 0x84
 8005b92:	d002      	beq.n	8005b9a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005b94:	7afb      	ldrb	r3, [r7, #11]
 8005b96:	2b94      	cmp	r3, #148	@ 0x94
 8005b98:	d103      	bne.n	8005ba2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	711a      	strb	r2, [r3, #4]
 8005ba0:	e002      	b.n	8005ba8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005ba8:	f7ff fe00 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f9e9 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	82bb      	strh	r3, [r7, #20]
 8005bba:	e00a      	b.n	8005bd2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005bbc:	8abb      	ldrh	r3, [r7, #20]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f9de 	bl	8005f88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bcc:	8abb      	ldrh	r3, [r7, #20]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	82bb      	strh	r3, [r7, #20]
 8005bd2:	8aba      	ldrh	r2, [r7, #20]
 8005bd4:	893b      	ldrh	r3, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3f0      	bcc.n	8005bbc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005bda:	f7ff fdd7 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005bde:	7afb      	ldrb	r3, [r7, #11]
 8005be0:	2b84      	cmp	r3, #132	@ 0x84
 8005be2:	d002      	beq.n	8005bea <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 faa1 	bl	800612c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
 8005bf6:	e001      	b.n	8005bfc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	715a      	strb	r2, [r3, #5]

    return status;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	e000      	b.n	8005c0e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b088      	sub	sp, #32
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	461a      	mov	r2, r3
 8005c22:	460b      	mov	r3, r1
 8005c24:	72fb      	strb	r3, [r7, #11]
 8005c26:	4613      	mov	r3, r2
 8005c28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	799b      	ldrb	r3, [r3, #6]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d13d      	bne.n	8005cb4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	795b      	ldrb	r3, [r3, #5]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e038      	b.n	8005cb6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fa4a 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c50:	f7ff fdac 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f995 	bl	8005f88 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c5e:	2100      	movs	r1, #0
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f991 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	82fb      	strh	r3, [r7, #22]
 8005c6a:	e009      	b.n	8005c80 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f9e0 	bl	8006034 <SUBGHZSPI_Receive>
      pData++;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	3301      	adds	r3, #1
 8005c78:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c7a:	8afb      	ldrh	r3, [r7, #22]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	82fb      	strh	r3, [r7, #22]
 8005c80:	8afa      	ldrh	r2, [r7, #22]
 8005c82:	893b      	ldrh	r3, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d3f1      	bcc.n	8005c6c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c88:	f7ff fd80 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fa4d 	bl	800612c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	77fb      	strb	r3, [r7, #31]
 8005c9e:	e001      	b.n	8005ca4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	715a      	strb	r2, [r3, #5]

    return status;
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	e000      	b.n	8005cb6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b086      	sub	sp, #24
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	460b      	mov	r3, r1
 8005ccc:	72fb      	strb	r3, [r7, #11]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	799b      	ldrb	r3, [r3, #6]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d13e      	bne.n	8005d5a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	795b      	ldrb	r3, [r3, #5]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e039      	b.n	8005d5c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f9f8 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005cf4:	f7ff fd5a 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005cf8:	210e      	movs	r1, #14
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f944 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	4619      	mov	r1, r3
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f93f 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	82bb      	strh	r3, [r7, #20]
 8005d0e:	e00a      	b.n	8005d26 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005d10:	8abb      	ldrh	r3, [r7, #20]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f934 	bl	8005f88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d20:	8abb      	ldrh	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	82bb      	strh	r3, [r7, #20]
 8005d26:	8aba      	ldrh	r2, [r7, #20]
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d3f0      	bcc.n	8005d10 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d2e:	f7ff fd2d 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f9fa 	bl	800612c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
 8005d44:	e001      	b.n	8005d4a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	715a      	strb	r2, [r3, #5]

    return status;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
 8005d58:	e000      	b.n	8005d5c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d5a:	2302      	movs	r3, #2
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	460b      	mov	r3, r1
 8005d72:	72fb      	strb	r3, [r7, #11]
 8005d74:	4613      	mov	r3, r2
 8005d76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	799b      	ldrb	r3, [r3, #6]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d141      	bne.n	8005e0a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	795b      	ldrb	r3, [r3, #5]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e03c      	b.n	8005e0c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f9a3 	bl	80060e4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d9e:	f7ff fd05 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005da2:	211e      	movs	r1, #30
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f8ef 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f8ea 	bl	8005f88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005db4:	2100      	movs	r1, #0
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8e6 	bl	8005f88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	82fb      	strh	r3, [r7, #22]
 8005dc0:	e009      	b.n	8005dd6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f935 	bl	8006034 <SUBGHZSPI_Receive>
      pData++;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005dd0:	8afb      	ldrh	r3, [r7, #22]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	82fb      	strh	r3, [r7, #22]
 8005dd6:	8afa      	ldrh	r2, [r7, #22]
 8005dd8:	893b      	ldrh	r3, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3f1      	bcc.n	8005dc2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005dde:	f7ff fcd5 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f9a2 	bl	800612c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e001      	b.n	8005dfa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	715a      	strb	r2, [r3, #5]

    return status;
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
 8005e08:	e000      	b.n	8005e0c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005e20:	f107 020c 	add.w	r2, r7, #12
 8005e24:	2302      	movs	r3, #2
 8005e26:	2112      	movs	r1, #18
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fef4 	bl	8005c16 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005e2e:	7b3b      	ldrb	r3, [r7, #12]
 8005e30:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	b21a      	sxth	r2, r3
 8005e3a:	7b7b      	ldrb	r3, [r7, #13]
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005e44:	f107 020c 	add.w	r2, r7, #12
 8005e48:	2302      	movs	r3, #2
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff fe83 	bl	8005b58 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005e52:	89fb      	ldrh	r3, [r7, #14]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_SUBGHZ_IRQHandler+0x70>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	099b      	lsrs	r3, r3, #6
 8005e74:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	4798      	blx	r3
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005e84:	89fb      	ldrh	r3, [r7, #14]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	08db      	lsrs	r3, r3, #3
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	091b      	lsrs	r3, r3, #4
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	4798      	blx	r3
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005ec0:	89fb      	ldrh	r3, [r7, #14]
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_SUBGHZ_IRQHandler+0xc0>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005ed4:	89fb      	ldrh	r3, [r7, #14]
 8005ed6:	099b      	lsrs	r3, r3, #6
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005ee8:	89fb      	ldrh	r3, [r7, #14]
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005ef4:	89fb      	ldrh	r3, [r7, #14]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_SUBGHZ_IRQHandler+0xf8>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	e004      	b.n	8005f16 <HAL_SUBGHZ_IRQHandler+0x102>
    }
    else
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	0a5b      	lsrs	r3, r3, #9
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_SUBGHZ_IRQHandler+0x116>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	0b9b      	lsrs	r3, r3, #14
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_SUBGHZ_IRQHandler+0x12a>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f50:	4b0c      	ldr	r3, [pc, #48]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a0b      	ldr	r2, [pc, #44]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005f5c:	4a09      	ldr	r2, [pc, #36]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8005f64:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005f66:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f68:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005f6c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f6e:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a04      	ldr	r2, [pc, #16]	@ (8005f84 <SUBGHZSPI_Init+0x3c>)
 8005f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f78:	6013      	str	r3, [r2, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	58010000 	.word	0x58010000

08005f88 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f98:	4b23      	ldr	r3, [pc, #140]	@ (8006028 <SUBGHZSPI_Transmit+0xa0>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	0cdb      	lsrs	r3, r3, #19
 8005fa6:	2264      	movs	r2, #100	@ 0x64
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d105      	bne.n	8005fc0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	609a      	str	r2, [r3, #8]
      break;
 8005fbe:	e008      	b.n	8005fd2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005fc6:	4b19      	ldr	r3, [pc, #100]	@ (800602c <SUBGHZSPI_Transmit+0xa4>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d1ed      	bne.n	8005fae <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005fd2:	4b17      	ldr	r3, [pc, #92]	@ (8006030 <SUBGHZSPI_Transmit+0xa8>)
 8005fd4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fdc:	4b12      	ldr	r3, [pc, #72]	@ (8006028 <SUBGHZSPI_Transmit+0xa0>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	0cdb      	lsrs	r3, r3, #19
 8005fea:	2264      	movs	r2, #100	@ 0x64
 8005fec:	fb02 f303 	mul.w	r3, r2, r3
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	609a      	str	r2, [r3, #8]
      break;
 8006002:	e008      	b.n	8006016 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3b01      	subs	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800600a:	4b08      	ldr	r3, [pc, #32]	@ (800602c <SUBGHZSPI_Transmit+0xa4>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d1ed      	bne.n	8005ff2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006016:	4b05      	ldr	r3, [pc, #20]	@ (800602c <SUBGHZSPI_Transmit+0xa4>)
 8006018:	68db      	ldr	r3, [r3, #12]

  return status;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
}
 800601c:	4618      	mov	r0, r3
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000
 800602c:	58010000 	.word	0x58010000
 8006030:	5801000c 	.word	0x5801000c

08006034 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006042:	4b25      	ldr	r3, [pc, #148]	@ (80060d8 <SUBGHZSPI_Receive+0xa4>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	0cdb      	lsrs	r3, r3, #19
 8006050:	2264      	movs	r2, #100	@ 0x64
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d105      	bne.n	800606a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	609a      	str	r2, [r3, #8]
      break;
 8006068:	e008      	b.n	800607c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3b01      	subs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006070:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <SUBGHZSPI_Receive+0xa8>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d1ed      	bne.n	8006058 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800607c:	4b18      	ldr	r3, [pc, #96]	@ (80060e0 <SUBGHZSPI_Receive+0xac>)
 800607e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	22ff      	movs	r2, #255	@ 0xff
 8006084:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006086:	4b14      	ldr	r3, [pc, #80]	@ (80060d8 <SUBGHZSPI_Receive+0xa4>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	0cdb      	lsrs	r3, r3, #19
 8006094:	2264      	movs	r2, #100	@ 0x64
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	609a      	str	r2, [r3, #8]
      break;
 80060ac:	e008      	b.n	80060c0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80060b4:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <SUBGHZSPI_Receive+0xa8>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d1ed      	bne.n	800609c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80060c0:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <SUBGHZSPI_Receive+0xa8>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	701a      	strb	r2, [r3, #0]

  return status;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000
 80060dc:	58010000 	.word	0x58010000
 80060e0:	5801000c 	.word	0x5801000c

080060e4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	791b      	ldrb	r3, [r3, #4]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d111      	bne.n	8006118 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <SUBGHZ_CheckDeviceReady+0x44>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006104:	f7ff fb52 	bl	80057ac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b01      	subs	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f9      	bne.n	8006108 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006114:	f7ff fb3a 	bl	800578c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f807 	bl	800612c <SUBGHZ_WaitOnBusy>
 800611e:	4603      	mov	r3, r0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000000 	.word	0x20000000

0800612c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006138:	4b12      	ldr	r3, [pc, #72]	@ (8006184 <SUBGHZ_WaitOnBusy+0x58>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	4413      	add	r3, r2
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	0d1b      	lsrs	r3, r3, #20
 8006146:	2264      	movs	r2, #100	@ 0x64
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800614e:	f7ff fb5b 	bl	8005808 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8006152:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	609a      	str	r2, [r3, #8]
      break;
 8006164:	e009      	b.n	800617a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b01      	subs	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800616c:	f7ff fb3a 	bl	80057e4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4013      	ands	r3, r2
 8006176:	2b01      	cmp	r3, #1
 8006178:	d0e9      	beq.n	800614e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000000 	.word	0x20000000

08006188 <LL_RCC_GetUSARTClockSource>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006194:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	401a      	ands	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	041b      	lsls	r3, r3, #16
 80061a0:	4313      	orrs	r3, r2
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_GetLPUARTClockSource>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80061b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4013      	ands	r3, r2
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e050      	b.n	8006280 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d114      	bne.n	8006212 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fca5 	bl	8006b40 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d103      	bne.n	8006208 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <HAL_UART_Init+0xbc>)
 8006204:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2224      	movs	r2, #36	@ 0x24
 8006216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 ff4a 	bl	80070cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fcd3 	bl	8006be4 <UART_SetConfig>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e01b      	b.n	8006280 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 ffc8 	bl	800720e <UART_CheckIdleState>
 800627e:	4603      	mov	r3, r0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	08002399 	.word	0x08002399

0800628c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	@ 0x28
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	603b      	str	r3, [r7, #0]
 8006298:	4613      	mov	r3, r2
 800629a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d173      	bne.n	800638e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_UART_Transmit+0x26>
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e06c      	b.n	8006390 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2221      	movs	r2, #33	@ 0x21
 80062c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062c6:	f7fb fb7b 	bl	80019c0 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e4:	d108      	bne.n	80062f8 <HAL_UART_Transmit+0x6c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	e003      	b.n	8006300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006300:	e02c      	b.n	800635c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2200      	movs	r2, #0
 800630a:	2180      	movs	r1, #128	@ 0x80
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 ffcc 	bl	80072aa <UART_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e039      	b.n	8006390 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	3302      	adds	r3, #2
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	e007      	b.n	800634a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1cc      	bne.n	8006302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	2140      	movs	r1, #64	@ 0x40
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ff99 	bl	80072aa <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e006      	b.n	8006390 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	@ 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d137      	bne.n	8006420 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_UART_Receive_IT+0x24>
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e030      	b.n	8006422 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a18      	ldr	r2, [pc, #96]	@ (800642c <HAL_UART_Receive_IT+0x94>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d01f      	beq.n	8006410 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	61bb      	str	r3, [r7, #24]
   return(result);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e6      	bne.n	80063de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	461a      	mov	r2, r3
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 f816 	bl	8007448 <UART_Start_Receive_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	e000      	b.n	8006422 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006420:	2302      	movs	r3, #2
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3728      	adds	r7, #40	@ 0x28
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40008000 	.word	0x40008000

08006430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b0ba      	sub	sp, #232	@ 0xe8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006456:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800645a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800645e:	4013      	ands	r3, r2
 8006460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d11b      	bne.n	80064a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 82f3 	beq.w	8006a80 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
      }
      return;
 80064a2:	e2ed      	b.n	8006a80 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8129 	beq.w	8006700 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064b2:	4b90      	ldr	r3, [pc, #576]	@ (80066f4 <HAL_UART_IRQHandler+0x2c4>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064be:	4b8e      	ldr	r3, [pc, #568]	@ (80066f8 <HAL_UART_IRQHandler+0x2c8>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 811c 	beq.w	8006700 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d011      	beq.n	80064f8 <HAL_UART_IRQHandler+0xc8>
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2201      	movs	r2, #1
 80064e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <HAL_UART_IRQHandler+0xf8>
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2202      	movs	r2, #2
 8006516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651e:	f043 0204 	orr.w	r2, r3, #4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d011      	beq.n	8006558 <HAL_UART_IRQHandler+0x128>
 8006534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2204      	movs	r2, #4
 8006546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f043 0202 	orr.w	r2, r3, #2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006570:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006574:	4b5f      	ldr	r3, [pc, #380]	@ (80066f4 <HAL_UART_IRQHandler+0x2c4>)
 8006576:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658a:	f043 0208 	orr.w	r2, r3, #8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800659c:	2b00      	cmp	r3, #0
 800659e:	d012      	beq.n	80065c6 <HAL_UART_IRQHandler+0x196>
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8259 	beq.w	8006a84 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d013      	beq.n	8006606 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d105      	bne.n	80065f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661a:	2b40      	cmp	r3, #64	@ 0x40
 800661c:	d005      	beq.n	800662a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800661e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	d058      	beq.n	80066dc <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 f82c 	bl	8007688 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663a:	2b40      	cmp	r3, #64	@ 0x40
 800663c:	d148      	bne.n	80066d0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800665c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800666a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800666e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1d9      	bne.n	800663e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	d017      	beq.n	80066c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800669a:	4a18      	ldr	r2, [pc, #96]	@ (80066fc <HAL_UART_IRQHandler+0x2cc>)
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fd f9ca 	bl	8003a3e <HAL_DMA_Abort_IT>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01f      	beq.n	80066f0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80066be:	4610      	mov	r0, r2
 80066c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c2:	e015      	b.n	80066f0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	e00f      	b.n	80066f0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066da:	e009      	b.n	80066f0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80066ee:	e1c9      	b.n	8006a84 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	bf00      	nop
    return;
 80066f2:	e1c7      	b.n	8006a84 <HAL_UART_IRQHandler+0x654>
 80066f4:	10000001 	.word	0x10000001
 80066f8:	04000120 	.word	0x04000120
 80066fc:	08007753 	.word	0x08007753

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 8157 	bne.w	80069b8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8150 	beq.w	80069b8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8149 	beq.w	80069b8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2210      	movs	r2, #16
 800672c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006738:	2b40      	cmp	r3, #64	@ 0x40
 800673a:	f040 80bd 	bne.w	80068b8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800674c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8199 	beq.w	8006a88 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006760:	429a      	cmp	r2, r3
 8006762:	f080 8191 	bcs.w	8006a88 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800676c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8087 	bne.w	8006892 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800679c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1da      	bne.n	8006784 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e1      	bne.n	80067ce <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800681a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800681c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800682e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800683c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e3      	bne.n	800680a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800685e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd f878 	bl	8003982 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80068aa:	b292      	uxth	r2, r2
 80068ac:	1a8a      	subs	r2, r1, r2
 80068ae:	b292      	uxth	r2, r2
 80068b0:	4611      	mov	r1, r2
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068b6:	e0e7      	b.n	8006a88 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80d9 	beq.w	8006a8c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80068da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80d4 	beq.w	8006a8c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006906:	647b      	str	r3, [r7, #68]	@ 0x44
 8006908:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800690c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e4      	bne.n	80068e4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	623b      	str	r3, [r7, #32]
   return(result);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006942:	633a      	str	r2, [r7, #48]	@ 0x30
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60fb      	str	r3, [r7, #12]
   return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0310 	bic.w	r3, r3, #16
 800697e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	69b9      	ldr	r1, [r7, #24]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	617b      	str	r3, [r7, #20]
   return(result);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e4      	bne.n	800696a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069ac:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069b6:	e069      	b.n	8006a8c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d010      	beq.n	80069e6 <HAL_UART_IRQHandler+0x5b6>
 80069c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069d8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069e4:	e055      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d014      	beq.n	8006a1c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80069fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d03e      	beq.n	8006a90 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
    }
    return;
 8006a1a:	e039      	b.n	8006a90 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <HAL_UART_IRQHandler+0x60c>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fea4 	bl	8007782 <UART_EndTransmit_IT>
    return;
 8006a3a:	e02a      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_UART_IRQHandler+0x630>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a5e:	e018      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d012      	beq.n	8006a92 <HAL_UART_IRQHandler+0x662>
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da0e      	bge.n	8006a92 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a7e:	e008      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
      return;
 8006a80:	bf00      	nop
 8006a82:	e006      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
    return;
 8006a84:	bf00      	nop
 8006a86:	e004      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
      return;
 8006a88:	bf00      	nop
 8006a8a:	e002      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
      return;
 8006a8c:	bf00      	nop
 8006a8e:	e000      	b.n	8006a92 <HAL_UART_IRQHandler+0x662>
    return;
 8006a90:	bf00      	nop
  }
}
 8006a92:	37e8      	adds	r7, #232	@ 0xe8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr

08006ace <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr

08006ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr
	...

08006b40 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb4 <UART_InitCallbacksToDefault+0x74>)
 8006b4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a19      	ldr	r2, [pc, #100]	@ (8006bb8 <UART_InitCallbacksToDefault+0x78>)
 8006b54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	@ (8006bbc <UART_InitCallbacksToDefault+0x7c>)
 8006b5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a17      	ldr	r2, [pc, #92]	@ (8006bc0 <UART_InitCallbacksToDefault+0x80>)
 8006b64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a16      	ldr	r2, [pc, #88]	@ (8006bc4 <UART_InitCallbacksToDefault+0x84>)
 8006b6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a15      	ldr	r2, [pc, #84]	@ (8006bc8 <UART_InitCallbacksToDefault+0x88>)
 8006b74:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a14      	ldr	r2, [pc, #80]	@ (8006bcc <UART_InitCallbacksToDefault+0x8c>)
 8006b7c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a13      	ldr	r2, [pc, #76]	@ (8006bd0 <UART_InitCallbacksToDefault+0x90>)
 8006b84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a12      	ldr	r2, [pc, #72]	@ (8006bd4 <UART_InitCallbacksToDefault+0x94>)
 8006b8c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a11      	ldr	r2, [pc, #68]	@ (8006bd8 <UART_InitCallbacksToDefault+0x98>)
 8006b94:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a10      	ldr	r2, [pc, #64]	@ (8006bdc <UART_InitCallbacksToDefault+0x9c>)
 8006b9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8006be0 <UART_InitCallbacksToDefault+0xa0>)
 8006ba4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	08006aab 	.word	0x08006aab
 8006bb8:	08006a99 	.word	0x08006a99
 8006bbc:	08006acf 	.word	0x08006acf
 8006bc0:	08006abd 	.word	0x08006abd
 8006bc4:	08006ae1 	.word	0x08006ae1
 8006bc8:	08006af3 	.word	0x08006af3
 8006bcc:	08006b05 	.word	0x08006b05
 8006bd0:	08006b17 	.word	0x08006b17
 8006bd4:	0800823d 	.word	0x0800823d
 8006bd8:	0800824f 	.word	0x0800824f
 8006bdc:	08008261 	.word	0x08008261
 8006be0:	08006b29 	.word	0x08006b29

08006be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b08c      	sub	sp, #48	@ 0x30
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b94      	ldr	r3, [pc, #592]	@ (8006e64 <UART_SetConfig+0x280>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a89      	ldr	r2, [pc, #548]	@ (8006e68 <UART_SetConfig+0x284>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c5a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	f023 010f 	bic.w	r1, r3, #15
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7a      	ldr	r2, [pc, #488]	@ (8006e6c <UART_SetConfig+0x288>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d127      	bne.n	8006cd8 <UART_SetConfig+0xf4>
 8006c88:	2003      	movs	r0, #3
 8006c8a:	f7ff fa7d 	bl	8006188 <LL_RCC_GetUSARTClockSource>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d81b      	bhi.n	8006cd0 <UART_SetConfig+0xec>
 8006c98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <UART_SetConfig+0xbc>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e080      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e07c      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e078      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e074      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e070      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a64      	ldr	r2, [pc, #400]	@ (8006e70 <UART_SetConfig+0x28c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d138      	bne.n	8006d54 <UART_SetConfig+0x170>
 8006ce2:	200c      	movs	r0, #12
 8006ce4:	f7ff fa50 	bl	8006188 <LL_RCC_GetUSARTClockSource>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8006cee:	2b0c      	cmp	r3, #12
 8006cf0:	d82c      	bhi.n	8006d4c <UART_SetConfig+0x168>
 8006cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <UART_SetConfig+0x114>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d4d 	.word	0x08006d4d
 8006d04:	08006d4d 	.word	0x08006d4d
 8006d08:	08006d3d 	.word	0x08006d3d
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d4d 	.word	0x08006d4d
 8006d14:	08006d4d 	.word	0x08006d4d
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d45 	.word	0x08006d45
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d32:	e042      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d34:	2302      	movs	r3, #2
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d3a:	e03e      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d42:	e03a      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d44:	2308      	movs	r3, #8
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d4a:	e036      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d52:	e032      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a43      	ldr	r2, [pc, #268]	@ (8006e68 <UART_SetConfig+0x284>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d12a      	bne.n	8006db4 <UART_SetConfig+0x1d0>
 8006d5e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006d62:	f7ff fa23 	bl	80061ac <LL_RCC_GetLPUARTClockSource>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d6c:	d01a      	beq.n	8006da4 <UART_SetConfig+0x1c0>
 8006d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d72:	d81b      	bhi.n	8006dac <UART_SetConfig+0x1c8>
 8006d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d78:	d00c      	beq.n	8006d94 <UART_SetConfig+0x1b0>
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d7e:	d815      	bhi.n	8006dac <UART_SetConfig+0x1c8>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <UART_SetConfig+0x1a8>
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d88:	d008      	beq.n	8006d9c <UART_SetConfig+0x1b8>
 8006d8a:	e00f      	b.n	8006dac <UART_SetConfig+0x1c8>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d92:	e012      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	e00e      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da2:	e00a      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006daa:	e006      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db2:	e002      	b.n	8006dba <UART_SetConfig+0x1d6>
 8006db4:	2310      	movs	r3, #16
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8006e68 <UART_SetConfig+0x284>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	f040 80a4 	bne.w	8006f0e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d823      	bhi.n	8006e16 <UART_SetConfig+0x232>
 8006dce:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd4 <UART_SetConfig+0x1f0>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e17 	.word	0x08006e17
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e17 	.word	0x08006e17
 8006de4:	08006e07 	.word	0x08006e07
 8006de8:	08006e17 	.word	0x08006e17
 8006dec:	08006e17 	.word	0x08006e17
 8006df0:	08006e17 	.word	0x08006e17
 8006df4:	08006e0f 	.word	0x08006e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df8:	f7fe f8b6 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8006dfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dfe:	e010      	b.n	8006e22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e00:	4b1c      	ldr	r3, [pc, #112]	@ (8006e74 <UART_SetConfig+0x290>)
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e04:	e00d      	b.n	8006e22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e06:	f7fd fffb 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006e0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e0c:	e009      	b.n	8006e22 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e14:	e005      	b.n	8006e22 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 8137 	beq.w	8007098 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	4a12      	ldr	r2, [pc, #72]	@ (8006e78 <UART_SetConfig+0x294>)
 8006e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e34:	461a      	mov	r2, r3
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	4413      	add	r3, r2
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d305      	bcc.n	8006e5a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d910      	bls.n	8006e7c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e60:	e11a      	b.n	8007098 <UART_SetConfig+0x4b4>
 8006e62:	bf00      	nop
 8006e64:	cfff69f3 	.word	0xcfff69f3
 8006e68:	40008000 	.word	0x40008000
 8006e6c:	40013800 	.word	0x40013800
 8006e70:	40004400 	.word	0x40004400
 8006e74:	00f42400 	.word	0x00f42400
 8006e78:	0800e350 	.word	0x0800e350
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	60fa      	str	r2, [r7, #12]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	4a8e      	ldr	r2, [pc, #568]	@ (80070c4 <UART_SetConfig+0x4e0>)
 8006e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2200      	movs	r2, #0
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	607a      	str	r2, [r7, #4]
 8006e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e9e:	f7f9 ffa1 	bl	8000de4 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	020b      	lsls	r3, r1, #8
 8006eb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006eb8:	0202      	lsls	r2, r0, #8
 8006eba:	6979      	ldr	r1, [r7, #20]
 8006ebc:	6849      	ldr	r1, [r1, #4]
 8006ebe:	0849      	lsrs	r1, r1, #1
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	eb12 0804 	adds.w	r8, r2, r4
 8006eca:	eb43 0905 	adc.w	r9, r3, r5
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	469a      	mov	sl, r3
 8006ed6:	4693      	mov	fp, r2
 8006ed8:	4652      	mov	r2, sl
 8006eda:	465b      	mov	r3, fp
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f7f9 ff80 	bl	8000de4 <__aeabi_uldivmod>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4613      	mov	r3, r2
 8006eea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ef2:	d308      	bcc.n	8006f06 <UART_SetConfig+0x322>
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006efa:	d204      	bcs.n	8006f06 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e0c8      	b.n	8007098 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f0c:	e0c4      	b.n	8007098 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f16:	d167      	bne.n	8006fe8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006f18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d828      	bhi.n	8006f72 <UART_SetConfig+0x38e>
 8006f20:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <UART_SetConfig+0x344>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	08006f73 	.word	0x08006f73
 8006f38:	08006f63 	.word	0x08006f63
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f73 	.word	0x08006f73
 8006f44:	08006f73 	.word	0x08006f73
 8006f48:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f4c:	f7fe f80c 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8006f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f52:	e014      	b.n	8006f7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f54:	f7fe f81a 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 8006f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80070c8 <UART_SetConfig+0x4e4>)
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fd ff4d 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8006f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8089 	beq.w	8007098 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80070c4 <UART_SetConfig+0x4e0>)
 8006f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f98:	005a      	lsls	r2, r3, #1
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	441a      	add	r2, r3
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006faa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2b0f      	cmp	r3, #15
 8006fb0:	d916      	bls.n	8006fe0 <UART_SetConfig+0x3fc>
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb8:	d212      	bcs.n	8006fe0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f023 030f 	bic.w	r3, r3, #15
 8006fc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	8bfb      	ldrh	r3, [r7, #30]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	8bfa      	ldrh	r2, [r7, #30]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	e05b      	b.n	8007098 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fe6:	e057      	b.n	8007098 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d828      	bhi.n	8007042 <UART_SetConfig+0x45e>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <UART_SetConfig+0x414>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007043 	.word	0x08007043
 8007008:	08007033 	.word	0x08007033
 800700c:	08007043 	.word	0x08007043
 8007010:	08007043 	.word	0x08007043
 8007014:	08007043 	.word	0x08007043
 8007018:	0800703b 	.word	0x0800703b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd ffa4 	bl	8004f68 <HAL_RCC_GetPCLK1Freq>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007022:	e014      	b.n	800704e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007024:	f7fd ffb2 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800702a:	e010      	b.n	800704e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800702c:	4b26      	ldr	r3, [pc, #152]	@ (80070c8 <UART_SetConfig+0x4e4>)
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007030:	e00d      	b.n	800704e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007032:	f7fd fee5 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8007036:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007038:	e009      	b.n	800704e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007040:	e005      	b.n	800704e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800704c:	bf00      	nop
    }

    if (pclk != 0U)
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d021      	beq.n	8007098 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	4a1a      	ldr	r2, [pc, #104]	@ (80070c4 <UART_SetConfig+0x4e0>)
 800705a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705e:	461a      	mov	r2, r3
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	fbb3 f2f2 	udiv	r2, r3, r2
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	441a      	add	r2, r3
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	fbb2 f3f3 	udiv	r3, r2, r3
 8007076:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d909      	bls.n	8007092 <UART_SetConfig+0x4ae>
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007084:	d205      	bcs.n	8007092 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	b29a      	uxth	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60da      	str	r2, [r3, #12]
 8007090:	e002      	b.n	8007098 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2201      	movs	r2, #1
 800709c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2200      	movs	r2, #0
 80070ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2200      	movs	r2, #0
 80070b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3730      	adds	r7, #48	@ 0x30
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c2:	bf00      	nop
 80070c4:	0800e350 	.word	0x0800e350
 80070c8:	00f42400 	.word	0x00f42400

080070cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01a      	beq.n	80071e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ca:	d10a      	bne.n	80071e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
  }
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	bc80      	pop	{r7}
 800720c:	4770      	bx	lr

0800720e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af02      	add	r7, sp, #8
 8007214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800721e:	f7fa fbcf 	bl	80019c0 <HAL_GetTick>
 8007222:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b08      	cmp	r3, #8
 8007230:	d10e      	bne.n	8007250 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f832 	bl	80072aa <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e028      	b.n	80072a2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b04      	cmp	r3, #4
 800725c:	d10e      	bne.n	800727c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f81c 	bl	80072aa <UART_WaitOnFlagUntilTimeout>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e012      	b.n	80072a2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b09c      	sub	sp, #112	@ 0x70
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	4613      	mov	r3, r2
 80072b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	e0af      	b.n	800741c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c2:	f000 80ab 	beq.w	800741c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fa fb7b 	bl	80019c0 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <UART_WaitOnFlagUntilTimeout+0x32>
 80072d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d140      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ec:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80072f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007300:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e6      	bne.n	80072dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	663b      	str	r3, [r7, #96]	@ 0x60
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800732e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007330:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800733c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e06f      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d057      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x172>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d054      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x172>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b40      	cmp	r3, #64	@ 0x40
 8007376:	d051      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007386:	d149      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007390:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80073a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	613b      	str	r3, [r7, #16]
   return(result);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80073e4:	623a      	str	r2, [r7, #32]
 80073e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e5      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e010      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69da      	ldr	r2, [r3, #28]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4013      	ands	r3, r2
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	429a      	cmp	r2, r3
 800742a:	bf0c      	ite	eq
 800742c:	2301      	moveq	r3, #1
 800742e:	2300      	movne	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	429a      	cmp	r2, r3
 8007438:	f43f af40 	beq.w	80072bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3770      	adds	r7, #112	@ 0x70
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007448:	b480      	push	{r7}
 800744a:	b0a3      	sub	sp, #140	@ 0x8c
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	88fa      	ldrh	r2, [r7, #6]
 8007468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747a:	d10e      	bne.n	800749a <UART_Start_Receive_IT+0x52>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <UART_Start_Receive_IT+0x48>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800748a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800748e:	e02d      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	22ff      	movs	r2, #255	@ 0xff
 8007494:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007498:	e028      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <UART_Start_Receive_IT+0x76>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <UART_Start_Receive_IT+0x6c>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	22ff      	movs	r2, #255	@ 0xff
 80074ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074b2:	e01b      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	227f      	movs	r2, #127	@ 0x7f
 80074b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074bc:	e016      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c6:	d10d      	bne.n	80074e4 <UART_Start_Receive_IT+0x9c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <UART_Start_Receive_IT+0x92>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	227f      	movs	r2, #127	@ 0x7f
 80074d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074d8:	e008      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	223f      	movs	r2, #63	@ 0x3f
 80074de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80074e2:	e003      	b.n	80074ec <UART_Start_Receive_IT+0xa4>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2222      	movs	r2, #34	@ 0x22
 80074f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3308      	adds	r3, #8
 8007502:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800750c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007520:	673a      	str	r2, [r7, #112]	@ 0x70
 8007522:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007526:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800752e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e3      	bne.n	80074fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753c:	d14f      	bne.n	80075de <UART_Start_Receive_IT+0x196>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007544:	88fa      	ldrh	r2, [r7, #6]
 8007546:	429a      	cmp	r2, r3
 8007548:	d349      	bcc.n	80075de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007552:	d107      	bne.n	8007564 <UART_Start_Receive_IT+0x11c>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a46      	ldr	r2, [pc, #280]	@ (8007678 <UART_Start_Receive_IT+0x230>)
 8007560:	675a      	str	r2, [r3, #116]	@ 0x74
 8007562:	e002      	b.n	800756a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a45      	ldr	r2, [pc, #276]	@ (800767c <UART_Start_Receive_IT+0x234>)
 8007568:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01a      	beq.n	80075a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007586:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007596:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800759a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80075a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3308      	adds	r3, #8
 80075c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80075c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80075ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e5      	bne.n	80075a8 <UART_Start_Receive_IT+0x160>
 80075dc:	e046      	b.n	800766c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e6:	d107      	bne.n	80075f8 <UART_Start_Receive_IT+0x1b0>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a23      	ldr	r2, [pc, #140]	@ (8007680 <UART_Start_Receive_IT+0x238>)
 80075f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80075f6:	e002      	b.n	80075fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a22      	ldr	r2, [pc, #136]	@ (8007684 <UART_Start_Receive_IT+0x23c>)
 80075fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d019      	beq.n	800763a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800761a:	677b      	str	r3, [r7, #116]	@ 0x74
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
 8007626:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800762a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_Start_Receive_IT+0x1be>
 8007638:	e018      	b.n	800766c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	613b      	str	r3, [r7, #16]
   return(result);
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f043 0320 	orr.w	r3, r3, #32
 800764e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007658:	623b      	str	r3, [r7, #32]
 800765a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69f9      	ldr	r1, [r7, #28]
 800765e:	6a3a      	ldr	r2, [r7, #32]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	61bb      	str	r3, [r7, #24]
   return(result);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	378c      	adds	r7, #140	@ 0x8c
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr
 8007678:	08007ec9 	.word	0x08007ec9
 800767c:	08007b5d 	.word	0x08007b5d
 8007680:	0800799d 	.word	0x0800799d
 8007684:	080077dd 	.word	0x080077dd

08007688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b095      	sub	sp, #84	@ 0x54
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80076b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e3      	bne.n	80076c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d118      	bne.n	8007734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f023 0310 	bic.w	r3, r3, #16
 8007716:	647b      	str	r3, [r7, #68]	@ 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6979      	ldr	r1, [r7, #20]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	613b      	str	r3, [r7, #16]
   return(result);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007748:	bf00      	nop
 800774a:	3754      	adds	r7, #84	@ 0x54
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b088      	sub	sp, #32
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60bb      	str	r3, [r7, #8]
   return(result);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	613b      	str	r3, [r7, #16]
   return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d4:	bf00      	nop
 80077d6:	3720      	adds	r7, #32
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b09c      	sub	sp, #112	@ 0x70
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077f4:	2b22      	cmp	r3, #34	@ 0x22
 80077f6:	f040 80c2 	bne.w	800797e <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007808:	b2d9      	uxtb	r1, r3
 800780a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800780e:	b2da      	uxtb	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007814:	400a      	ands	r2, r1
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 80a5 	bne.w	800798e <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007862:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007864:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007868:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e6      	bne.n	8007844 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	667b      	str	r3, [r7, #100]	@ 0x64
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3308      	adds	r3, #8
 8007894:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007896:	647a      	str	r2, [r7, #68]	@ 0x44
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800789c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a35      	ldr	r2, [pc, #212]	@ (8007998 <UART_RxISR_8BIT+0x1bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d01f      	beq.n	8007908 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d018      	beq.n	8007908 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	623b      	str	r3, [r7, #32]
   return(result);
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e6      	bne.n	80078d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d130      	bne.n	8007972 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	60fb      	str	r3, [r7, #12]
   return(result);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0310 	bic.w	r3, r3, #16
 800792a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007934:	61fb      	str	r3, [r7, #28]
 8007936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	69b9      	ldr	r1, [r7, #24]
 800793a:	69fa      	ldr	r2, [r7, #28]
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	617b      	str	r3, [r7, #20]
   return(result);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e6      	bne.n	8007916 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b10      	cmp	r3, #16
 8007954:	d103      	bne.n	800795e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2210      	movs	r2, #16
 800795c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800796a:	4611      	mov	r1, r2
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007970:	e00d      	b.n	800798e <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	4798      	blx	r3
}
 800797c:	e007      	b.n	800798e <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0208 	orr.w	r2, r2, #8
 800798c:	619a      	str	r2, [r3, #24]
}
 800798e:	bf00      	nop
 8007990:	3770      	adds	r7, #112	@ 0x70
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40008000 	.word	0x40008000

0800799c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b09c      	sub	sp, #112	@ 0x70
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b4:	2b22      	cmp	r3, #34	@ 0x22
 80079b6:	f040 80c2 	bne.w	8007b3e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80079ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80079ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80079d2:	4013      	ands	r3, r2
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	1c9a      	adds	r2, r3, #2
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f040 80a5 	bne.w	8007b4e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e6      	bne.n	8007a04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a56:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e5      	bne.n	8007a36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a35      	ldr	r2, [pc, #212]	@ (8007b58 <UART_RxISR_16BIT+0x1bc>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d01f      	beq.n	8007ac8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d018      	beq.n	8007ac8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d130      	bne.n	8007b32 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0310 	bic.w	r3, r3, #16
 8007aea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6979      	ldr	r1, [r7, #20]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d103      	bne.n	8007b1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b30:	e00d      	b.n	8007b4e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
}
 8007b3c:	e007      	b.n	8007b4e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0208 	orr.w	r2, r2, #8
 8007b4c:	619a      	str	r2, [r3, #24]
}
 8007b4e:	bf00      	nop
 8007b50:	3770      	adds	r7, #112	@ 0x70
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	40008000 	.word	0x40008000

08007b5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b92:	2b22      	cmp	r3, #34	@ 0x22
 8007b94:	f040 8188 	bne.w	8007ea8 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ba2:	e12b      	b.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007baa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007bb2:	b2d9      	uxtb	r1, r3
 8007bb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	b2d2      	uxtb	r2, r2
 8007bc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d055      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d011      	beq.n	8007c26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2201      	movs	r2, #1
 8007c14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c1c:	f043 0201 	orr.w	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d011      	beq.n	8007c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2202      	movs	r2, #2
 8007c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4c:	f043 0204 	orr.w	r2, r3, #4
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d011      	beq.n	8007c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00b      	beq.n	8007c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2204      	movs	r2, #4
 8007c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c7c:	f043 0202 	orr.w	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d008      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 80a6 	bne.w	8007dfc <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cd4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007cd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e4      	bne.n	8007cb0 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3308      	adds	r3, #8
 8007cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d0e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007d10:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007d14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e1      	bne.n	8007ce6 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a61      	ldr	r2, [pc, #388]	@ (8007ec0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d021      	beq.n	8007d84 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01a      	beq.n	8007d84 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d72:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e4      	bne.n	8007d4e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d132      	bne.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	f023 0310 	bic.w	r3, r3, #16
 8007da6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007db6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e4      	bne.n	8007d92 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d103      	bne.n	8007dde <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2210      	movs	r2, #16
 8007ddc:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8007dea:	4611      	mov	r1, r2
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
 8007df0:	e004      	b.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0x2a0>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dfc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d006      	beq.n	8007e12 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8007e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f47f aec9 	bne.w	8007ba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d049      	beq.n	8007eb8 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d242      	bcs.n	8007eb8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e3      	bne.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a15      	ldr	r2, [pc, #84]	@ (8007ec4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007e6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f043 0320 	orr.w	r3, r3, #32
 8007e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e92:	61bb      	str	r3, [r7, #24]
 8007e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6979      	ldr	r1, [r7, #20]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e4      	bne.n	8007e70 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ea6:	e007      	b.n	8007eb8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0208 	orr.w	r2, r2, #8
 8007eb6:	619a      	str	r2, [r3, #24]
}
 8007eb8:	bf00      	nop
 8007eba:	37b0      	adds	r7, #176	@ 0xb0
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	40008000 	.word	0x40008000
 8007ec4:	080077dd 	.word	0x080077dd

08007ec8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b0ae      	sub	sp, #184	@ 0xb8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ed6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007efe:	2b22      	cmp	r3, #34	@ 0x22
 8007f00:	f040 818c 	bne.w	800821c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f0e:	e12f      	b.n	8008170 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007f26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f38:	1c9a      	adds	r2, r3, #2
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d055      	beq.n	8008012 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8c:	f043 0201 	orr.w	r2, r3, #1
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fbc:	f043 0204 	orr.w	r2, r3, #4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d011      	beq.n	8007ff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fec:	f043 0202 	orr.w	r2, r3, #2
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 80a8 	bne.w	8008170 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800802e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008046:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800804a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e2      	bne.n	8008020 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800806a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800806c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008070:	f023 0301 	bic.w	r3, r3, #1
 8008074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e1      	bne.n	800805a <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a61      	ldr	r2, [pc, #388]	@ (8008234 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d021      	beq.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d01a      	beq.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d132      	bne.n	8008166 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008116:	f023 0310 	bic.w	r3, r3, #16
 800811a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008128:	647b      	str	r3, [r7, #68]	@ 0x44
 800812a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800812e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e4      	bne.n	8008106 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b10      	cmp	r3, #16
 8008148:	d103      	bne.n	8008152 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2210      	movs	r2, #16
 8008150:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800815e:	4611      	mov	r1, r2
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
 8008164:	e004      	b.n	8008170 <UART_RxISR_16BIT_FIFOEN+0x2a8>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008170:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <UART_RxISR_16BIT_FIFOEN+0x2be>
 8008178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	f47f aec5 	bne.w	8007f10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800818c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008190:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008194:	2b00      	cmp	r3, #0
 8008196:	d049      	beq.n	800822c <UART_RxISR_16BIT_FIFOEN+0x364>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800819e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d242      	bcs.n	800822c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	623b      	str	r3, [r7, #32]
   return(result);
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80081ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e3      	bne.n	80081a6 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a15      	ldr	r2, [pc, #84]	@ (8008238 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80081e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f043 0320 	orr.w	r3, r3, #32
 80081f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	617b      	str	r3, [r7, #20]
   return(result);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e4      	bne.n	80081e4 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800821a:	e007      	b.n	800822c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0208 	orr.w	r2, r2, #8
 800822a:	619a      	str	r2, [r3, #24]
}
 800822c:	bf00      	nop
 800822e:	37b8      	adds	r7, #184	@ 0xb8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40008000 	.word	0x40008000
 8008238:	0800799d 	.word	0x0800799d

0800823c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr

0800824e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr

08008272 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_UARTEx_DisableFifoMode+0x16>
 8008284:	2302      	movs	r3, #2
 8008286:	e027      	b.n	80082d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2224      	movs	r2, #36	@ 0x24
 8008294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80082b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e02d      	b.n	8008356 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2224      	movs	r2, #36	@ 0x24
 8008306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f850 	bl	80083dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008372:	2302      	movs	r3, #2
 8008374:	e02d      	b.n	80083d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2224      	movs	r2, #36	@ 0x24
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f812 	bl	80083dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d108      	bne.n	80083fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083fc:	e031      	b.n	8008462 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083fe:	2308      	movs	r3, #8
 8008400:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008402:	2308      	movs	r3, #8
 8008404:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	0e5b      	lsrs	r3, r3, #25
 800840e:	b2db      	uxtb	r3, r3
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	0f5b      	lsrs	r3, r3, #29
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	7b3a      	ldrb	r2, [r7, #12]
 800842a:	4910      	ldr	r1, [pc, #64]	@ (800846c <UARTEx_SetNbDataToProcess+0x90>)
 800842c:	5c8a      	ldrb	r2, [r1, r2]
 800842e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008432:	7b3a      	ldrb	r2, [r7, #12]
 8008434:	490e      	ldr	r1, [pc, #56]	@ (8008470 <UARTEx_SetNbDataToProcess+0x94>)
 8008436:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008438:	fb93 f3f2 	sdiv	r3, r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	7b7a      	ldrb	r2, [r7, #13]
 8008448:	4908      	ldr	r1, [pc, #32]	@ (800846c <UARTEx_SetNbDataToProcess+0x90>)
 800844a:	5c8a      	ldrb	r2, [r1, r2]
 800844c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008450:	7b7a      	ldrb	r2, [r7, #13]
 8008452:	4907      	ldr	r1, [pc, #28]	@ (8008470 <UARTEx_SetNbDataToProcess+0x94>)
 8008454:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008456:	fb93 f3f2 	sdiv	r3, r3, r2
 800845a:	b29a      	uxth	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008462:	bf00      	nop
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	0800e368 	.word	0x0800e368
 8008470:	0800e370 	.word	0x0800e370

08008474 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af02      	add	r7, sp, #8
 800847a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800847c:	4a24      	ldr	r2, [pc, #144]	@ (8008510 <RadioInit+0x9c>)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8008482:	4b24      	ldr	r3, [pc, #144]	@ (8008514 <RadioInit+0xa0>)
 8008484:	2200      	movs	r2, #0
 8008486:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8008488:	4b22      	ldr	r3, [pc, #136]	@ (8008514 <RadioInit+0xa0>)
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800848e:	4b21      	ldr	r3, [pc, #132]	@ (8008514 <RadioInit+0xa0>)
 8008490:	2200      	movs	r2, #0
 8008492:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008494:	4b1f      	ldr	r3, [pc, #124]	@ (8008514 <RadioInit+0xa0>)
 8008496:	2200      	movs	r2, #0
 8008498:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800849a:	481f      	ldr	r0, [pc, #124]	@ (8008518 <RadioInit+0xa4>)
 800849c:	f001 ff8c 	bl	800a3b8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80084a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <RadioInit+0xa0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80084a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008514 <RadioInit+0xa0>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80084ac:	f002 fa22 	bl	800a8f4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80084b0:	2100      	movs	r1, #0
 80084b2:	2000      	movs	r0, #0
 80084b4:	f002 fdee 	bl	800b094 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80084b8:	2204      	movs	r2, #4
 80084ba:	2100      	movs	r1, #0
 80084bc:	2001      	movs	r0, #1
 80084be:	f002 fbb1 	bl	800ac24 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80084c2:	2300      	movs	r3, #0
 80084c4:	2200      	movs	r2, #0
 80084c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80084ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80084ce:	f002 fae1 	bl	800aa94 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80084d2:	f000 fe91 	bl	80091f8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80084d6:	2300      	movs	r3, #0
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4b10      	ldr	r3, [pc, #64]	@ (800851c <RadioInit+0xa8>)
 80084dc:	2200      	movs	r2, #0
 80084de:	f04f 31ff 	mov.w	r1, #4294967295
 80084e2:	480f      	ldr	r0, [pc, #60]	@ (8008520 <RadioInit+0xac>)
 80084e4:	f004 f848 	bl	800c578 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <RadioInit+0xb0>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	f04f 31ff 	mov.w	r1, #4294967295
 80084f4:	480c      	ldr	r0, [pc, #48]	@ (8008528 <RadioInit+0xb4>)
 80084f6:	f004 f83f 	bl	800c578 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80084fa:	4809      	ldr	r0, [pc, #36]	@ (8008520 <RadioInit+0xac>)
 80084fc:	f004 f8e0 	bl	800c6c0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008500:	4809      	ldr	r0, [pc, #36]	@ (8008528 <RadioInit+0xb4>)
 8008502:	f004 f8dd 	bl	800c6c0 <UTIL_TIMER_Stop>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000418 	.word	0x20000418
 8008514:	2000041c 	.word	0x2000041c
 8008518:	080095ed 	.word	0x080095ed
 800851c:	08009575 	.word	0x08009575
 8008520:	20000478 	.word	0x20000478
 8008524:	08009589 	.word	0x08009589
 8008528:	20000490 	.word	0x20000490

0800852c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8008530:	f001 ff8a 	bl	800a448 <SUBGRF_GetOperatingMode>
 8008534:	4603      	mov	r3, r0
 8008536:	2b07      	cmp	r3, #7
 8008538:	d00a      	beq.n	8008550 <RadioGetStatus+0x24>
 800853a:	2b07      	cmp	r3, #7
 800853c:	dc0a      	bgt.n	8008554 <RadioGetStatus+0x28>
 800853e:	2b04      	cmp	r3, #4
 8008540:	d002      	beq.n	8008548 <RadioGetStatus+0x1c>
 8008542:	2b05      	cmp	r3, #5
 8008544:	d002      	beq.n	800854c <RadioGetStatus+0x20>
 8008546:	e005      	b.n	8008554 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008548:	2302      	movs	r3, #2
 800854a:	e004      	b.n	8008556 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800854c:	2301      	movs	r3, #1
 800854e:	e002      	b.n	8008556 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8008550:	2303      	movs	r3, #3
 8008552:	e000      	b.n	8008556 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008554:	2300      	movs	r3, #0
    }
}
 8008556:	4618      	mov	r0, r3
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008566:	4a2a      	ldr	r2, [pc, #168]	@ (8008610 <RadioSetModem+0xb4>)
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	4618      	mov	r0, r3
 8008570:	f003 f97d 	bl	800b86e <RFW_SetRadioModem>
    switch( modem )
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b05      	cmp	r3, #5
 8008578:	d80e      	bhi.n	8008598 <RadioSetModem+0x3c>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <RadioSetModem+0x24>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085a7 	.word	0x080085a7
 8008584:	080085b5 	.word	0x080085b5
 8008588:	08008599 	.word	0x08008599
 800858c:	080085db 	.word	0x080085db
 8008590:	080085e9 	.word	0x080085e9
 8008594:	080085f7 	.word	0x080085f7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008598:	2003      	movs	r0, #3
 800859a:	f002 fb1d 	bl	800abd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800859e:	4b1c      	ldr	r3, [pc, #112]	@ (8008610 <RadioSetModem+0xb4>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	735a      	strb	r2, [r3, #13]
        break;
 80085a4:	e02f      	b.n	8008606 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80085a6:	2000      	movs	r0, #0
 80085a8:	f002 fb16 	bl	800abd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085ac:	4b18      	ldr	r3, [pc, #96]	@ (8008610 <RadioSetModem+0xb4>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	735a      	strb	r2, [r3, #13]
        break;
 80085b2:	e028      	b.n	8008606 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80085b4:	2001      	movs	r0, #1
 80085b6:	f002 fb0f 	bl	800abd8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80085ba:	4b15      	ldr	r3, [pc, #84]	@ (8008610 <RadioSetModem+0xb4>)
 80085bc:	7b5a      	ldrb	r2, [r3, #13]
 80085be:	4b14      	ldr	r3, [pc, #80]	@ (8008610 <RadioSetModem+0xb4>)
 80085c0:	7b1b      	ldrb	r3, [r3, #12]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d01e      	beq.n	8008604 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80085c6:	4b12      	ldr	r3, [pc, #72]	@ (8008610 <RadioSetModem+0xb4>)
 80085c8:	7b1a      	ldrb	r2, [r3, #12]
 80085ca:	4b11      	ldr	r3, [pc, #68]	@ (8008610 <RadioSetModem+0xb4>)
 80085cc:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80085ce:	4b10      	ldr	r3, [pc, #64]	@ (8008610 <RadioSetModem+0xb4>)
 80085d0:	7b5b      	ldrb	r3, [r3, #13]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 ff98 	bl	8009508 <RadioSetPublicNetwork>
        }
        break;
 80085d8:	e014      	b.n	8008604 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80085da:	2002      	movs	r0, #2
 80085dc:	f002 fafc 	bl	800abd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008610 <RadioSetModem+0xb4>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	735a      	strb	r2, [r3, #13]
        break;
 80085e6:	e00e      	b.n	8008606 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80085e8:	2002      	movs	r0, #2
 80085ea:	f002 faf5 	bl	800abd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <RadioSetModem+0xb4>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	735a      	strb	r2, [r3, #13]
        break;
 80085f4:	e007      	b.n	8008606 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80085f6:	2000      	movs	r0, #0
 80085f8:	f002 faee 	bl	800abd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80085fc:	4b04      	ldr	r3, [pc, #16]	@ (8008610 <RadioSetModem+0xb4>)
 80085fe:	2200      	movs	r2, #0
 8008600:	735a      	strb	r2, [r3, #13]
        break;
 8008602:	e000      	b.n	8008606 <RadioSetModem+0xaa>
        break;
 8008604:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2000041c 	.word	0x2000041c

08008614 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fa95 	bl	800ab4c <SUBGRF_SetRfFrequency>
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b090      	sub	sp, #64	@ 0x40
 800862e:	af0a      	add	r7, sp, #40	@ 0x28
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008646:	f000 fdea 	bl	800921e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800864a:	2000      	movs	r0, #0
 800864c:	f7ff ff86 	bl	800855c <RadioSetModem>

    RadioSetChannel( freq );
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff ffdf 	bl	8008614 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008656:	2301      	movs	r3, #1
 8008658:	9309      	str	r3, [sp, #36]	@ 0x24
 800865a:	2300      	movs	r3, #0
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	2300      	movs	r3, #0
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	2300      	movs	r3, #0
 8008664:	9306      	str	r3, [sp, #24]
 8008666:	2300      	movs	r3, #0
 8008668:	9305      	str	r3, [sp, #20]
 800866a:	2300      	movs	r3, #0
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	2300      	movs	r3, #0
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	2300      	movs	r3, #0
 8008674:	9302      	str	r3, [sp, #8]
 8008676:	2303      	movs	r3, #3
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	2000      	movs	r0, #0
 8008688:	f000 f83c 	bl	8008704 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800868c:	2000      	movs	r0, #0
 800868e:	f000 fdcd 	bl	800922c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008692:	f000 ff67 	bl	8009564 <RadioGetWakeupTime>
 8008696:	4603      	mov	r3, r0
 8008698:	4618      	mov	r0, r3
 800869a:	f7f9 f9ab 	bl	80019f4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800869e:	f004 f8a9 	bl	800c7f4 <UTIL_TIMER_GetCurrentTime>
 80086a2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80086a4:	e00d      	b.n	80086c2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80086a6:	2000      	movs	r0, #0
 80086a8:	f000 feae 	bl	8009408 <RadioRssi>
 80086ac:	4603      	mov	r3, r0
 80086ae:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80086b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80086b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	dd02      	ble.n	80086c2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80086bc:	2300      	movs	r3, #0
 80086be:	75fb      	strb	r3, [r7, #23]
            break;
 80086c0:	e006      	b.n	80086d0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80086c2:	6938      	ldr	r0, [r7, #16]
 80086c4:	f004 f8a8 	bl	800c818 <UTIL_TIMER_GetElapsedTime>
 80086c8:	4602      	mov	r2, r0
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d8ea      	bhi.n	80086a6 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80086d0:	f000 fda5 	bl	800921e <RadioStandby>

    return status;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	2100      	movs	r1, #0
 80086ee:	2000      	movs	r0, #0
 80086f0:	f002 f9d0 	bl	800aa94 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80086f4:	f001 ff79 	bl	800a5ea <SUBGRF_GetRandom>
 80086f8:	6078      	str	r0, [r7, #4]

    return rnd;
 80086fa:	687b      	ldr	r3, [r7, #4]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	@ 0x28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	461a      	mov	r2, r3
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	4613      	mov	r3, r2
 8008716:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008718:	4ab9      	ldr	r2, [pc, #740]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 800871a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800871e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008720:	f003 f863 	bl	800b7ea <RFW_DeInit>
    if( rxContinuous == true )
 8008724:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8008730:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008738:	4ab2      	ldr	r2, [pc, #712]	@ (8008a04 <RadioSetRxConfig+0x300>)
 800873a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800873e:	7013      	strb	r3, [r2, #0]
 8008740:	e002      	b.n	8008748 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008742:	4bb0      	ldr	r3, [pc, #704]	@ (8008a04 <RadioSetRxConfig+0x300>)
 8008744:	22ff      	movs	r2, #255	@ 0xff
 8008746:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b05      	cmp	r3, #5
 800874c:	d009      	beq.n	8008762 <RadioSetRxConfig+0x5e>
 800874e:	2b05      	cmp	r3, #5
 8008750:	f300 81d7 	bgt.w	8008b02 <RadioSetRxConfig+0x3fe>
 8008754:	2b00      	cmp	r3, #0
 8008756:	f000 80bf 	beq.w	80088d8 <RadioSetRxConfig+0x1d4>
 800875a:	2b01      	cmp	r3, #1
 800875c:	f000 8124 	beq.w	80089a8 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8008760:	e1cf      	b.n	8008b02 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8008762:	2001      	movs	r0, #1
 8008764:	f002 f888 	bl	800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008768:	4ba5      	ldr	r3, [pc, #660]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008770:	4aa3      	ldr	r2, [pc, #652]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008776:	4ba2      	ldr	r3, [pc, #648]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008778:	2209      	movs	r2, #9
 800877a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800877e:	4ba0      	ldr	r3, [pc, #640]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008780:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8008784:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008786:	68b8      	ldr	r0, [r7, #8]
 8008788:	f002 ff62 	bl	800b650 <SUBGRF_GetFskBandwidthRegValue>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	4b9b      	ldr	r3, [pc, #620]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008796:	4b9a      	ldr	r3, [pc, #616]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008798:	2200      	movs	r2, #0
 800879a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800879c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	4b97      	ldr	r3, [pc, #604]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087a4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80087a6:	4b96      	ldr	r3, [pc, #600]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80087ac:	4b94      	ldr	r3, [pc, #592]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087ae:	2210      	movs	r2, #16
 80087b0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80087b2:	4b93      	ldr	r3, [pc, #588]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80087b8:	4b91      	ldr	r3, [pc, #580]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80087be:	4b91      	ldr	r3, [pc, #580]	@ (8008a04 <RadioSetRxConfig+0x300>)
 80087c0:	781a      	ldrb	r2, [r3, #0]
 80087c2:	4b8f      	ldr	r3, [pc, #572]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087c4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80087c6:	4b8e      	ldr	r3, [pc, #568]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80087cc:	4b8c      	ldr	r3, [pc, #560]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80087d2:	2005      	movs	r0, #5
 80087d4:	f7ff fec2 	bl	800855c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087d8:	488b      	ldr	r0, [pc, #556]	@ (8008a08 <RadioSetRxConfig+0x304>)
 80087da:	f002 faf1 	bl	800adc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087de:	488b      	ldr	r0, [pc, #556]	@ (8008a0c <RadioSetRxConfig+0x308>)
 80087e0:	f002 fbbc 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80087e4:	4a8a      	ldr	r2, [pc, #552]	@ (8008a10 <RadioSetRxConfig+0x30c>)
 80087e6:	f107 031c 	add.w	r3, r7, #28
 80087ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80087f2:	f107 031c 	add.w	r3, r7, #28
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fe75 	bl	800a4e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80087fc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008800:	f001 fec0 	bl	800a584 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008804:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008808:	f000 fe1c 	bl	8009444 <RadioRead>
 800880c:	4603      	mov	r3, r0
 800880e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800881e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008822:	4619      	mov	r1, r3
 8008824:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8008828:	f000 fdfa 	bl	8009420 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800882c:	2104      	movs	r1, #4
 800882e:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8008832:	f000 fdf5 	bl	8009420 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008836:	f640 009b 	movw	r0, #2203	@ 0x89b
 800883a:	f000 fe03 	bl	8009444 <RadioRead>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008848:	f023 031c 	bic.w	r3, r3, #28
 800884c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8008850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008854:	f043 0308 	orr.w	r3, r3, #8
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4619      	mov	r1, r3
 800885c:	f640 009b 	movw	r0, #2203	@ 0x89b
 8008860:	f000 fdde 	bl	8009420 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008864:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8008868:	f000 fdec 	bl	8009444 <RadioRead>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008876:	f023 0318 	bic.w	r3, r3, #24
 800887a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800887e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008882:	f043 0318 	orr.w	r3, r3, #24
 8008886:	b2db      	uxtb	r3, r3
 8008888:	4619      	mov	r1, r3
 800888a:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800888e:	f000 fdc7 	bl	8009420 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008892:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008896:	f000 fdd5 	bl	8009444 <RadioRead>
 800889a:	4603      	mov	r3, r0
 800889c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80088a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80088ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088b0:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80088bc:	f000 fdb0 	bl	8009420 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80088c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80088c2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d2:	4a4b      	ldr	r2, [pc, #300]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80088d4:	6093      	str	r3, [r2, #8]
            break;
 80088d6:	e115      	b.n	8008b04 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80088d8:	2000      	movs	r0, #0
 80088da:	f001 ffcd 	bl	800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80088de:	4b48      	ldr	r3, [pc, #288]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80088e6:	4a46      	ldr	r2, [pc, #280]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80088ec:	4b44      	ldr	r3, [pc, #272]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80088ee:	220b      	movs	r2, #11
 80088f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80088f4:	68b8      	ldr	r0, [r7, #8]
 80088f6:	f002 feab 	bl	800b650 <SUBGRF_GetFskBandwidthRegValue>
 80088fa:	4603      	mov	r3, r0
 80088fc:	461a      	mov	r2, r3
 80088fe:	4b40      	ldr	r3, [pc, #256]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008904:	4b3e      	ldr	r3, [pc, #248]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008906:	2200      	movs	r2, #0
 8008908:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800890a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	b29a      	uxth	r2, r3
 8008910:	4b3b      	ldr	r3, [pc, #236]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008912:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008914:	4b3a      	ldr	r3, [pc, #232]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008916:	2204      	movs	r2, #4
 8008918:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800891a:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 800891c:	2218      	movs	r2, #24
 800891e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008920:	4b37      	ldr	r3, [pc, #220]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008922:	2200      	movs	r2, #0
 8008924:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008926:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800892a:	f083 0301 	eor.w	r3, r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	4b33      	ldr	r3, [pc, #204]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008934:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008936:	4b33      	ldr	r3, [pc, #204]	@ (8008a04 <RadioSetRxConfig+0x300>)
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	4b31      	ldr	r3, [pc, #196]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 800893c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800893e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008946:	4b2e      	ldr	r3, [pc, #184]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008948:	22f2      	movs	r2, #242	@ 0xf2
 800894a:	75da      	strb	r2, [r3, #23]
 800894c:	e002      	b.n	8008954 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800894e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008950:	2201      	movs	r2, #1
 8008952:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008954:	4b2a      	ldr	r3, [pc, #168]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 8008956:	2201      	movs	r2, #1
 8008958:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800895a:	f000 fc60 	bl	800921e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800895e:	2000      	movs	r0, #0
 8008960:	f7ff fdfc 	bl	800855c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008964:	4828      	ldr	r0, [pc, #160]	@ (8008a08 <RadioSetRxConfig+0x304>)
 8008966:	f002 fa2b 	bl	800adc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800896a:	4828      	ldr	r0, [pc, #160]	@ (8008a0c <RadioSetRxConfig+0x308>)
 800896c:	f002 faf6 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008970:	4a28      	ldr	r2, [pc, #160]	@ (8008a14 <RadioSetRxConfig+0x310>)
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800897a:	e883 0003 	stmia.w	r3, {r0, r1}
 800897e:	f107 0314 	add.w	r3, r7, #20
 8008982:	4618      	mov	r0, r3
 8008984:	f001 fdaf 	bl	800a4e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008988:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800898c:	f001 fdfa 	bl	800a584 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008990:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008992:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008996:	fb02 f303 	mul.w	r3, r2, r3
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	4a17      	ldr	r2, [pc, #92]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089a4:	6093      	str	r3, [r2, #8]
            break;
 80089a6:	e0ad      	b.n	8008b04 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80089a8:	2000      	movs	r0, #0
 80089aa:	f001 ff65 	bl	800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80089ae:	4b14      	ldr	r3, [pc, #80]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4b11      	ldr	r3, [pc, #68]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80089c0:	4a15      	ldr	r2, [pc, #84]	@ (8008a18 <RadioSetRxConfig+0x314>)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4413      	add	r3, r2
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80089ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <RadioSetRxConfig+0x2e4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b0b      	cmp	r3, #11
 80089e0:	d008      	beq.n	80089f4 <RadioSetRxConfig+0x2f0>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b0c      	cmp	r3, #12
 80089e6:	d005      	beq.n	80089f4 <RadioSetRxConfig+0x2f0>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d116      	bne.n	8008a1c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b0c      	cmp	r3, #12
 80089f2:	d113      	bne.n	8008a1c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80089f4:	4b02      	ldr	r3, [pc, #8]	@ (8008a00 <RadioSetRxConfig+0x2fc>)
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80089fc:	e012      	b.n	8008a24 <RadioSetRxConfig+0x320>
 80089fe:	bf00      	nop
 8008a00:	2000041c 	.word	0x2000041c
 8008a04:	2000005d 	.word	0x2000005d
 8008a08:	20000454 	.word	0x20000454
 8008a0c:	2000042a 	.word	0x2000042a
 8008a10:	0800ddec 	.word	0x0800ddec
 8008a14:	0800ddf4 	.word	0x0800ddf4
 8008a18:	0800e404 	.word	0x0800e404
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008a24:	4b39      	ldr	r3, [pc, #228]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008a2a:	4b38      	ldr	r3, [pc, #224]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a30:	2b05      	cmp	r3, #5
 8008a32:	d004      	beq.n	8008a3e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008a34:	4b35      	ldr	r3, [pc, #212]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008a3a:	2b06      	cmp	r3, #6
 8008a3c:	d10a      	bne.n	8008a54 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008a3e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a40:	2b0b      	cmp	r3, #11
 8008a42:	d803      	bhi.n	8008a4c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008a44:	4b31      	ldr	r3, [pc, #196]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a46:	220c      	movs	r2, #12
 8008a48:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008a4a:	e006      	b.n	8008a5a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a4e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a50:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008a52:	e002      	b.n	8008a5a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008a54:	4a2d      	ldr	r2, [pc, #180]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008a58:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008a5a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a60:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008a62:	4b2b      	ldr	r3, [pc, #172]	@ (8008b10 <RadioSetRxConfig+0x40c>)
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	4b29      	ldr	r3, [pc, #164]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a68:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008a6a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8008a6e:	4b27      	ldr	r3, [pc, #156]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a70:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008a74:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008a78:	4b24      	ldr	r3, [pc, #144]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008a7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008a7e:	f000 fbce 	bl	800921e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008a82:	2001      	movs	r0, #1
 8008a84:	f7ff fd6a 	bl	800855c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a88:	4822      	ldr	r0, [pc, #136]	@ (8008b14 <RadioSetRxConfig+0x410>)
 8008a8a:	f002 f999 	bl	800adc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a8e:	4822      	ldr	r0, [pc, #136]	@ (8008b18 <RadioSetRxConfig+0x414>)
 8008a90:	f002 fa64 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008a94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fefc 	bl	800a896 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8008a9e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008aa2:	f002 fbc3 	bl	800b22c <SUBGRF_ReadRegister>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8008ab4:	f002 fb98 	bl	800b1e8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008ab8:	4b14      	ldr	r3, [pc, #80]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d10d      	bne.n	8008ade <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008ac2:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ac6:	f002 fbb1 	bl	800b22c <SUBGRF_ReadRegister>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f023 0304 	bic.w	r3, r3, #4
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ad8:	f002 fb86 	bl	800b1e8 <SUBGRF_WriteRegister>
 8008adc:	e00c      	b.n	8008af8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008ade:	f240 7036 	movw	r0, #1846	@ 0x736
 8008ae2:	f002 fba3 	bl	800b22c <SUBGRF_ReadRegister>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f043 0304 	orr.w	r3, r3, #4
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	4619      	mov	r1, r3
 8008af0:	f240 7036 	movw	r0, #1846	@ 0x736
 8008af4:	f002 fb78 	bl	800b1e8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008af8:	4b04      	ldr	r3, [pc, #16]	@ (8008b0c <RadioSetRxConfig+0x408>)
 8008afa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008afe:	609a      	str	r2, [r3, #8]
            break;
 8008b00:	e000      	b.n	8008b04 <RadioSetRxConfig+0x400>
            break;
 8008b02:	bf00      	nop
    }
}
 8008b04:	bf00      	nop
 8008b06:	3728      	adds	r7, #40	@ 0x28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	2000041c 	.word	0x2000041c
 8008b10:	2000005d 	.word	0x2000005d
 8008b14:	20000454 	.word	0x20000454
 8008b18:	2000042a 	.word	0x2000042a

08008b1c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60ba      	str	r2, [r7, #8]
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008b2e:	f002 fe5c 	bl	800b7ea <RFW_DeInit>
    switch( modem )
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	f000 80c7 	beq.w	8008cc8 <RadioSetTxConfig+0x1ac>
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	f300 80d6 	bgt.w	8008cec <RadioSetTxConfig+0x1d0>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <RadioSetTxConfig+0x2e>
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d059      	beq.n	8008bfc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008b48:	e0d0      	b.n	8008cec <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008b4a:	4b77      	ldr	r3, [pc, #476]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008b52:	4a75      	ldr	r2, [pc, #468]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008b58:	4b73      	ldr	r3, [pc, #460]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b5a:	220b      	movs	r2, #11
 8008b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f002 fd75 	bl	800b650 <SUBGRF_GetFskBandwidthRegValue>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8008b70:	4a6d      	ldr	r2, [pc, #436]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008b76:	4b6c      	ldr	r3, [pc, #432]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008b7c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	4b69      	ldr	r3, [pc, #420]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b84:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008b86:	4b68      	ldr	r3, [pc, #416]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b88:	2204      	movs	r2, #4
 8008b8a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008b8c:	4b66      	ldr	r3, [pc, #408]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b8e:	2218      	movs	r2, #24
 8008b90:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008b92:	4b65      	ldr	r3, [pc, #404]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008b98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b9c:	f083 0301 	eor.w	r3, r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	4b60      	ldr	r3, [pc, #384]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008ba6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008bb0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008bb2:	22f2      	movs	r2, #242	@ 0xf2
 8008bb4:	75da      	strb	r2, [r3, #23]
 8008bb6:	e002      	b.n	8008bbe <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008bb8:	4b5b      	ldr	r3, [pc, #364]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008bc4:	f000 fb2b 	bl	800921e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f7ff fcc7 	bl	800855c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008bce:	4857      	ldr	r0, [pc, #348]	@ (8008d2c <RadioSetTxConfig+0x210>)
 8008bd0:	f002 f8f6 	bl	800adc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bd4:	4856      	ldr	r0, [pc, #344]	@ (8008d30 <RadioSetTxConfig+0x214>)
 8008bd6:	f002 f9c1 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008bda:	4a56      	ldr	r2, [pc, #344]	@ (8008d34 <RadioSetTxConfig+0x218>)
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008be4:	e883 0003 	stmia.w	r3, {r0, r1}
 8008be8:	f107 0310 	add.w	r3, r7, #16
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 fc7a 	bl	800a4e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008bf2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8008bf6:	f001 fcc5 	bl	800a584 <SUBGRF_SetWhiteningSeed>
            break;
 8008bfa:	e078      	b.n	8008cee <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	4b47      	ldr	r3, [pc, #284]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8008d38 <RadioSetTxConfig+0x21c>)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	4b44      	ldr	r3, [pc, #272]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008c1c:	4a42      	ldr	r2, [pc, #264]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c22:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <RadioSetTxConfig+0x11c>
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b0b      	cmp	r3, #11
 8008c30:	d008      	beq.n	8008c44 <RadioSetTxConfig+0x128>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	2b0c      	cmp	r3, #12
 8008c36:	d005      	beq.n	8008c44 <RadioSetTxConfig+0x128>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	2b0c      	cmp	r3, #12
 8008c42:	d104      	bne.n	8008c4e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008c44:	4b38      	ldr	r3, [pc, #224]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008c4c:	e003      	b.n	8008c56 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008c4e:	4b36      	ldr	r3, [pc, #216]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008c56:	4b34      	ldr	r3, [pc, #208]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008c5c:	4b32      	ldr	r3, [pc, #200]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d004      	beq.n	8008c70 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008c66:	4b30      	ldr	r3, [pc, #192]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	d10a      	bne.n	8008c86 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8008c70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c72:	2b0b      	cmp	r3, #11
 8008c74:	d803      	bhi.n	8008c7e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008c76:	4b2c      	ldr	r3, [pc, #176]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c78:	220c      	movs	r2, #12
 8008c7a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008c7c:	e006      	b.n	8008c8c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c82:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008c84:	e002      	b.n	8008c8c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008c86:	4a28      	ldr	r2, [pc, #160]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008c8a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008c8c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8008c90:	4b25      	ldr	r3, [pc, #148]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c92:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008c94:	4b29      	ldr	r3, [pc, #164]	@ (8008d3c <RadioSetTxConfig+0x220>)
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	4b23      	ldr	r3, [pc, #140]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008c9a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008c9c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008ca0:	4b21      	ldr	r3, [pc, #132]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008ca2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008ca6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8008caa:	4b1f      	ldr	r3, [pc, #124]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008cac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8008cb0:	f000 fab5 	bl	800921e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	f7ff fc51 	bl	800855c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008cba:	481c      	ldr	r0, [pc, #112]	@ (8008d2c <RadioSetTxConfig+0x210>)
 8008cbc:	f002 f880 	bl	800adc0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cc0:	481b      	ldr	r0, [pc, #108]	@ (8008d30 <RadioSetTxConfig+0x214>)
 8008cc2:	f002 f94b 	bl	800af5c <SUBGRF_SetPacketParams>
            break;
 8008cc6:	e012      	b.n	8008cee <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008cc8:	2004      	movs	r0, #4
 8008cca:	f7ff fc47 	bl	800855c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008cce:	4b16      	ldr	r3, [pc, #88]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008cd6:	4a14      	ldr	r2, [pc, #80]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008cdc:	4b12      	ldr	r3, [pc, #72]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008cde:	2216      	movs	r2, #22
 8008ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008ce4:	4811      	ldr	r0, [pc, #68]	@ (8008d2c <RadioSetTxConfig+0x210>)
 8008ce6:	f002 f86b 	bl	800adc0 <SUBGRF_SetModulationParams>
            break;
 8008cea:	e000      	b.n	8008cee <RadioSetTxConfig+0x1d2>
            break;
 8008cec:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f002 fbae 	bl	800b454 <SUBGRF_SetRfTxPower>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008cfe:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008d02:	210e      	movs	r1, #14
 8008d04:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008d08:	f002 fa6e 	bl	800b1e8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008d0e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 fd7d 	bl	800b812 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008d18:	4a03      	ldr	r2, [pc, #12]	@ (8008d28 <RadioSetTxConfig+0x20c>)
 8008d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d1c:	6053      	str	r3, [r2, #4]
}
 8008d1e:	bf00      	nop
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	2000041c 	.word	0x2000041c
 8008d2c:	20000454 	.word	0x20000454
 8008d30:	2000042a 	.word	0x2000042a
 8008d34:	0800ddf4 	.word	0x0800ddf4
 8008d38:	0800e404 	.word	0x0800e404
 8008d3c:	2000005d 	.word	0x2000005d

08008d40 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
    return true;
 8008d48:	2301      	movs	r3, #1
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b0a      	cmp	r3, #10
 8008d66:	d83e      	bhi.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
 8008d68:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <RadioGetLoRaBandwidthInHz+0x1c>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	08008dad 	.word	0x08008dad
 8008d78:	08008dbd 	.word	0x08008dbd
 8008d7c:	08008dcd 	.word	0x08008dcd
 8008d80:	08008dd5 	.word	0x08008dd5
 8008d84:	08008ddb 	.word	0x08008ddb
 8008d88:	08008de1 	.word	0x08008de1
 8008d8c:	08008de7 	.word	0x08008de7
 8008d90:	08008da5 	.word	0x08008da5
 8008d94:	08008db5 	.word	0x08008db5
 8008d98:	08008dc5 	.word	0x08008dc5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008d9c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8008da0:	60fb      	str	r3, [r7, #12]
        break;
 8008da2:	e020      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008da4:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8008da8:	60fb      	str	r3, [r7, #12]
        break;
 8008daa:	e01c      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008dac:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8008db0:	60fb      	str	r3, [r7, #12]
        break;
 8008db2:	e018      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008db4:	f245 1361 	movw	r3, #20833	@ 0x5161
 8008db8:	60fb      	str	r3, [r7, #12]
        break;
 8008dba:	e014      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008dbc:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8008dc0:	60fb      	str	r3, [r7, #12]
        break;
 8008dc2:	e010      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008dc4:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8008dc8:	60fb      	str	r3, [r7, #12]
        break;
 8008dca:	e00c      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008dcc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008dd0:	60fb      	str	r3, [r7, #12]
        break;
 8008dd2:	e008      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008dd4:	4b07      	ldr	r3, [pc, #28]	@ (8008df4 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008dd6:	60fb      	str	r3, [r7, #12]
        break;
 8008dd8:	e005      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008dda:	4b07      	ldr	r3, [pc, #28]	@ (8008df8 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008ddc:	60fb      	str	r3, [r7, #12]
        break;
 8008dde:	e002      	b.n	8008de6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008de0:	4b06      	ldr	r3, [pc, #24]	@ (8008dfc <RadioGetLoRaBandwidthInHz+0xa8>)
 8008de2:	60fb      	str	r3, [r7, #12]
        break;
 8008de4:	bf00      	nop
    }

    return bandwidthInHz;
 8008de6:	68fb      	ldr	r3, [r7, #12]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	0001e848 	.word	0x0001e848
 8008df8:	0003d090 	.word	0x0003d090
 8008dfc:	0007a120 	.word	0x0007a120

08008e00 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	4608      	mov	r0, r1
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	70fb      	strb	r3, [r7, #3]
 8008e12:	460b      	mov	r3, r1
 8008e14:	803b      	strh	r3, [r7, #0]
 8008e16:	4613      	mov	r3, r2
 8008e18:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008e1a:	883b      	ldrh	r3, [r7, #0]
 8008e1c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e1e:	78ba      	ldrb	r2, [r7, #2]
 8008e20:	f082 0201 	eor.w	r2, r2, #1
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	d001      	beq.n	8008e2e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	e000      	b.n	8008e30 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008e2e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008e30:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e32:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008e36:	7c3b      	ldrb	r3, [r7, #16]
 8008e38:	7d39      	ldrb	r1, [r7, #20]
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	d001      	beq.n	8008e42 <RadioGetGfskTimeOnAirNumerator+0x42>
 8008e3e:	2102      	movs	r1, #2
 8008e40:	e000      	b.n	8008e44 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008e42:	2100      	movs	r1, #0
 8008e44:	440b      	add	r3, r1
 8008e46:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008e48:	4413      	add	r3, r2
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b08b      	sub	sp, #44	@ 0x2c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	460b      	mov	r3, r1
 8008e64:	71fb      	strb	r3, [r7, #7]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d002      	beq.n	8008e82 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b06      	cmp	r3, #6
 8008e80:	d104      	bne.n	8008e8c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008e82:	88bb      	ldrh	r3, [r7, #4]
 8008e84:	2b0b      	cmp	r3, #11
 8008e86:	d801      	bhi.n	8008e8c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008e88:	230c      	movs	r3, #12
 8008e8a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b0b      	cmp	r3, #11
 8008e96:	d008      	beq.n	8008eaa <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b0c      	cmp	r3, #12
 8008e9c:	d005      	beq.n	8008eaa <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d105      	bne.n	8008eb0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b0c      	cmp	r3, #12
 8008ea8:	d102      	bne.n	8008eb0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008eb0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8008eb4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008eb6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	d001      	beq.n	8008ec2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	e000      	b.n	8008ec4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008ec2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008ec4:	4413      	add	r3, r2
 8008ec6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008ecc:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008ece:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008ed2:	2a00      	cmp	r2, #0
 8008ed4:	d001      	beq.n	8008eda <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	e000      	b.n	8008edc <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008eda:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008edc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008ede:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b06      	cmp	r3, #6
 8008ee4:	d803      	bhi.n	8008eee <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	623b      	str	r3, [r7, #32]
 8008eec:	e00e      	b.n	8008f0c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d004      	beq.n	8008f06 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3b02      	subs	r3, #2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	623b      	str	r3, [r7, #32]
 8008f04:	e002      	b.n	8008f0c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da01      	bge.n	8008f16 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	1e5a      	subs	r2, r3, #1
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	fb03 f202 	mul.w	r2, r3, r2
 8008f2a:	88bb      	ldrh	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
    int32_t intermediate =
 8008f2e:	330c      	adds	r3, #12
 8008f30:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b06      	cmp	r3, #6
 8008f36:	d802      	bhi.n	8008f3e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	3302      	adds	r3, #2
 8008f3c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	3b02      	subs	r3, #2
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	372c      	adds	r7, #44	@ 0x2c
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bc80      	pop	{r7}
 8008f54:	4770      	bx	lr
	...

08008f58 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08a      	sub	sp, #40	@ 0x28
 8008f5c:	af04      	add	r7, sp, #16
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	461a      	mov	r2, r3
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <RadioTimeOnAir+0x28>
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d017      	beq.n	8008fae <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008f7e:	e035      	b.n	8008fec <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008f80:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8008f84:	8c3a      	ldrh	r2, [r7, #32]
 8008f86:	7bb9      	ldrb	r1, [r7, #14]
 8008f88:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	4603      	mov	r3, r0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff ff32 	bl	8008e00 <RadioGetGfskTimeOnAirNumerator>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	613b      	str	r3, [r7, #16]
        break;
 8008fac:	e01e      	b.n	8008fec <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008fae:	8c39      	ldrh	r1, [r7, #32]
 8008fb0:	7bba      	ldrb	r2, [r7, #14]
 8008fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fb6:	9302      	str	r3, [sp, #8]
 8008fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	68b8      	ldr	r0, [r7, #8]
 8008fca:	f7ff ff43 	bl	8008e54 <RadioGetLoRaTimeOnAirNumerator>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008fda:	4a0a      	ldr	r2, [pc, #40]	@ (8009004 <RadioTimeOnAir+0xac>)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff feb6 	bl	8008d54 <RadioGetLoRaBandwidthInHz>
 8008fe8:	6138      	str	r0, [r7, #16]
        break;
 8008fea:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0800e404 	.word	0x0800e404

08009008 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8009014:	2300      	movs	r3, #0
 8009016:	2200      	movs	r2, #0
 8009018:	f240 2101 	movw	r1, #513	@ 0x201
 800901c:	f240 2001 	movw	r0, #513	@ 0x201
 8009020:	f001 fd38 	bl	800aa94 <SUBGRF_SetDioIrqParams>
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );


    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009024:	4b70      	ldr	r3, [pc, #448]	@ (80091e8 <RadioSend+0x1e0>)
 8009026:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800902a:	2101      	movs	r1, #1
 800902c:	4618      	mov	r0, r3
 800902e:	f002 f9e9 	bl	800b404 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8009032:	4b6d      	ldr	r3, [pc, #436]	@ (80091e8 <RadioSend+0x1e0>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d112      	bne.n	8009060 <RadioSend+0x58>
 800903a:	4b6b      	ldr	r3, [pc, #428]	@ (80091e8 <RadioSend+0x1e0>)
 800903c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009040:	2b06      	cmp	r3, #6
 8009042:	d10d      	bne.n	8009060 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009044:	f640 0089 	movw	r0, #2185	@ 0x889
 8009048:	f002 f8f0 	bl	800b22c <SUBGRF_ReadRegister>
 800904c:	4603      	mov	r3, r0
 800904e:	f023 0304 	bic.w	r3, r3, #4
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4619      	mov	r1, r3
 8009056:	f640 0089 	movw	r0, #2185	@ 0x889
 800905a:	f002 f8c5 	bl	800b1e8 <SUBGRF_WriteRegister>
 800905e:	e00c      	b.n	800907a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009060:	f640 0089 	movw	r0, #2185	@ 0x889
 8009064:	f002 f8e2 	bl	800b22c <SUBGRF_ReadRegister>
 8009068:	4603      	mov	r3, r0
 800906a:	f043 0304 	orr.w	r3, r3, #4
 800906e:	b2db      	uxtb	r3, r3
 8009070:	4619      	mov	r1, r3
 8009072:	f640 0089 	movw	r0, #2185	@ 0x889
 8009076:	f002 f8b7 	bl	800b1e8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800907a:	4b5b      	ldr	r3, [pc, #364]	@ (80091e8 <RadioSend+0x1e0>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b04      	cmp	r3, #4
 8009080:	f200 80a2 	bhi.w	80091c8 <RadioSend+0x1c0>
 8009084:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <RadioSend+0x84>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090bb 	.word	0x080090bb
 8009090:	080090a1 	.word	0x080090a1
 8009094:	080090bb 	.word	0x080090bb
 8009098:	08009111 	.word	0x08009111
 800909c:	08009131 	.word	0x08009131
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80090a0:	4a51      	ldr	r2, [pc, #324]	@ (80091e8 <RadioSend+0x1e0>)
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090a6:	4851      	ldr	r0, [pc, #324]	@ (80091ec <RadioSend+0x1e4>)
 80090a8:	f001 ff58 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	2200      	movs	r2, #0
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 fa04 	bl	800a4c0 <SUBGRF_SendPayload>
            break;
 80090b8:	e087      	b.n	80091ca <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80090ba:	f002 fb9c 	bl	800b7f6 <RFW_Is_Init>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d118      	bne.n	80090f6 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80090c4:	f107 020d 	add.w	r2, r7, #13
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f002 fbaa 	bl	800b826 <RFW_TransmitInit>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10c      	bne.n	80090f2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80090d8:	7b7a      	ldrb	r2, [r7, #13]
 80090da:	4b43      	ldr	r3, [pc, #268]	@ (80091e8 <RadioSend+0x1e0>)
 80090dc:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090de:	4843      	ldr	r0, [pc, #268]	@ (80091ec <RadioSend+0x1e4>)
 80090e0:	f001 ff3c 	bl	800af5c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80090e4:	7b7b      	ldrb	r3, [r7, #13]
 80090e6:	2200      	movs	r2, #0
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f9e8 	bl	800a4c0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80090f0:	e06b      	b.n	80091ca <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e073      	b.n	80091de <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80090f6:	4a3c      	ldr	r2, [pc, #240]	@ (80091e8 <RadioSend+0x1e0>)
 80090f8:	78fb      	ldrb	r3, [r7, #3]
 80090fa:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090fc:	483b      	ldr	r0, [pc, #236]	@ (80091ec <RadioSend+0x1e4>)
 80090fe:	f001 ff2d 	bl	800af5c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	2200      	movs	r2, #0
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f9d9 	bl	800a4c0 <SUBGRF_SendPayload>
            break;
 800910e:	e05c      	b.n	80091ca <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8009110:	4b35      	ldr	r3, [pc, #212]	@ (80091e8 <RadioSend+0x1e0>)
 8009112:	2202      	movs	r2, #2
 8009114:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8009116:	4a34      	ldr	r2, [pc, #208]	@ (80091e8 <RadioSend+0x1e0>)
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800911c:	4833      	ldr	r0, [pc, #204]	@ (80091ec <RadioSend+0x1e4>)
 800911e:	f001 ff1d 	bl	800af5c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	2200      	movs	r2, #0
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f9c9 	bl	800a4c0 <SUBGRF_SendPayload>
            break;
 800912e:	e04c      	b.n	80091ca <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	461a      	mov	r2, r3
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	482e      	ldr	r0, [pc, #184]	@ (80091f0 <RadioSend+0x1e8>)
 8009138:	f000 fc96 	bl	8009a68 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800913c:	4b2a      	ldr	r3, [pc, #168]	@ (80091e8 <RadioSend+0x1e0>)
 800913e:	2202      	movs	r2, #2
 8009140:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	3301      	adds	r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b27      	ldr	r3, [pc, #156]	@ (80091e8 <RadioSend+0x1e0>)
 800914a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800914c:	4827      	ldr	r0, [pc, #156]	@ (80091ec <RadioSend+0x1e4>)
 800914e:	f001 ff05 	bl	800af5c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8009152:	2100      	movs	r1, #0
 8009154:	20f1      	movs	r0, #241	@ 0xf1
 8009156:	f000 f963 	bl	8009420 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800915a:	2100      	movs	r1, #0
 800915c:	20f0      	movs	r0, #240	@ 0xf0
 800915e:	f000 f95f 	bl	8009420 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8009162:	4b21      	ldr	r3, [pc, #132]	@ (80091e8 <RadioSend+0x1e0>)
 8009164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009166:	2b64      	cmp	r3, #100	@ 0x64
 8009168:	d108      	bne.n	800917c <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800916a:	2170      	movs	r1, #112	@ 0x70
 800916c:	20f3      	movs	r0, #243	@ 0xf3
 800916e:	f000 f957 	bl	8009420 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8009172:	211d      	movs	r1, #29
 8009174:	20f2      	movs	r0, #242	@ 0xf2
 8009176:	f000 f953 	bl	8009420 <RadioWrite>
 800917a:	e007      	b.n	800918c <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800917c:	21e1      	movs	r1, #225	@ 0xe1
 800917e:	20f3      	movs	r0, #243	@ 0xf3
 8009180:	f000 f94e 	bl	8009420 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8009184:	2104      	movs	r1, #4
 8009186:	20f2      	movs	r0, #242	@ 0xf2
 8009188:	f000 f94a 	bl	8009420 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	b29b      	uxth	r3, r3
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	b29b      	uxth	r3, r3
 8009194:	3302      	adds	r3, #2
 8009196:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8009198:	89fb      	ldrh	r3, [r7, #14]
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	b29b      	uxth	r3, r3
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	20f4      	movs	r0, #244	@ 0xf4
 80091a4:	f000 f93c 	bl	8009420 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	4619      	mov	r1, r3
 80091ae:	20f5      	movs	r0, #245	@ 0xf5
 80091b0:	f000 f936 	bl	8009420 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80091be:	4619      	mov	r1, r3
 80091c0:	480b      	ldr	r0, [pc, #44]	@ (80091f0 <RadioSend+0x1e8>)
 80091c2:	f001 f97d 	bl	800a4c0 <SUBGRF_SendPayload>
            break;
 80091c6:	e000      	b.n	80091ca <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80091c8:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80091ca:	4b07      	ldr	r3, [pc, #28]	@ (80091e8 <RadioSend+0x1e0>)
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	4619      	mov	r1, r3
 80091d0:	4808      	ldr	r0, [pc, #32]	@ (80091f4 <RadioSend+0x1ec>)
 80091d2:	f003 fae5 	bl	800c7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80091d6:	4807      	ldr	r0, [pc, #28]	@ (80091f4 <RadioSend+0x1ec>)
 80091d8:	f003 fa04 	bl	800c5e4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	2000041c 	.word	0x2000041c
 80091ec:	2000042a 	.word	0x2000042a
 80091f0:	20000318 	.word	0x20000318
 80091f4:	20000478 	.word	0x20000478

080091f8 <RadioSleep>:

static void RadioSleep( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80091fe:	2300      	movs	r3, #0
 8009200:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8009202:	793b      	ldrb	r3, [r7, #4]
 8009204:	f043 0304 	orr.w	r3, r3, #4
 8009208:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800920a:	7938      	ldrb	r0, [r7, #4]
 800920c:	f001 fa34 	bl	800a678 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8009210:	2002      	movs	r0, #2
 8009212:	f7f8 fbef 	bl	80019f4 <HAL_Delay>
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <RadioStandby>:

static void RadioStandby( void )
{
 800921e:	b580      	push	{r7, lr}
 8009220:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8009222:	2000      	movs	r0, #0
 8009224:	f001 fa5c 	bl	800a6e0 <SUBGRF_SetStandby>
}
 8009228:	bf00      	nop
 800922a:	bd80      	pop	{r7, pc}

0800922c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8009234:	f002 fadf 	bl	800b7f6 <RFW_Is_Init>
 8009238:	4603      	mov	r3, r0
 800923a:	2b01      	cmp	r3, #1
 800923c:	d102      	bne.n	8009244 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800923e:	f002 fb02 	bl	800b846 <RFW_ReceiveInit>
 8009242:	e007      	b.n	8009254 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009244:	2300      	movs	r3, #0
 8009246:	2200      	movs	r2, #0
 8009248:	f240 2162 	movw	r1, #610	@ 0x262
 800924c:	f240 2062 	movw	r0, #610	@ 0x262
 8009250:	f001 fc20 	bl	800aa94 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d006      	beq.n	8009268 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4811      	ldr	r0, [pc, #68]	@ (80092a4 <RadioRx+0x78>)
 800925e:	f003 fa9f 	bl	800c7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009262:	4810      	ldr	r0, [pc, #64]	@ (80092a4 <RadioRx+0x78>)
 8009264:	f003 f9be 	bl	800c5e4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009268:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <RadioRx+0x7c>)
 800926a:	2200      	movs	r2, #0
 800926c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800926e:	4b0e      	ldr	r3, [pc, #56]	@ (80092a8 <RadioRx+0x7c>)
 8009270:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f002 f8c4 	bl	800b404 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800927c:	4b0a      	ldr	r3, [pc, #40]	@ (80092a8 <RadioRx+0x7c>)
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009284:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009288:	f001 fa66 	bl	800a758 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800928c:	e005      	b.n	800929a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800928e:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <RadioRx+0x7c>)
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	019b      	lsls	r3, r3, #6
 8009294:	4618      	mov	r0, r3
 8009296:	f001 fa5f 	bl	800a758 <SUBGRF_SetRx>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000490 	.word	0x20000490
 80092a8:	2000041c 	.word	0x2000041c

080092ac <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80092b4:	f002 fa9f 	bl	800b7f6 <RFW_Is_Init>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d102      	bne.n	80092c4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80092be:	f002 fac2 	bl	800b846 <RFW_ReceiveInit>
 80092c2:	e007      	b.n	80092d4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80092c4:	2300      	movs	r3, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	f240 2162 	movw	r1, #610	@ 0x262
 80092cc:	f240 2062 	movw	r0, #610	@ 0x262
 80092d0:	f001 fbe0 	bl	800aa94 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	4811      	ldr	r0, [pc, #68]	@ (8009324 <RadioRxBoosted+0x78>)
 80092de:	f003 fa5f 	bl	800c7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80092e2:	4810      	ldr	r0, [pc, #64]	@ (8009324 <RadioRxBoosted+0x78>)
 80092e4:	f003 f97e 	bl	800c5e4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80092e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009328 <RadioRxBoosted+0x7c>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80092ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009328 <RadioRxBoosted+0x7c>)
 80092f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f002 f884 	bl	800b404 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80092fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009328 <RadioRxBoosted+0x7c>)
 80092fe:	785b      	ldrb	r3, [r3, #1]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009304:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009308:	f001 fa46 	bl	800a798 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800930c:	e005      	b.n	800931a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800930e:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <RadioRxBoosted+0x7c>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	019b      	lsls	r3, r3, #6
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fa3f 	bl	800a798 <SUBGRF_SetRxBoosted>
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000490 	.word	0x20000490
 8009328:	2000041c 	.word	0x2000041c

0800932c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	005a      	lsls	r2, r3, #1
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	4413      	add	r3, r2
 800933e:	4a0c      	ldr	r2, [pc, #48]	@ (8009370 <RadioSetRxDutyCycle+0x44>)
 8009340:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009342:	2300      	movs	r3, #0
 8009344:	2200      	movs	r2, #0
 8009346:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800934a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800934e:	f001 fba1 	bl	800aa94 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009352:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <RadioSetRxDutyCycle+0x44>)
 8009354:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f002 f852 	bl	800b404 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fa3c 	bl	800a7e0 <SUBGRF_SetRxDutyCycle>
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	2000041c 	.word	0x2000041c

08009374 <RadioStartCad>:

static void RadioStartCad( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8009378:	4b09      	ldr	r3, [pc, #36]	@ (80093a0 <RadioStartCad+0x2c>)
 800937a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f002 f83f 	bl	800b404 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800938e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8009392:	f001 fb7f 	bl	800aa94 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8009396:	f001 fa4f 	bl	800a838 <SUBGRF_SetCad>
}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	2000041c 	.word	0x2000041c

080093a4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
 80093b0:	4613      	mov	r3, r2
 80093b2:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80093b4:	883b      	ldrh	r3, [r7, #0]
 80093b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
 80093be:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 fbc3 	bl	800ab4c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80093c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f002 f842 	bl	800b454 <SUBGRF_SetRfTxPower>
 80093d0:	4603      	mov	r3, r0
 80093d2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80093d4:	210e      	movs	r1, #14
 80093d6:	f640 101f 	movw	r0, #2335	@ 0x91f
 80093da:	f001 ff05 	bl	800b1e8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	2101      	movs	r1, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f002 f80e 	bl	800b404 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80093e8:	f001 fa34 	bl	800a854 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80093ec:	68f9      	ldr	r1, [r7, #12]
 80093ee:	4805      	ldr	r0, [pc, #20]	@ (8009404 <RadioSetTxContinuousWave+0x60>)
 80093f0:	f003 f9d6 	bl	800c7a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80093f4:	4803      	ldr	r0, [pc, #12]	@ (8009404 <RadioSetTxContinuousWave+0x60>)
 80093f6:	f003 f8f5 	bl	800c5e4 <UTIL_TIMER_Start>
}
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000478 	.word	0x20000478

08009408 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009412:	f001 fe56 	bl	800b0c2 <SUBGRF_GetRssiInst>
 8009416:	4603      	mov	r3, r0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	4603      	mov	r3, r0
 8009428:	460a      	mov	r2, r1
 800942a:	80fb      	strh	r3, [r7, #6]
 800942c:	4613      	mov	r3, r2
 800942e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8009430:	797a      	ldrb	r2, [r7, #5]
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fed6 	bl	800b1e8 <SUBGRF_WriteRegister>
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800944e:	88fb      	ldrh	r3, [r7, #6]
 8009450:	4618      	mov	r0, r3
 8009452:	f001 feeb 	bl	800b22c <SUBGRF_ReadRegister>
 8009456:	4603      	mov	r3, r0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	80fb      	strh	r3, [r7, #6]
 800946c:	4613      	mov	r3, r2
 800946e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8009470:	797b      	ldrb	r3, [r7, #5]
 8009472:	b29a      	uxth	r2, r3
 8009474:	88fb      	ldrh	r3, [r7, #6]
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	4618      	mov	r0, r3
 800947a:	f001 fef7 	bl	800b26c <SUBGRF_WriteRegisters>
}
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	4603      	mov	r3, r0
 800948e:	6039      	str	r1, [r7, #0]
 8009490:	80fb      	strh	r3, [r7, #6]
 8009492:	4613      	mov	r3, r2
 8009494:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009496:	797b      	ldrb	r3, [r7, #5]
 8009498:	b29a      	uxth	r2, r3
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 ff06 	bl	800b2b0 <SUBGRF_ReadRegisters>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	460a      	mov	r2, r1
 80094b6:	71fb      	strb	r3, [r7, #7]
 80094b8:	4613      	mov	r3, r2
 80094ba:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80094bc:	79fb      	ldrb	r3, [r7, #7]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d10a      	bne.n	80094d8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80094c2:	4a0e      	ldr	r2, [pc, #56]	@ (80094fc <RadioSetMaxPayloadLength+0x50>)
 80094c4:	79bb      	ldrb	r3, [r7, #6]
 80094c6:	7013      	strb	r3, [r2, #0]
 80094c8:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <RadioSetMaxPayloadLength+0x50>)
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <RadioSetMaxPayloadLength+0x54>)
 80094ce:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094d0:	480c      	ldr	r0, [pc, #48]	@ (8009504 <RadioSetMaxPayloadLength+0x58>)
 80094d2:	f001 fd43 	bl	800af5c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80094d6:	e00d      	b.n	80094f4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80094d8:	4b09      	ldr	r3, [pc, #36]	@ (8009500 <RadioSetMaxPayloadLength+0x54>)
 80094da:	7d5b      	ldrb	r3, [r3, #21]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d109      	bne.n	80094f4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80094e0:	4a06      	ldr	r2, [pc, #24]	@ (80094fc <RadioSetMaxPayloadLength+0x50>)
 80094e2:	79bb      	ldrb	r3, [r7, #6]
 80094e4:	7013      	strb	r3, [r2, #0]
 80094e6:	4b05      	ldr	r3, [pc, #20]	@ (80094fc <RadioSetMaxPayloadLength+0x50>)
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	4b05      	ldr	r3, [pc, #20]	@ (8009500 <RadioSetMaxPayloadLength+0x54>)
 80094ec:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094ee:	4805      	ldr	r0, [pc, #20]	@ (8009504 <RadioSetMaxPayloadLength+0x58>)
 80094f0:	f001 fd34 	bl	800af5c <SUBGRF_SetPacketParams>
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	2000005d 	.word	0x2000005d
 8009500:	2000041c 	.word	0x2000041c
 8009504:	2000042a 	.word	0x2000042a

08009508 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009512:	4a13      	ldr	r2, [pc, #76]	@ (8009560 <RadioSetPublicNetwork+0x58>)
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	7313      	strb	r3, [r2, #12]
 8009518:	4b11      	ldr	r3, [pc, #68]	@ (8009560 <RadioSetPublicNetwork+0x58>)
 800951a:	7b1a      	ldrb	r2, [r3, #12]
 800951c:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <RadioSetPublicNetwork+0x58>)
 800951e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009520:	2001      	movs	r0, #1
 8009522:	f7ff f81b 	bl	800855c <RadioSetModem>
    if( enable == true )
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800952c:	2134      	movs	r1, #52	@ 0x34
 800952e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009532:	f001 fe59 	bl	800b1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009536:	2144      	movs	r1, #68	@ 0x44
 8009538:	f240 7041 	movw	r0, #1857	@ 0x741
 800953c:	f001 fe54 	bl	800b1e8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009540:	e009      	b.n	8009556 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009542:	2114      	movs	r1, #20
 8009544:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009548:	f001 fe4e 	bl	800b1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800954c:	2124      	movs	r1, #36	@ 0x24
 800954e:	f240 7041 	movw	r0, #1857	@ 0x741
 8009552:	f001 fe49 	bl	800b1e8 <SUBGRF_WriteRegister>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	2000041c 	.word	0x2000041c

08009564 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009568:	f001 ffa8 	bl	800b4bc <SUBGRF_GetRadioWakeUpTime>
 800956c:	4603      	mov	r3, r0
 800956e:	3303      	adds	r3, #3
}
 8009570:	4618      	mov	r0, r3
 8009572:	bd80      	pop	{r7, pc}

08009574 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800957c:	f000 f80e 	bl	800959c <RadioOnTxTimeoutProcess>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009590:	f000 f818 	bl	80095c4 <RadioOnRxTimeoutProcess>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80095a0:	4b07      	ldr	r3, [pc, #28]	@ (80095c0 <RadioOnTxTimeoutProcess+0x24>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <RadioOnTxTimeoutProcess+0x1e>
 80095a8:	4b05      	ldr	r3, [pc, #20]	@ (80095c0 <RadioOnTxTimeoutProcess+0x24>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80095b2:	4b03      	ldr	r3, [pc, #12]	@ (80095c0 <RadioOnTxTimeoutProcess+0x24>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	4798      	blx	r3
    }
}
 80095ba:	bf00      	nop
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000418 	.word	0x20000418

080095c4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095c8:	4b07      	ldr	r3, [pc, #28]	@ (80095e8 <RadioOnRxTimeoutProcess+0x24>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <RadioOnRxTimeoutProcess+0x1e>
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <RadioOnRxTimeoutProcess+0x24>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80095da:	4b03      	ldr	r3, [pc, #12]	@ (80095e8 <RadioOnRxTimeoutProcess+0x24>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	4798      	blx	r3
    }
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000418 	.word	0x20000418

080095ec <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80095f6:	4a05      	ldr	r2, [pc, #20]	@ (800960c <RadioOnDioIrq+0x20>)
 80095f8:	88fb      	ldrh	r3, [r7, #6]
 80095fa:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80095fe:	f000 f807 	bl	8009610 <RadioIrqProcess>
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	2000041c 	.word	0x2000041c

08009610 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009610:	b5b0      	push	{r4, r5, r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800961e:	4ba5      	ldr	r3, [pc, #660]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 8009620:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009628:	f000 810d 	beq.w	8009846 <RadioIrqProcess+0x236>
 800962c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009630:	f300 81c0 	bgt.w	80099b4 <RadioIrqProcess+0x3a4>
 8009634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009638:	f000 80f1 	beq.w	800981e <RadioIrqProcess+0x20e>
 800963c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009640:	f300 81b8 	bgt.w	80099b4 <RadioIrqProcess+0x3a4>
 8009644:	2b80      	cmp	r3, #128	@ 0x80
 8009646:	f000 80d6 	beq.w	80097f6 <RadioIrqProcess+0x1e6>
 800964a:	2b80      	cmp	r3, #128	@ 0x80
 800964c:	f300 81b2 	bgt.w	80099b4 <RadioIrqProcess+0x3a4>
 8009650:	2b20      	cmp	r3, #32
 8009652:	dc49      	bgt.n	80096e8 <RadioIrqProcess+0xd8>
 8009654:	2b00      	cmp	r3, #0
 8009656:	f340 81ad 	ble.w	80099b4 <RadioIrqProcess+0x3a4>
 800965a:	3b01      	subs	r3, #1
 800965c:	2b1f      	cmp	r3, #31
 800965e:	f200 81a9 	bhi.w	80099b4 <RadioIrqProcess+0x3a4>
 8009662:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <RadioIrqProcess+0x58>)
 8009664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009668:	080096f1 	.word	0x080096f1
 800966c:	0800972b 	.word	0x0800972b
 8009670:	080099b5 	.word	0x080099b5
 8009674:	080098d1 	.word	0x080098d1
 8009678:	080099b5 	.word	0x080099b5
 800967c:	080099b5 	.word	0x080099b5
 8009680:	080099b5 	.word	0x080099b5
 8009684:	0800993f 	.word	0x0800993f
 8009688:	080099b5 	.word	0x080099b5
 800968c:	080099b5 	.word	0x080099b5
 8009690:	080099b5 	.word	0x080099b5
 8009694:	080099b5 	.word	0x080099b5
 8009698:	080099b5 	.word	0x080099b5
 800969c:	080099b5 	.word	0x080099b5
 80096a0:	080099b5 	.word	0x080099b5
 80096a4:	080099b5 	.word	0x080099b5
 80096a8:	080099b5 	.word	0x080099b5
 80096ac:	080099b5 	.word	0x080099b5
 80096b0:	080099b5 	.word	0x080099b5
 80096b4:	080099b5 	.word	0x080099b5
 80096b8:	080099b5 	.word	0x080099b5
 80096bc:	080099b5 	.word	0x080099b5
 80096c0:	080099b5 	.word	0x080099b5
 80096c4:	080099b5 	.word	0x080099b5
 80096c8:	080099b5 	.word	0x080099b5
 80096cc:	080099b5 	.word	0x080099b5
 80096d0:	080099b5 	.word	0x080099b5
 80096d4:	080099b5 	.word	0x080099b5
 80096d8:	080099b5 	.word	0x080099b5
 80096dc:	080099b5 	.word	0x080099b5
 80096e0:	080099b5 	.word	0x080099b5
 80096e4:	0800994f 	.word	0x0800994f
 80096e8:	2b40      	cmp	r3, #64	@ 0x40
 80096ea:	f000 814b 	beq.w	8009984 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80096ee:	e161      	b.n	80099b4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80096f0:	4871      	ldr	r0, [pc, #452]	@ (80098b8 <RadioIrqProcess+0x2a8>)
 80096f2:	f002 ffe5 	bl	800c6c0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80096f6:	2000      	movs	r0, #0
 80096f8:	f000 fff2 	bl	800a6e0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80096fc:	f002 f882 	bl	800b804 <RFW_Is_LongPacketModeEnabled>
 8009700:	4603      	mov	r3, r0
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009706:	f002 f8a6 	bl	800b856 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800970a:	4b6c      	ldr	r3, [pc, #432]	@ (80098bc <RadioIrqProcess+0x2ac>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8152 	beq.w	80099b8 <RadioIrqProcess+0x3a8>
 8009714:	4b69      	ldr	r3, [pc, #420]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 814c 	beq.w	80099b8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009720:	4b66      	ldr	r3, [pc, #408]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4798      	blx	r3
        break;
 8009728:	e146      	b.n	80099b8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800972a:	4865      	ldr	r0, [pc, #404]	@ (80098c0 <RadioIrqProcess+0x2b0>)
 800972c:	f002 ffc8 	bl	800c6c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009730:	4b60      	ldr	r3, [pc, #384]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 8009732:	785b      	ldrb	r3, [r3, #1]
 8009734:	f083 0301 	eor.w	r3, r3, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d014      	beq.n	8009768 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800973e:	2000      	movs	r0, #0
 8009740:	f000 ffce 	bl	800a6e0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009744:	2100      	movs	r1, #0
 8009746:	f640 1002 	movw	r0, #2306	@ 0x902
 800974a:	f001 fd4d 	bl	800b1e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800974e:	f640 1044 	movw	r0, #2372	@ 0x944
 8009752:	f001 fd6b 	bl	800b22c <SUBGRF_ReadRegister>
 8009756:	4603      	mov	r3, r0
 8009758:	f043 0302 	orr.w	r3, r3, #2
 800975c:	b2db      	uxtb	r3, r3
 800975e:	4619      	mov	r1, r3
 8009760:	f640 1044 	movw	r0, #2372	@ 0x944
 8009764:	f001 fd40 	bl	800b1e8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009768:	1dfb      	adds	r3, r7, #7
 800976a:	22ff      	movs	r2, #255	@ 0xff
 800976c:	4619      	mov	r1, r3
 800976e:	4855      	ldr	r0, [pc, #340]	@ (80098c4 <RadioIrqProcess+0x2b4>)
 8009770:	f000 fe84 	bl	800a47c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009774:	4854      	ldr	r0, [pc, #336]	@ (80098c8 <RadioIrqProcess+0x2b8>)
 8009776:	f001 fce5 	bl	800b144 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800977a:	4b50      	ldr	r3, [pc, #320]	@ (80098bc <RadioIrqProcess+0x2ac>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 811c 	beq.w	80099bc <RadioIrqProcess+0x3ac>
 8009784:	4b4d      	ldr	r3, [pc, #308]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 8116 	beq.w	80099bc <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009790:	4b48      	ldr	r3, [pc, #288]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 8009792:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009796:	2b01      	cmp	r3, #1
 8009798:	d10e      	bne.n	80097b8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800979a:	4b48      	ldr	r3, [pc, #288]	@ (80098bc <RadioIrqProcess+0x2ac>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689c      	ldr	r4, [r3, #8]
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	4619      	mov	r1, r3
 80097a4:	4b43      	ldr	r3, [pc, #268]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 80097a6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b41      	ldr	r3, [pc, #260]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 80097ae:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80097b2:	4844      	ldr	r0, [pc, #272]	@ (80098c4 <RadioIrqProcess+0x2b4>)
 80097b4:	47a0      	blx	r4
                break;
 80097b6:	e01d      	b.n	80097f4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80097b8:	4b3e      	ldr	r3, [pc, #248]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 80097ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097bc:	463a      	mov	r2, r7
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 ff6d 	bl	800b6a0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80097c6:	4b3d      	ldr	r3, [pc, #244]	@ (80098bc <RadioIrqProcess+0x2ac>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689c      	ldr	r4, [r3, #8]
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	4619      	mov	r1, r3
 80097d0:	4b38      	ldr	r3, [pc, #224]	@ (80098b4 <RadioIrqProcess+0x2a4>)
 80097d2:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80097d6:	4618      	mov	r0, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80097de:	4a3b      	ldr	r2, [pc, #236]	@ (80098cc <RadioIrqProcess+0x2bc>)
 80097e0:	fb82 5203 	smull	r5, r2, r2, r3
 80097e4:	1192      	asrs	r2, r2, #6
 80097e6:	17db      	asrs	r3, r3, #31
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	4602      	mov	r2, r0
 80097ee:	4835      	ldr	r0, [pc, #212]	@ (80098c4 <RadioIrqProcess+0x2b4>)
 80097f0:	47a0      	blx	r4
                break;
 80097f2:	bf00      	nop
        break;
 80097f4:	e0e2      	b.n	80099bc <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80097f6:	2000      	movs	r0, #0
 80097f8:	f000 ff72 	bl	800a6e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80097fc:	4b2f      	ldr	r3, [pc, #188]	@ (80098bc <RadioIrqProcess+0x2ac>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80dd 	beq.w	80099c0 <RadioIrqProcess+0x3b0>
 8009806:	4b2d      	ldr	r3, [pc, #180]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80d7 	beq.w	80099c0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009812:	4b2a      	ldr	r3, [pc, #168]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2000      	movs	r0, #0
 800981a:	4798      	blx	r3
        break;
 800981c:	e0d0      	b.n	80099c0 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800981e:	2000      	movs	r0, #0
 8009820:	f000 ff5e 	bl	800a6e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009824:	4b25      	ldr	r3, [pc, #148]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80cb 	beq.w	80099c4 <RadioIrqProcess+0x3b4>
 800982e:	4b23      	ldr	r3, [pc, #140]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80c5 	beq.w	80099c4 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800983a:	4b20      	ldr	r3, [pc, #128]	@ (80098bc <RadioIrqProcess+0x2ac>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	2001      	movs	r0, #1
 8009842:	4798      	blx	r3
        break;
 8009844:	e0be      	b.n	80099c4 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009846:	f000 fdff 	bl	800a448 <SUBGRF_GetOperatingMode>
 800984a:	4603      	mov	r3, r0
 800984c:	2b04      	cmp	r3, #4
 800984e:	d115      	bne.n	800987c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009850:	4819      	ldr	r0, [pc, #100]	@ (80098b8 <RadioIrqProcess+0x2a8>)
 8009852:	f002 ff35 	bl	800c6c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009856:	2000      	movs	r0, #0
 8009858:	f000 ff42 	bl	800a6e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800985c:	4b17      	ldr	r3, [pc, #92]	@ (80098bc <RadioIrqProcess+0x2ac>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 80b1 	beq.w	80099c8 <RadioIrqProcess+0x3b8>
 8009866:	4b15      	ldr	r3, [pc, #84]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80ab 	beq.w	80099c8 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8009872:	4b12      	ldr	r3, [pc, #72]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	4798      	blx	r3
        break;
 800987a:	e0a5      	b.n	80099c8 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800987c:	f000 fde4 	bl	800a448 <SUBGRF_GetOperatingMode>
 8009880:	4603      	mov	r3, r0
 8009882:	2b05      	cmp	r3, #5
 8009884:	f040 80a0 	bne.w	80099c8 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8009888:	480d      	ldr	r0, [pc, #52]	@ (80098c0 <RadioIrqProcess+0x2b0>)
 800988a:	f002 ff19 	bl	800c6c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800988e:	2000      	movs	r0, #0
 8009890:	f000 ff26 	bl	800a6e0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009894:	4b09      	ldr	r3, [pc, #36]	@ (80098bc <RadioIrqProcess+0x2ac>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8095 	beq.w	80099c8 <RadioIrqProcess+0x3b8>
 800989e:	4b07      	ldr	r3, [pc, #28]	@ (80098bc <RadioIrqProcess+0x2ac>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 808f 	beq.w	80099c8 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80098aa:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <RadioIrqProcess+0x2ac>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	4798      	blx	r3
        break;
 80098b2:	e089      	b.n	80099c8 <RadioIrqProcess+0x3b8>
 80098b4:	2000041c 	.word	0x2000041c
 80098b8:	20000478 	.word	0x20000478
 80098bc:	20000418 	.word	0x20000418
 80098c0:	20000490 	.word	0x20000490
 80098c4:	20000318 	.word	0x20000318
 80098c8:	20000440 	.word	0x20000440
 80098cc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80098d0:	4b44      	ldr	r3, [pc, #272]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 80098d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d079      	beq.n	80099cc <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80098d8:	4a43      	ldr	r2, [pc, #268]	@ (80099e8 <RadioIrqProcess+0x3d8>)
 80098da:	4b42      	ldr	r3, [pc, #264]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 80098dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098de:	0c1b      	lsrs	r3, r3, #16
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	4619      	mov	r1, r3
 80098e4:	f640 1003 	movw	r0, #2307	@ 0x903
 80098e8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80098ea:	4a3f      	ldr	r2, [pc, #252]	@ (80099e8 <RadioIrqProcess+0x3d8>)
 80098ec:	4b3d      	ldr	r3, [pc, #244]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 80098ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4619      	mov	r1, r3
 80098f6:	f640 1004 	movw	r0, #2308	@ 0x904
 80098fa:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80098fc:	4a3a      	ldr	r2, [pc, #232]	@ (80099e8 <RadioIrqProcess+0x3d8>)
 80098fe:	4b39      	ldr	r3, [pc, #228]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4619      	mov	r1, r3
 8009906:	f640 1005 	movw	r0, #2309	@ 0x905
 800990a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800990c:	4c36      	ldr	r4, [pc, #216]	@ (80099e8 <RadioIrqProcess+0x3d8>)
 800990e:	4b37      	ldr	r3, [pc, #220]	@ (80099ec <RadioIrqProcess+0x3dc>)
 8009910:	f640 1002 	movw	r0, #2306	@ 0x902
 8009914:	4798      	blx	r3
 8009916:	4603      	mov	r3, r0
 8009918:	f043 0301 	orr.w	r3, r3, #1
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4619      	mov	r1, r3
 8009920:	f640 1002 	movw	r0, #2306	@ 0x902
 8009924:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009926:	4b2f      	ldr	r3, [pc, #188]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 8009928:	2200      	movs	r2, #0
 800992a:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800992c:	2300      	movs	r3, #0
 800992e:	2200      	movs	r2, #0
 8009930:	f240 2162 	movw	r1, #610	@ 0x262
 8009934:	f240 2062 	movw	r0, #610	@ 0x262
 8009938:	f001 f8ac 	bl	800aa94 <SUBGRF_SetDioIrqParams>
        break;
 800993c:	e046      	b.n	80099cc <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800993e:	f001 ff5a 	bl	800b7f6 <RFW_Is_Init>
 8009942:	4603      	mov	r3, r0
 8009944:	2b01      	cmp	r3, #1
 8009946:	d143      	bne.n	80099d0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009948:	f001 ff8b 	bl	800b862 <RFW_ReceivePayload>
        break;
 800994c:	e040      	b.n	80099d0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800994e:	4828      	ldr	r0, [pc, #160]	@ (80099f0 <RadioIrqProcess+0x3e0>)
 8009950:	f002 feb6 	bl	800c6c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009954:	4b23      	ldr	r3, [pc, #140]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	f083 0301 	eor.w	r3, r3, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009962:	2000      	movs	r0, #0
 8009964:	f000 febc 	bl	800a6e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009968:	4b22      	ldr	r3, [pc, #136]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d031      	beq.n	80099d4 <RadioIrqProcess+0x3c4>
 8009970:	4b20      	ldr	r3, [pc, #128]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d02c      	beq.n	80099d4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800997a:	4b1e      	ldr	r3, [pc, #120]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	4798      	blx	r3
        break;
 8009982:	e027      	b.n	80099d4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8009984:	4b17      	ldr	r3, [pc, #92]	@ (80099e4 <RadioIrqProcess+0x3d4>)
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	f083 0301 	eor.w	r3, r3, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8009992:	2000      	movs	r0, #0
 8009994:	f000 fea4 	bl	800a6e0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009998:	4b16      	ldr	r3, [pc, #88]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01b      	beq.n	80099d8 <RadioIrqProcess+0x3c8>
 80099a0:	4b14      	ldr	r3, [pc, #80]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d016      	beq.n	80099d8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80099aa:	4b12      	ldr	r3, [pc, #72]	@ (80099f4 <RadioIrqProcess+0x3e4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	4798      	blx	r3
        break;
 80099b2:	e011      	b.n	80099d8 <RadioIrqProcess+0x3c8>
        break;
 80099b4:	bf00      	nop
 80099b6:	e010      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099b8:	bf00      	nop
 80099ba:	e00e      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099bc:	bf00      	nop
 80099be:	e00c      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099c0:	bf00      	nop
 80099c2:	e00a      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099c4:	bf00      	nop
 80099c6:	e008      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099c8:	bf00      	nop
 80099ca:	e006      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099cc:	bf00      	nop
 80099ce:	e004      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099d0:	bf00      	nop
 80099d2:	e002      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099d4:	bf00      	nop
 80099d6:	e000      	b.n	80099da <RadioIrqProcess+0x3ca>
        break;
 80099d8:	bf00      	nop
    }
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bdb0      	pop	{r4, r5, r7, pc}
 80099e2:	bf00      	nop
 80099e4:	2000041c 	.word	0x2000041c
 80099e8:	08009421 	.word	0x08009421
 80099ec:	08009445 	.word	0x08009445
 80099f0:	20000490 	.word	0x20000490
 80099f4:	20000418 	.word	0x20000418

080099f8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80099fc:	4b09      	ldr	r3, [pc, #36]	@ (8009a24 <RadioTxPrbs+0x2c>)
 80099fe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009a02:	2101      	movs	r1, #1
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fcfd 	bl	800b404 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009a0a:	4b07      	ldr	r3, [pc, #28]	@ (8009a28 <RadioTxPrbs+0x30>)
 8009a0c:	212d      	movs	r1, #45	@ 0x2d
 8009a0e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8009a12:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009a14:	f000 ff27 	bl	800a866 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009a18:	4804      	ldr	r0, [pc, #16]	@ (8009a2c <RadioTxPrbs+0x34>)
 8009a1a:	f000 fe7d 	bl	800a718 <SUBGRF_SetTx>
}
 8009a1e:	bf00      	nop
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	2000041c 	.word	0x2000041c
 8009a28:	08009421 	.word	0x08009421
 8009a2c:	000fffff 	.word	0x000fffff

08009a30 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fd08 	bl	800b454 <SUBGRF_SetRfTxPower>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009a48:	210e      	movs	r1, #14
 8009a4a:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009a4e:	f001 fbcb 	bl	800b1e8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2101      	movs	r1, #1
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 fcd4 	bl	800b404 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8009a5c:	f000 fefa 	bl	800a854 <SUBGRF_SetTxContinuousWave>
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b089      	sub	sp, #36	@ 0x24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	e011      	b.n	8009aa8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	440b      	add	r3, r1
 8009a92:	43d2      	mvns	r2, r2
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	dbe9      	blt.n	8009a84 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61bb      	str	r3, [r7, #24]
 8009ab4:	e049      	b.n	8009b4a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	425a      	negs	r2, r3
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	f002 0207 	and.w	r2, r2, #7
 8009ac2:	bf58      	it	pl
 8009ac4:	4253      	negpl	r3, r2
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f1c3 0307 	rsb	r3, r3, #7
 8009acc:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	da00      	bge.n	8009ad6 <payload_integration+0x6e>
 8009ad4:	3307      	adds	r3, #7
 8009ad6:	10db      	asrs	r3, r3, #3
 8009ad8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	3301      	adds	r3, #1
 8009ade:	425a      	negs	r2, r3
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	f002 0207 	and.w	r2, r2, #7
 8009ae8:	bf58      	it	pl
 8009aea:	4253      	negpl	r3, r2
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f1c3 0307 	rsb	r3, r3, #7
 8009af2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	3301      	adds	r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	da00      	bge.n	8009afe <payload_integration+0x96>
 8009afc:	3307      	adds	r3, #7
 8009afe:	10db      	asrs	r3, r3, #3
 8009b00:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009b02:	7dbb      	ldrb	r3, [r7, #22]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	4413      	add	r3, r2
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	fa42 f303 	asr.w	r3, r2, r3
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009b1a:	7ffa      	ldrb	r2, [r7, #31]
 8009b1c:	7cfb      	ldrb	r3, [r7, #19]
 8009b1e:	4053      	eors	r3, r2
 8009b20:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009b22:	7d3b      	ldrb	r3, [r7, #20]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	b25a      	sxtb	r2, r3
 8009b2c:	7ff9      	ldrb	r1, [r7, #31]
 8009b2e:	7d7b      	ldrb	r3, [r7, #21]
 8009b30:	fa01 f303 	lsl.w	r3, r1, r3
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	b259      	sxtb	r1, r3
 8009b3a:	7d3b      	ldrb	r3, [r7, #20]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	b2ca      	uxtb	r2, r1
 8009b42:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	3301      	adds	r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	dbb0      	blt.n	8009ab6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009b54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b58:	01db      	lsls	r3, r3, #7
 8009b5a:	b25a      	sxtb	r2, r3
 8009b5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b60:	019b      	lsls	r3, r3, #6
 8009b62:	b25b      	sxtb	r3, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	b25b      	sxtb	r3, r3
 8009b68:	7ffa      	ldrb	r2, [r7, #31]
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	d101      	bne.n	8009b72 <payload_integration+0x10a>
 8009b6e:	2220      	movs	r2, #32
 8009b70:	e000      	b.n	8009b74 <payload_integration+0x10c>
 8009b72:	2200      	movs	r2, #0
 8009b74:	4313      	orrs	r3, r2
 8009b76:	b259      	sxtb	r1, r3
 8009b78:	79fb      	ldrb	r3, [r7, #7]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	b2ca      	uxtb	r2, r1
 8009b80:	701a      	strb	r2, [r3, #0]
}
 8009b82:	bf00      	nop
 8009b84:	3724      	adds	r7, #36	@ 0x24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr

08009b8c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08c      	sub	sp, #48	@ 0x30
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8009ba0:	f107 0320 	add.w	r3, r7, #32
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009baa:	f001 fe1e 	bl	800b7ea <RFW_DeInit>

    if( rxContinuous != 0 )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	bf14      	ite	ne
 8009bbe:	2301      	movne	r3, #1
 8009bc0:	2300      	moveq	r3, #0
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	4ba3      	ldr	r3, [pc, #652]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009bc6:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <RadioSetRxGenericConfig+0x4a>
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	f000 80dc 	beq.w	8009d8c <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009bd4:	e195      	b.n	8009f02 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <RadioSetRxGenericConfig+0x5a>
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <RadioSetRxGenericConfig+0x60>
            return -1;
 8009be6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bea:	e18b      	b.n	8009f04 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	7f9b      	ldrb	r3, [r3, #30]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d902      	bls.n	8009bfa <RadioSetRxGenericConfig+0x6e>
            return -1;
 8009bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf8:	e184      	b.n	8009f04 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	6919      	ldr	r1, [r3, #16]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	7f9b      	ldrb	r3, [r3, #30]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f107 0320 	add.w	r3, r7, #32
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f002 fc7b 	bl	800c504 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bf14      	ite	ne
 8009c16:	2301      	movne	r3, #1
 8009c18:	2300      	moveq	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 fe2b 	bl	800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c22:	4b8c      	ldr	r3, [pc, #560]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	4a89      	ldr	r2, [pc, #548]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c30:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009c38:	4b86      	ldr	r3, [pc, #536]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f001 fd04 	bl	800b650 <SUBGRF_GetFskBandwidthRegValue>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4b81      	ldr	r3, [pc, #516]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c52:	4b80      	ldr	r3, [pc, #512]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	4b7c      	ldr	r3, [pc, #496]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c64:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	7fda      	ldrb	r2, [r3, #31]
 8009c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c6c:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	7f9b      	ldrb	r3, [r3, #30]
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	4b77      	ldr	r3, [pc, #476]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c78:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8009c80:	4b74      	ldr	r3, [pc, #464]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c82:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d105      	bne.n	8009c9a <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	4b6f      	ldr	r3, [pc, #444]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009c96:	759a      	strb	r2, [r3, #22]
 8009c98:	e00b      	b.n	8009cb2 <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d103      	bne.n	8009cac <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009ca6:	22ff      	movs	r2, #255	@ 0xff
 8009ca8:	759a      	strb	r2, [r3, #22]
 8009caa:	e002      	b.n	8009cb2 <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009cac:	4b69      	ldr	r3, [pc, #420]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009cae:	22ff      	movs	r2, #255	@ 0xff
 8009cb0:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d004      	beq.n	8009cc6 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d12d      	bne.n	8009d22 <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009ccc:	2bf1      	cmp	r3, #241	@ 0xf1
 8009cce:	d00c      	beq.n	8009cea <RadioSetRxGenericConfig+0x15e>
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009cd6:	2bf2      	cmp	r3, #242	@ 0xf2
 8009cd8:	d007      	beq.n	8009cea <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d002      	beq.n	8009cea <RadioSetRxGenericConfig+0x15e>
                return -1;
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	e10c      	b.n	8009f04 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8009cea:	2300      	movs	r3, #0
 8009cec:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009cf2:	4b59      	ldr	r3, [pc, #356]	@ (8009e58 <RadioSetRxGenericConfig+0x2cc>)
 8009cf4:	6819      	ldr	r1, [r3, #0]
 8009cf6:	f107 0314 	add.w	r3, r7, #20
 8009cfa:	4a58      	ldr	r2, [pc, #352]	@ (8009e5c <RadioSetRxGenericConfig+0x2d0>)
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fd67 	bl	800b7d0 <RFW_Init>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <RadioSetRxGenericConfig+0x182>
                return -1;
 8009d08:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0c:	e0fa      	b.n	8009f04 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009d0e:	4b51      	ldr	r3, [pc, #324]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009d14:	4b4f      	ldr	r3, [pc, #316]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	755a      	strb	r2, [r3, #21]
        {
 8009d20:	e00e      	b.n	8009d40 <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8009d28:	4b4a      	ldr	r3, [pc, #296]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d2a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009d32:	4b48      	ldr	r3, [pc, #288]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d34:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009d3c:	4b45      	ldr	r3, [pc, #276]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d3e:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009d40:	f7ff fa6d 	bl	800921e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009d44:	2000      	movs	r0, #0
 8009d46:	f7fe fc09 	bl	800855c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d4a:	4845      	ldr	r0, [pc, #276]	@ (8009e60 <RadioSetRxGenericConfig+0x2d4>)
 8009d4c:	f001 f838 	bl	800adc0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d50:	4844      	ldr	r0, [pc, #272]	@ (8009e64 <RadioSetRxGenericConfig+0x2d8>)
 8009d52:	f001 f903 	bl	800af5c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009d56:	f107 0320 	add.w	r3, r7, #32
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fbc3 	bl	800a4e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	8b9b      	ldrh	r3, [r3, #28]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fc0d 	bl	800a584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	8b1b      	ldrh	r3, [r3, #24]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fbe8 	bl	800a544 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8009d7a:	fb03 f202 	mul.w	r2, r3, r2
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d86:	4a33      	ldr	r2, [pc, #204]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009d88:	6093      	str	r3, [r2, #8]
        break;
 8009d8a:	e0ba      	b.n	8009f02 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <RadioSetRxGenericConfig+0x20e>
            return -1;
 8009d94:	f04f 33ff 	mov.w	r3, #4294967295
 8009d98:	e0b4      	b.n	8009f04 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d105      	bne.n	8009db0 <RadioSetRxGenericConfig+0x224>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8009daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009dae:	e002      	b.n	8009db6 <RadioSetRxGenericConfig+0x22a>
            MaxPayloadLength = 0xFF;
 8009db0:	23ff      	movs	r3, #255	@ 0xff
 8009db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2301      	movne	r3, #1
 8009dc0:	2300      	moveq	r3, #0
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 fd57 	bl	800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fd61 	bl	800a896 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8009de2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8009dee:	4b19      	ldr	r3, [pc, #100]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8009dfa:	4b16      	ldr	r3, [pc, #88]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009dfc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d010      	beq.n	8009e2c <RadioSetRxGenericConfig+0x2a0>
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	dc2c      	bgt.n	8009e68 <RadioSetRxGenericConfig+0x2dc>
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <RadioSetRxGenericConfig+0x28c>
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d005      	beq.n	8009e22 <RadioSetRxGenericConfig+0x296>
            break;
 8009e16:	e027      	b.n	8009e68 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e18:	4b0e      	ldr	r3, [pc, #56]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e20:	e023      	b.n	8009e6a <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e22:	4b0c      	ldr	r3, [pc, #48]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e2a:	e01e      	b.n	8009e6a <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e32:	2b0b      	cmp	r3, #11
 8009e34:	d004      	beq.n	8009e40 <RadioSetRxGenericConfig+0x2b4>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e3c:	2b0c      	cmp	r3, #12
 8009e3e:	d104      	bne.n	8009e4a <RadioSetRxGenericConfig+0x2be>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e40:	4b04      	ldr	r3, [pc, #16]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e48:	e00f      	b.n	8009e6a <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e4a:	4b02      	ldr	r3, [pc, #8]	@ (8009e54 <RadioSetRxGenericConfig+0x2c8>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8009e52:	e00a      	b.n	8009e6a <RadioSetRxGenericConfig+0x2de>
 8009e54:	2000041c 	.word	0x2000041c
 8009e58:	20000418 	.word	0x20000418
 8009e5c:	20000490 	.word	0x20000490
 8009e60:	20000454 	.word	0x20000454
 8009e64:	2000042a 	.word	0x2000042a
            break;
 8009e68:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009e6a:	4b28      	ldr	r3, [pc, #160]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8009e74:	4b25      	ldr	r3, [pc, #148]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e76:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8009e7e:	4b23      	ldr	r3, [pc, #140]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e80:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009e82:	4a22      	ldr	r2, [pc, #136]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e88:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8009e90:	4b1e      	ldr	r3, [pc, #120]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e92:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8009e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009e9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8009ea2:	f7ff f9bc 	bl	800921e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7fe fb58 	bl	800855c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009eac:	4818      	ldr	r0, [pc, #96]	@ (8009f10 <RadioSetRxGenericConfig+0x384>)
 8009eae:	f000 ff87 	bl	800adc0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009eb2:	4818      	ldr	r0, [pc, #96]	@ (8009f14 <RadioSetRxGenericConfig+0x388>)
 8009eb4:	f001 f852 	bl	800af5c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009eb8:	4b14      	ldr	r3, [pc, #80]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009eba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d10d      	bne.n	8009ede <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009ec2:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ec6:	f001 f9b1 	bl	800b22c <SUBGRF_ReadRegister>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f023 0304 	bic.w	r3, r3, #4
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ed8:	f001 f986 	bl	800b1e8 <SUBGRF_WriteRegister>
 8009edc:	e00c      	b.n	8009ef8 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009ede:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ee2:	f001 f9a3 	bl	800b22c <SUBGRF_ReadRegister>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f043 0304 	orr.w	r3, r3, #4
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	4619      	mov	r1, r3
 8009ef0:	f240 7036 	movw	r0, #1846	@ 0x736
 8009ef4:	f001 f978 	bl	800b1e8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009ef8:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <RadioSetRxGenericConfig+0x380>)
 8009efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009efe:	609a      	str	r2, [r3, #8]
        break;
 8009f00:	bf00      	nop
    }
    return status;
 8009f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3730      	adds	r7, #48	@ 0x30
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	2000041c 	.word	0x2000041c
 8009f10:	20000454 	.word	0x20000454
 8009f14:	2000042a 	.word	0x2000042a

08009f18 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08e      	sub	sp, #56	@ 0x38
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607b      	str	r3, [r7, #4]
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
 8009f26:	4613      	mov	r3, r2
 8009f28:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009f34:	f001 fc59 	bl	800b7ea <RFW_DeInit>
    switch( modem )
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	f200 8205 	bhi.w	800a34a <RadioSetTxGenericConfig+0x432>
 8009f40:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <RadioSetTxGenericConfig+0x30>)
 8009f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f46:	bf00      	nop
 8009f48:	0800a0cd 	.word	0x0800a0cd
 8009f4c:	0800a215 	.word	0x0800a215
 8009f50:	0800a30d 	.word	0x0800a30d
 8009f54:	08009f59 	.word	0x08009f59
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	7c9b      	ldrb	r3, [r3, #18]
 8009f5c:	2b08      	cmp	r3, #8
 8009f5e:	d902      	bls.n	8009f66 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295
 8009f64:	e206      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6899      	ldr	r1, [r3, #8]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	7c9b      	ldrb	r3, [r3, #18]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fac5 	bl	800c504 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d102      	bne.n	8009f88 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 8009f82:	f04f 33ff 	mov.w	r3, #4294967295
 8009f86:	e1f5      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d813      	bhi.n	8009fbc <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009f94:	2302      	movs	r3, #2
 8009f96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009f9a:	4b99      	ldr	r3, [pc, #612]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009f9c:	2203      	movs	r2, #3
 8009f9e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009fa0:	4b97      	ldr	r3, [pc, #604]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a94      	ldr	r2, [pc, #592]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fae:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	7cda      	ldrb	r2, [r3, #19]
 8009fb4:	4b92      	ldr	r3, [pc, #584]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fba:	e017      	b.n	8009fec <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009fc2:	4b8f      	ldr	r3, [pc, #572]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009fc8:	4b8d      	ldr	r3, [pc, #564]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a8a      	ldr	r2, [pc, #552]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	7cda      	ldrb	r2, [r3, #19]
 8009fdc:	4b88      	ldr	r3, [pc, #544]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	089b      	lsrs	r3, r3, #2
 8009fe8:	4a85      	ldr	r2, [pc, #532]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009fea:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	4b82      	ldr	r3, [pc, #520]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009ff8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009ffa:	4b81      	ldr	r3, [pc, #516]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	7c9b      	ldrb	r3, [r3, #18]
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	b2da      	uxtb	r2, r3
 800a008:	4b7d      	ldr	r3, [pc, #500]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a00a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a00c:	4b7c      	ldr	r3, [pc, #496]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a00e:	2200      	movs	r2, #0
 800a010:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	7d9b      	ldrb	r3, [r3, #22]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d003      	beq.n	800a022 <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7d1b      	ldrb	r3, [r3, #20]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d12b      	bne.n	800a07a <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	7d5b      	ldrb	r3, [r3, #21]
 800a026:	2bf1      	cmp	r3, #241	@ 0xf1
 800a028:	d00a      	beq.n	800a040 <RadioSetTxGenericConfig+0x128>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	7d5b      	ldrb	r3, [r3, #21]
 800a02e:	2bf2      	cmp	r3, #242	@ 0xf2
 800a030:	d006      	beq.n	800a040 <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	7d5b      	ldrb	r3, [r3, #21]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d002      	beq.n	800a040 <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	e199      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800a044:	2301      	movs	r3, #1
 800a046:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a04a:	4b6e      	ldr	r3, [pc, #440]	@ (800a204 <RadioSetTxGenericConfig+0x2ec>)
 800a04c:	6819      	ldr	r1, [r3, #0]
 800a04e:	f107 0320 	add.w	r3, r7, #32
 800a052:	4a6d      	ldr	r2, [pc, #436]	@ (800a208 <RadioSetTxGenericConfig+0x2f0>)
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fbbb 	bl	800b7d0 <RFW_Init>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 800a060:	f04f 33ff 	mov.w	r3, #4294967295
 800a064:	e186      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a066:	4b66      	ldr	r3, [pc, #408]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a068:	2200      	movs	r2, #0
 800a06a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a06c:	4b64      	ldr	r3, [pc, #400]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a06e:	2201      	movs	r2, #1
 800a070:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a072:	4b63      	ldr	r3, [pc, #396]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a074:	2200      	movs	r2, #0
 800a076:	755a      	strb	r2, [r3, #21]
        {
 800a078:	e00b      	b.n	800a092 <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	7d5a      	ldrb	r2, [r3, #21]
 800a07e:	4b60      	ldr	r3, [pc, #384]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a080:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	7d9a      	ldrb	r2, [r3, #22]
 800a086:	4b5e      	ldr	r3, [pc, #376]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a088:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	7d1a      	ldrb	r2, [r3, #20]
 800a08e:	4b5c      	ldr	r3, [pc, #368]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a090:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a092:	f7ff f8c4 	bl	800921e <RadioStandby>
        RadioSetModem( radio_modem );
 800a096:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fa5e 	bl	800855c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a0a0:	485a      	ldr	r0, [pc, #360]	@ (800a20c <RadioSetTxGenericConfig+0x2f4>)
 800a0a2:	f000 fe8d 	bl	800adc0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a0a6:	485a      	ldr	r0, [pc, #360]	@ (800a210 <RadioSetTxGenericConfig+0x2f8>)
 800a0a8:	f000 ff58 	bl	800af5c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a0ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fa18 	bl	800a4e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	8a1b      	ldrh	r3, [r3, #16]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fa62 	bl	800a584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	899b      	ldrh	r3, [r3, #12]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fa3d 	bl	800a544 <SUBGRF_SetCrcPolynomial>
        break;
 800a0ca:	e13f      	b.n	800a34c <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d102      	bne.n	800a0da <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d8:	e14c      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	7c9b      	ldrb	r3, [r3, #18]
 800a0de:	2b08      	cmp	r3, #8
 800a0e0:	d902      	bls.n	800a0e8 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 800a0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e6:	e145      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6899      	ldr	r1, [r3, #8]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	7c9b      	ldrb	r3, [r3, #18]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f002 fa04 	bl	800c504 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800a0fc:	4b40      	ldr	r3, [pc, #256]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a3d      	ldr	r2, [pc, #244]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a10a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	7cda      	ldrb	r2, [r3, #19]
 800a110:	4b3b      	ldr	r3, [pc, #236]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a112:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	4a39      	ldr	r2, [pc, #228]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a11c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800a11e:	4b38      	ldr	r3, [pc, #224]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a120:	2200      	movs	r2, #0
 800a122:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	4b34      	ldr	r3, [pc, #208]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a130:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800a132:	4b33      	ldr	r3, [pc, #204]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a134:	2204      	movs	r2, #4
 800a136:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	7c9b      	ldrb	r3, [r3, #18]
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	4b2f      	ldr	r3, [pc, #188]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a142:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800a144:	4b2e      	ldr	r3, [pc, #184]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a146:	2200      	movs	r2, #0
 800a148:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	7d9b      	ldrb	r3, [r3, #22]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d003      	beq.n	800a15a <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	7d1b      	ldrb	r3, [r3, #20]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d12a      	bne.n	800a1b0 <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	7d5b      	ldrb	r3, [r3, #21]
 800a15e:	2bf1      	cmp	r3, #241	@ 0xf1
 800a160:	d00a      	beq.n	800a178 <RadioSetTxGenericConfig+0x260>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	7d5b      	ldrb	r3, [r3, #21]
 800a166:	2bf2      	cmp	r3, #242	@ 0xf2
 800a168:	d006      	beq.n	800a178 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	7d5b      	ldrb	r3, [r3, #21]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d002      	beq.n	800a178 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 800a172:	f04f 33ff 	mov.w	r3, #4294967295
 800a176:	e0fd      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800a178:	2301      	movs	r3, #1
 800a17a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800a180:	4b20      	ldr	r3, [pc, #128]	@ (800a204 <RadioSetTxGenericConfig+0x2ec>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	f107 0314 	add.w	r3, r7, #20
 800a188:	4a1f      	ldr	r2, [pc, #124]	@ (800a208 <RadioSetTxGenericConfig+0x2f0>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 fb20 	bl	800b7d0 <RFW_Init>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e0eb      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800a19c:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800a1a2:	4b17      	ldr	r3, [pc, #92]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800a1a8:	4b15      	ldr	r3, [pc, #84]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	755a      	strb	r2, [r3, #21]
        {
 800a1ae:	e00b      	b.n	800a1c8 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	7d5a      	ldrb	r2, [r3, #21]
 800a1b4:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a1b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	7d9a      	ldrb	r2, [r3, #22]
 800a1bc:	4b10      	ldr	r3, [pc, #64]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a1be:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	7d1a      	ldrb	r2, [r3, #20]
 800a1c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a200 <RadioSetTxGenericConfig+0x2e8>)
 800a1c6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800a1c8:	f7ff f829 	bl	800921e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f7fe f9c5 	bl	800855c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a1d2:	480e      	ldr	r0, [pc, #56]	@ (800a20c <RadioSetTxGenericConfig+0x2f4>)
 800a1d4:	f000 fdf4 	bl	800adc0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a1d8:	480d      	ldr	r0, [pc, #52]	@ (800a210 <RadioSetTxGenericConfig+0x2f8>)
 800a1da:	f000 febf 	bl	800af5c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800a1de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 f97f 	bl	800a4e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	8a1b      	ldrh	r3, [r3, #16]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f9c9 	bl	800a584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	899b      	ldrh	r3, [r3, #12]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f9a4 	bl	800a544 <SUBGRF_SetCrcPolynomial>
        break;
 800a1fc:	e0a6      	b.n	800a34c <RadioSetTxGenericConfig+0x434>
 800a1fe:	bf00      	nop
 800a200:	2000041c 	.word	0x2000041c
 800a204:	20000418 	.word	0x20000418
 800a208:	20000478 	.word	0x20000478
 800a20c:	20000454 	.word	0x20000454
 800a210:	2000042a 	.word	0x2000042a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800a214:	4b59      	ldr	r3, [pc, #356]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	4b56      	ldr	r3, [pc, #344]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	785a      	ldrb	r2, [r3, #1]
 800a22a:	4b54      	ldr	r3, [pc, #336]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a22c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	789a      	ldrb	r2, [r3, #2]
 800a234:	4b51      	ldr	r3, [pc, #324]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a236:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d010      	beq.n	800a264 <RadioSetTxGenericConfig+0x34c>
 800a242:	2b02      	cmp	r3, #2
 800a244:	dc20      	bgt.n	800a288 <RadioSetTxGenericConfig+0x370>
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <RadioSetTxGenericConfig+0x338>
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d005      	beq.n	800a25a <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800a24e:	e01b      	b.n	800a288 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a250:	4b4a      	ldr	r3, [pc, #296]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a258:	e017      	b.n	800a28a <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a25a:	4b48      	ldr	r3, [pc, #288]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a262:	e012      	b.n	800a28a <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b0b      	cmp	r3, #11
 800a26a:	d003      	beq.n	800a274 <RadioSetTxGenericConfig+0x35c>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b0c      	cmp	r3, #12
 800a272:	d104      	bne.n	800a27e <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800a274:	4b41      	ldr	r3, [pc, #260]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a27c:	e005      	b.n	800a28a <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800a27e:	4b3f      	ldr	r3, [pc, #252]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800a286:	e000      	b.n	800a28a <RadioSetTxGenericConfig+0x372>
            break;
 800a288:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800a28a:	4b3c      	ldr	r3, [pc, #240]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	889a      	ldrh	r2, [r3, #4]
 800a294:	4b39      	ldr	r3, [pc, #228]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a296:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	799a      	ldrb	r2, [r3, #6]
 800a29c:	4b37      	ldr	r3, [pc, #220]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a29e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	79da      	ldrb	r2, [r3, #7]
 800a2a4:	4b35      	ldr	r3, [pc, #212]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a2a6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	7a1a      	ldrb	r2, [r3, #8]
 800a2ae:	4b33      	ldr	r3, [pc, #204]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a2b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 800a2b4:	f7fe ffb3 	bl	800921e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	f7fe f94f 	bl	800855c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a2be:	4830      	ldr	r0, [pc, #192]	@ (800a380 <RadioSetTxGenericConfig+0x468>)
 800a2c0:	f000 fd7e 	bl	800adc0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a2c4:	482f      	ldr	r0, [pc, #188]	@ (800a384 <RadioSetTxGenericConfig+0x46c>)
 800a2c6:	f000 fe49 	bl	800af5c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a2ca:	4b2c      	ldr	r3, [pc, #176]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a2cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2d0:	2b06      	cmp	r3, #6
 800a2d2:	d10d      	bne.n	800a2f0 <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a2d4:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2d8:	f000 ffa8 	bl	800b22c <SUBGRF_ReadRegister>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f023 0304 	bic.w	r3, r3, #4
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2ea:	f000 ff7d 	bl	800b1e8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a2ee:	e02d      	b.n	800a34c <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a2f0:	f640 0089 	movw	r0, #2185	@ 0x889
 800a2f4:	f000 ff9a 	bl	800b22c <SUBGRF_ReadRegister>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	f043 0304 	orr.w	r3, r3, #4
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	4619      	mov	r1, r3
 800a302:	f640 0089 	movw	r0, #2185	@ 0x889
 800a306:	f000 ff6f 	bl	800b1e8 <SUBGRF_WriteRegister>
        break;
 800a30a:	e01f      	b.n	800a34c <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <RadioSetTxGenericConfig+0x406>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a31c:	d902      	bls.n	800a324 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295
 800a322:	e027      	b.n	800a374 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 800a324:	2003      	movs	r0, #3
 800a326:	f7fe f919 	bl	800855c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a32a:	4b14      	ldr	r3, [pc, #80]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a32c:	2202      	movs	r2, #2
 800a32e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a11      	ldr	r2, [pc, #68]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a338:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a33a:	4b10      	ldr	r3, [pc, #64]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a33c:	2216      	movs	r2, #22
 800a33e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a342:	480f      	ldr	r0, [pc, #60]	@ (800a380 <RadioSetTxGenericConfig+0x468>)
 800a344:	f000 fd3c 	bl	800adc0 <SUBGRF_SetModulationParams>
        break;
 800a348:	e000      	b.n	800a34c <RadioSetTxGenericConfig+0x434>
    default:
        break;
 800a34a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a350:	4618      	mov	r0, r3
 800a352:	f001 f87f 	bl	800b454 <SUBGRF_SetRfTxPower>
 800a356:	4603      	mov	r3, r0
 800a358:	461a      	mov	r2, r3
 800a35a:	4b08      	ldr	r3, [pc, #32]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a35c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a360:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a362:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a366:	4618      	mov	r0, r3
 800a368:	f001 fa53 	bl	800b812 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a36c:	4a03      	ldr	r2, [pc, #12]	@ (800a37c <RadioSetTxGenericConfig+0x464>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6053      	str	r3, [r2, #4]
    return 0;
 800a372:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a374:	4618      	mov	r0, r3
 800a376:	3738      	adds	r7, #56	@ 0x38
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	2000041c 	.word	0x2000041c
 800a380:	20000454 	.word	0x20000454
 800a384:	2000042a 	.word	0x2000042a

0800a388 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a390:	2301      	movs	r3, #1
 800a392:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a394:	7bfb      	ldrb	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr

0800a3a0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a3aa:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc80      	pop	{r7}
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a3c6:	4a1d      	ldr	r2, [pc, #116]	@ (800a43c <SUBGRF_Init+0x84>)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a3cc:	f7f7 facc 	bl	8001968 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a3d0:	2002      	movs	r0, #2
 800a3d2:	f001 f91b 	bl	800b60c <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a440 <SUBGRF_Init+0x88>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f000 f97f 	bl	800a6e0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a3e2:	f002 f864 	bl	800c4ae <RBI_IsTCXO>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d10e      	bne.n	800a40a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a3ec:	2140      	movs	r1, #64	@ 0x40
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	f000 fb8a 	bl	800ab08 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	f640 1011 	movw	r0, #2321	@ 0x911
 800a3fa:	f000 fef5 	bl	800b1e8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a3fe:	237f      	movs	r3, #127	@ 0x7f
 800a400:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a402:	7b38      	ldrb	r0, [r7, #12]
 800a404:	f000 fa8d 	bl	800a922 <SUBGRF_Calibrate>
 800a408:	e009      	b.n	800a41e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a40a:	2120      	movs	r1, #32
 800a40c:	f640 1011 	movw	r0, #2321	@ 0x911
 800a410:	f000 feea 	bl	800b1e8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a414:	2120      	movs	r1, #32
 800a416:	f640 1012 	movw	r0, #2322	@ 0x912
 800a41a:	f000 fee5 	bl	800b1e8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a41e:	210e      	movs	r1, #14
 800a420:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a424:	f000 fee0 	bl	800b1e8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a428:	f002 f80c 	bl	800c444 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <SUBGRF_Init+0x8c>)
 800a42e:	2201      	movs	r2, #1
 800a430:	701a      	strb	r2, [r3, #0]
}
 800a432:	bf00      	nop
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	200004b4 	.word	0x200004b4
 800a440:	200004b0 	.word	0x200004b0
 800a444:	200004a8 	.word	0x200004a8

0800a448 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a44c:	4b02      	ldr	r3, [pc, #8]	@ (800a458 <SUBGRF_GetOperatingMode+0x10>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
}
 800a450:	4618      	mov	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	bc80      	pop	{r7}
 800a456:	4770      	bx	lr
 800a458:	200004a8 	.word	0x200004a8

0800a45c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	2000      	movs	r0, #0
 800a470:	f000 ff40 	bl	800b2f4 <SUBGRF_WriteBuffer>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a48e:	f107 0317 	add.w	r3, r7, #23
 800a492:	4619      	mov	r1, r3
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f000 fe29 	bl	800b0ec <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	79fa      	ldrb	r2, [r7, #7]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d201      	bcs.n	800a4a8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e007      	b.n	800a4b8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a4a8:	7df8      	ldrb	r0, [r7, #23]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	68f9      	ldr	r1, [r7, #12]
 800a4b2:	f000 ff41 	bl	800b338 <SUBGRF_ReadBuffer>

    return 0;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3718      	adds	r7, #24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	607a      	str	r2, [r7, #4]
 800a4cc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f7ff ffc2 	bl	800a45c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f91d 	bl	800a718 <SUBGRF_SetTx>
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	6879      	ldr	r1, [r7, #4]
 800a4f2:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800a4f6:	f000 feb9 	bl	800b26c <SUBGRF_WriteRegisters>
    return 0;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	0a1b      	lsrs	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	b2db      	uxtb	r3, r3
 800a516:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a518:	88fb      	ldrh	r3, [r7, #6]
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a51e:	f000 fb77 	bl	800ac10 <SUBGRF_GetPacketType>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d108      	bne.n	800a53a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a528:	f107 030c 	add.w	r3, r7, #12
 800a52c:	2202      	movs	r2, #2
 800a52e:	4619      	mov	r1, r3
 800a530:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800a534:	f000 fe9a 	bl	800b26c <SUBGRF_WriteRegisters>
            break;
 800a538:	e000      	b.n	800a53c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a53a:	bf00      	nop
    }
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	0a1b      	lsrs	r3, r3, #8
 800a552:	b29b      	uxth	r3, r3
 800a554:	b2db      	uxtb	r3, r3
 800a556:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a55e:	f000 fb57 	bl	800ac10 <SUBGRF_GetPacketType>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d108      	bne.n	800a57a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a568:	f107 030c 	add.w	r3, r7, #12
 800a56c:	2202      	movs	r2, #2
 800a56e:	4619      	mov	r1, r3
 800a570:	f240 60be 	movw	r0, #1726	@ 0x6be
 800a574:	f000 fe7a 	bl	800b26c <SUBGRF_WriteRegisters>
            break;
 800a578:	e000      	b.n	800a57c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a57a:	bf00      	nop
    }
}
 800a57c:	bf00      	nop
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a592:	f000 fb3d 	bl	800ac10 <SUBGRF_GetPacketType>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d121      	bne.n	800a5e0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a59c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a5a0:	f000 fe44 	bl	800b22c <SUBGRF_ReadRegister>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a5ac:	88fb      	ldrh	r3, [r7, #6]
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	b25b      	sxtb	r3, r3
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	b25a      	sxtb	r2, r3
 800a5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	b25b      	sxtb	r3, r3
 800a5c2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a5cc:	f000 fe0c 	bl	800b1e8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a5d0:	88fb      	ldrh	r3, [r7, #6]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800a5da:	f000 fe05 	bl	800b1e8 <SUBGRF_WriteRegister>
            break;
 800a5de:	e000      	b.n	800a5e2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a5e0:	bf00      	nop
    }
}
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a5fc:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a600:	f000 fe14 	bl	800b22c <SUBGRF_ReadRegister>
 800a604:	4603      	mov	r3, r0
 800a606:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a608:	79fb      	ldrb	r3, [r7, #7]
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a616:	f000 fde7 	bl	800b1e8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a61a:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a61e:	f000 fe05 	bl	800b22c <SUBGRF_ReadRegister>
 800a622:	4603      	mov	r3, r0
 800a624:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a626:	79bb      	ldrb	r3, [r7, #6]
 800a628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	4619      	mov	r1, r3
 800a630:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a634:	f000 fdd8 	bl	800b1e8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a638:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a63c:	f000 f88c 	bl	800a758 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a640:	463b      	mov	r3, r7
 800a642:	2204      	movs	r2, #4
 800a644:	4619      	mov	r1, r3
 800a646:	f640 0019 	movw	r0, #2073	@ 0x819
 800a64a:	f000 fe31 	bl	800b2b0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a64e:	2000      	movs	r0, #0
 800a650:	f000 f846 	bl	800a6e0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	4619      	mov	r1, r3
 800a658:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800a65c:	f000 fdc4 	bl	800b1e8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a660:	79bb      	ldrb	r3, [r7, #6]
 800a662:	4619      	mov	r1, r3
 800a664:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800a668:	f000 fdbe 	bl	800b1e8 <SUBGRF_WriteRegister>

    return number;
 800a66c:	683b      	ldr	r3, [r7, #0]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a680:	2000      	movs	r0, #0
 800a682:	f001 feea 	bl	800c45a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a686:	2002      	movs	r0, #2
 800a688:	f000 ffc0 	bl	800b60c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a68c:	793b      	ldrb	r3, [r7, #4]
 800a68e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	b25b      	sxtb	r3, r3
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a69a:	793b      	ldrb	r3, [r7, #4]
 800a69c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a6a0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a6a2:	b25b      	sxtb	r3, r3
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a6ac:	793b      	ldrb	r3, [r7, #4]
 800a6ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a6bc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a6be:	f107 030f 	add.w	r3, r7, #15
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	2084      	movs	r0, #132	@ 0x84
 800a6c8:	f000 fe58 	bl	800b37c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a6cc:	4b03      	ldr	r3, [pc, #12]	@ (800a6dc <SUBGRF_SetSleep+0x64>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	200004a8 	.word	0x200004a8

0800a6e0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a6ea:	1dfb      	adds	r3, r7, #7
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	2080      	movs	r0, #128	@ 0x80
 800a6f2:	f000 fe43 	bl	800b37c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d103      	bne.n	800a704 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a6fc:	4b05      	ldr	r3, [pc, #20]	@ (800a714 <SUBGRF_SetStandby+0x34>)
 800a6fe:	2201      	movs	r2, #1
 800a700:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a702:	e002      	b.n	800a70a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a704:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <SUBGRF_SetStandby+0x34>)
 800a706:	2202      	movs	r2, #2
 800a708:	701a      	strb	r2, [r3, #0]
}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200004a8 	.word	0x200004a8

0800a718 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a720:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <SUBGRF_SetTx+0x3c>)
 800a722:	2204      	movs	r2, #4
 800a724:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	0c1b      	lsrs	r3, r3, #16
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	b2db      	uxtb	r3, r3
 800a734:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a73c:	f107 030c 	add.w	r3, r7, #12
 800a740:	2203      	movs	r2, #3
 800a742:	4619      	mov	r1, r3
 800a744:	2083      	movs	r0, #131	@ 0x83
 800a746:	f000 fe19 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	200004a8 	.word	0x200004a8

0800a758 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a760:	4b0c      	ldr	r3, [pc, #48]	@ (800a794 <SUBGRF_SetRx+0x3c>)
 800a762:	2205      	movs	r2, #5
 800a764:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	0c1b      	lsrs	r3, r3, #16
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	0a1b      	lsrs	r3, r3, #8
 800a772:	b2db      	uxtb	r3, r3
 800a774:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a77c:	f107 030c 	add.w	r3, r7, #12
 800a780:	2203      	movs	r2, #3
 800a782:	4619      	mov	r1, r3
 800a784:	2082      	movs	r0, #130	@ 0x82
 800a786:	f000 fdf9 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a78a:	bf00      	nop
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	200004a8 	.word	0x200004a8

0800a798 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a7a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7dc <SUBGRF_SetRxBoosted+0x44>)
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a7a6:	2197      	movs	r1, #151	@ 0x97
 800a7a8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800a7ac:	f000 fd1c 	bl	800b1e8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a7c6:	f107 030c 	add.w	r3, r7, #12
 800a7ca:	2203      	movs	r2, #3
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	2082      	movs	r0, #130	@ 0x82
 800a7d0:	f000 fdd4 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a7d4:	bf00      	nop
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200004a8 	.word	0x200004a8

0800a7e0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	0a1b      	lsrs	r3, r3, #8
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	b2db      	uxtb	r3, r3
 800a806:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	0a1b      	lsrs	r3, r3, #8
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a816:	f107 0308 	add.w	r3, r7, #8
 800a81a:	2206      	movs	r2, #6
 800a81c:	4619      	mov	r1, r3
 800a81e:	2094      	movs	r0, #148	@ 0x94
 800a820:	f000 fdac 	bl	800b37c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a824:	4b03      	ldr	r3, [pc, #12]	@ (800a834 <SUBGRF_SetRxDutyCycle+0x54>)
 800a826:	2206      	movs	r2, #6
 800a828:	701a      	strb	r2, [r3, #0]
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200004a8 	.word	0x200004a8

0800a838 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a83c:	2200      	movs	r2, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	20c5      	movs	r0, #197	@ 0xc5
 800a842:	f000 fd9b 	bl	800b37c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a846:	4b02      	ldr	r3, [pc, #8]	@ (800a850 <SUBGRF_SetCad+0x18>)
 800a848:	2207      	movs	r2, #7
 800a84a:	701a      	strb	r2, [r3, #0]
}
 800a84c:	bf00      	nop
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	200004a8 	.word	0x200004a8

0800a854 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a858:	2200      	movs	r2, #0
 800a85a:	2100      	movs	r1, #0
 800a85c:	20d1      	movs	r0, #209	@ 0xd1
 800a85e:	f000 fd8d 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a862:	bf00      	nop
 800a864:	bd80      	pop	{r7, pc}

0800a866 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a866:	b580      	push	{r7, lr}
 800a868:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a86a:	2200      	movs	r2, #0
 800a86c:	2100      	movs	r1, #0
 800a86e:	20d2      	movs	r0, #210	@ 0xd2
 800a870:	f000 fd84 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a874:	bf00      	nop
 800a876:	bd80      	pop	{r7, pc}

0800a878 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a882:	1dfb      	adds	r3, r7, #7
 800a884:	2201      	movs	r2, #1
 800a886:	4619      	mov	r1, r3
 800a888:	209f      	movs	r0, #159	@ 0x9f
 800a88a:	f000 fd77 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	4603      	mov	r3, r0
 800a89e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a8a0:	1dfb      	adds	r3, r7, #7
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	20a0      	movs	r0, #160	@ 0xa0
 800a8a8:	f000 fd68 	bl	800b37c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8b0:	d91c      	bls.n	800a8ec <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a8c0:	e005      	b.n	800a8ce <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	089b      	lsrs	r3, r3, #2
 800a8c6:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
 800a8d0:	2b1f      	cmp	r3, #31
 800a8d2:	d8f6      	bhi.n	800a8c2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a8d4:	7bfb      	ldrb	r3, [r7, #15]
 800a8d6:	00db      	lsls	r3, r3, #3
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	4413      	add	r3, r2
 800a8de:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a8e0:	7b7b      	ldrb	r3, [r7, #13]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f240 7006 	movw	r0, #1798	@ 0x706
 800a8e8:	f000 fc7e 	bl	800b1e8 <SUBGRF_WriteRegister>
    }
}
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a8fa:	f001 fde3 	bl	800c4c4 <RBI_IsDCDC>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b01      	cmp	r3, #1
 800a902:	d102      	bne.n	800a90a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a904:	2301      	movs	r3, #1
 800a906:	71fb      	strb	r3, [r7, #7]
 800a908:	e001      	b.n	800a90e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a90a:	2300      	movs	r3, #0
 800a90c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a90e:	1dfb      	adds	r3, r7, #7
 800a910:	2201      	movs	r2, #1
 800a912:	4619      	mov	r1, r3
 800a914:	2096      	movs	r0, #150	@ 0x96
 800a916:	f000 fd31 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a92a:	793b      	ldrb	r3, [r7, #4]
 800a92c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a930:	b2db      	uxtb	r3, r3
 800a932:	b25b      	sxtb	r3, r3
 800a934:	019b      	lsls	r3, r3, #6
 800a936:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a938:	793b      	ldrb	r3, [r7, #4]
 800a93a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a93e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a940:	b25b      	sxtb	r3, r3
 800a942:	015b      	lsls	r3, r3, #5
 800a944:	b25b      	sxtb	r3, r3
 800a946:	4313      	orrs	r3, r2
 800a948:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a94a:	793b      	ldrb	r3, [r7, #4]
 800a94c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a950:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a952:	b25b      	sxtb	r3, r3
 800a954:	011b      	lsls	r3, r3, #4
 800a956:	b25b      	sxtb	r3, r3
 800a958:	4313      	orrs	r3, r2
 800a95a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a95c:	793b      	ldrb	r3, [r7, #4]
 800a95e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a962:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a964:	b25b      	sxtb	r3, r3
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a96e:	793b      	ldrb	r3, [r7, #4]
 800a970:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a974:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a976:	b25b      	sxtb	r3, r3
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a980:	793b      	ldrb	r3, [r7, #4]
 800a982:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a986:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a988:	b25b      	sxtb	r3, r3
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	b25b      	sxtb	r3, r3
 800a98e:	4313      	orrs	r3, r2
 800a990:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a992:	793b      	ldrb	r3, [r7, #4]
 800a994:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a99c:	4313      	orrs	r3, r2
 800a99e:	b25b      	sxtb	r3, r3
 800a9a0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a9a2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a9a4:	f107 030f 	add.w	r3, r7, #15
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	2089      	movs	r0, #137	@ 0x89
 800a9ae:	f000 fce5 	bl	800b37c <SUBGRF_WriteCommand>
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a1d      	ldr	r2, [pc, #116]	@ (800aa3c <SUBGRF_CalibrateImage+0x80>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d904      	bls.n	800a9d6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a9cc:	23e1      	movs	r3, #225	@ 0xe1
 800a9ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a9d0:	23e9      	movs	r3, #233	@ 0xe9
 800a9d2:	737b      	strb	r3, [r7, #13]
 800a9d4:	e027      	b.n	800aa26 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a19      	ldr	r2, [pc, #100]	@ (800aa40 <SUBGRF_CalibrateImage+0x84>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d904      	bls.n	800a9e8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a9de:	23d7      	movs	r3, #215	@ 0xd7
 800a9e0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a9e2:	23db      	movs	r3, #219	@ 0xdb
 800a9e4:	737b      	strb	r3, [r7, #13]
 800a9e6:	e01e      	b.n	800aa26 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4a16      	ldr	r2, [pc, #88]	@ (800aa44 <SUBGRF_CalibrateImage+0x88>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d904      	bls.n	800a9fa <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a9f0:	23c1      	movs	r3, #193	@ 0xc1
 800a9f2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a9f4:	23c5      	movs	r3, #197	@ 0xc5
 800a9f6:	737b      	strb	r3, [r7, #13]
 800a9f8:	e015      	b.n	800aa26 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a12      	ldr	r2, [pc, #72]	@ (800aa48 <SUBGRF_CalibrateImage+0x8c>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d904      	bls.n	800aa0c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800aa02:	2375      	movs	r3, #117	@ 0x75
 800aa04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800aa06:	2381      	movs	r3, #129	@ 0x81
 800aa08:	737b      	strb	r3, [r7, #13]
 800aa0a:	e00c      	b.n	800aa26 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a0f      	ldr	r2, [pc, #60]	@ (800aa4c <SUBGRF_CalibrateImage+0x90>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d904      	bls.n	800aa1e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800aa14:	236b      	movs	r3, #107	@ 0x6b
 800aa16:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800aa18:	236f      	movs	r3, #111	@ 0x6f
 800aa1a:	737b      	strb	r3, [r7, #13]
 800aa1c:	e003      	b.n	800aa26 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800aa1e:	2329      	movs	r3, #41	@ 0x29
 800aa20:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800aa22:	232b      	movs	r3, #43	@ 0x2b
 800aa24:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	2098      	movs	r0, #152	@ 0x98
 800aa30:	f000 fca4 	bl	800b37c <SUBGRF_WriteCommand>
}
 800aa34:	bf00      	nop
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	35a4e900 	.word	0x35a4e900
 800aa40:	32a9f880 	.word	0x32a9f880
 800aa44:	2de54480 	.word	0x2de54480
 800aa48:	1b6b0b00 	.word	0x1b6b0b00
 800aa4c:	1954fc40 	.word	0x1954fc40

0800aa50 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800aa50:	b590      	push	{r4, r7, lr}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4623      	mov	r3, r4
 800aa60:	71fb      	strb	r3, [r7, #7]
 800aa62:	4603      	mov	r3, r0
 800aa64:	71bb      	strb	r3, [r7, #6]
 800aa66:	460b      	mov	r3, r1
 800aa68:	717b      	strb	r3, [r7, #5]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800aa72:	79bb      	ldrb	r3, [r7, #6]
 800aa74:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800aa76:	797b      	ldrb	r3, [r7, #5]
 800aa78:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800aa7a:	793b      	ldrb	r3, [r7, #4]
 800aa7c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800aa7e:	f107 030c 	add.w	r3, r7, #12
 800aa82:	2204      	movs	r2, #4
 800aa84:	4619      	mov	r1, r3
 800aa86:	2095      	movs	r0, #149	@ 0x95
 800aa88:	f000 fc78 	bl	800b37c <SUBGRF_WriteCommand>
}
 800aa8c:	bf00      	nop
 800aa8e:	3714      	adds	r7, #20
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd90      	pop	{r4, r7, pc}

0800aa94 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800aa94:	b590      	push	{r4, r7, lr}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4623      	mov	r3, r4
 800aaa4:	80fb      	strh	r3, [r7, #6]
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	80bb      	strh	r3, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	807b      	strh	r3, [r7, #2]
 800aaae:	4613      	mov	r3, r2
 800aab0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	0a1b      	lsrs	r3, r3, #8
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800aabc:	88fb      	ldrh	r3, [r7, #6]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800aac2:	88bb      	ldrh	r3, [r7, #4]
 800aac4:	0a1b      	lsrs	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800aacc:	88bb      	ldrh	r3, [r7, #4]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800aad2:	887b      	ldrh	r3, [r7, #2]
 800aad4:	0a1b      	lsrs	r3, r3, #8
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800aadc:	887b      	ldrh	r3, [r7, #2]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800aae2:	883b      	ldrh	r3, [r7, #0]
 800aae4:	0a1b      	lsrs	r3, r3, #8
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800aaec:	883b      	ldrh	r3, [r7, #0]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800aaf2:	f107 0308 	add.w	r3, r7, #8
 800aaf6:	2208      	movs	r2, #8
 800aaf8:	4619      	mov	r1, r3
 800aafa:	2008      	movs	r0, #8
 800aafc:	f000 fc3e 	bl	800b37c <SUBGRF_WriteCommand>
}
 800ab00:	bf00      	nop
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd90      	pop	{r4, r7, pc}

0800ab08 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	0a1b      	lsrs	r3, r3, #8
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ab34:	f107 030c 	add.w	r3, r7, #12
 800ab38:	2204      	movs	r2, #4
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	2097      	movs	r0, #151	@ 0x97
 800ab3e:	f000 fc1d 	bl	800b37c <SUBGRF_WriteCommand>
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800ab4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800ab5a:	4b1d      	ldr	r3, [pc, #116]	@ (800abd0 <SUBGRF_SetRfFrequency+0x84>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	f083 0301 	eor.w	r3, r3, #1
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d005      	beq.n	800ab74 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff ff27 	bl	800a9bc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800ab6e:	4b18      	ldr	r3, [pc, #96]	@ (800abd0 <SUBGRF_SetRfFrequency+0x84>)
 800ab70:	2201      	movs	r2, #1
 800ab72:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	461c      	mov	r4, r3
 800ab7a:	4615      	mov	r5, r2
 800ab7c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ab80:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ab84:	4a13      	ldr	r2, [pc, #76]	@ (800abd4 <SUBGRF_SetRfFrequency+0x88>)
 800ab86:	f04f 0300 	mov.w	r3, #0
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f6 f929 	bl	8000de4 <__aeabi_uldivmod>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	4613      	mov	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	0e1b      	lsrs	r3, r3, #24
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	0c1b      	lsrs	r3, r3, #16
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	0a1b      	lsrs	r3, r3, #8
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800abb8:	f107 0308 	add.w	r3, r7, #8
 800abbc:	2204      	movs	r2, #4
 800abbe:	4619      	mov	r1, r3
 800abc0:	2086      	movs	r0, #134	@ 0x86
 800abc2:	f000 fbdb 	bl	800b37c <SUBGRF_WriteCommand>
}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800abd0:	200004b0 	.word	0x200004b0
 800abd4:	01e84800 	.word	0x01e84800

0800abd8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	4603      	mov	r3, r0
 800abe0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800abe2:	79fa      	ldrb	r2, [r7, #7]
 800abe4:	4b09      	ldr	r3, [pc, #36]	@ (800ac0c <SUBGRF_SetPacketType+0x34>)
 800abe6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800abee:	2100      	movs	r1, #0
 800abf0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800abf4:	f000 faf8 	bl	800b1e8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800abf8:	1dfb      	adds	r3, r7, #7
 800abfa:	2201      	movs	r2, #1
 800abfc:	4619      	mov	r1, r3
 800abfe:	208a      	movs	r0, #138	@ 0x8a
 800ac00:	f000 fbbc 	bl	800b37c <SUBGRF_WriteCommand>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200004a9 	.word	0x200004a9

0800ac10 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
    return PacketType;
 800ac14:	4b02      	ldr	r3, [pc, #8]	@ (800ac20 <SUBGRF_GetPacketType+0x10>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr
 800ac20:	200004a9 	.word	0x200004a9

0800ac24 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	71bb      	strb	r3, [r7, #6]
 800ac32:	4613      	mov	r3, r2
 800ac34:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d149      	bne.n	800acd0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f001 fc4c 	bl	800c4da <RBI_GetRFOMaxPowerConfig>
 800ac42:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800ac44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	da01      	bge.n	800ac52 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b0e      	cmp	r3, #14
 800ac56:	d10e      	bne.n	800ac76 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800ac58:	2301      	movs	r3, #1
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	2004      	movs	r0, #4
 800ac60:	f7ff fef6 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ac64:	79ba      	ldrb	r2, [r7, #6]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	330e      	adds	r3, #14
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	71bb      	strb	r3, [r7, #6]
 800ac74:	e01f      	b.n	800acb6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b0a      	cmp	r3, #10
 800ac7a:	d10e      	bne.n	800ac9a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	2201      	movs	r2, #1
 800ac80:	2100      	movs	r1, #0
 800ac82:	2001      	movs	r0, #1
 800ac84:	f7ff fee4 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800ac88:	79ba      	ldrb	r2, [r7, #6]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	330d      	adds	r3, #13
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	71bb      	strb	r3, [r7, #6]
 800ac98:	e00d      	b.n	800acb6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	2100      	movs	r1, #0
 800aca0:	2007      	movs	r0, #7
 800aca2:	f7ff fed5 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800aca6:	79ba      	ldrb	r2, [r7, #6]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	330e      	adds	r3, #14
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800acb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800acba:	f113 0f11 	cmn.w	r3, #17
 800acbe:	da01      	bge.n	800acc4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800acc0:	23ef      	movs	r3, #239	@ 0xef
 800acc2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800acc4:	2118      	movs	r1, #24
 800acc6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800acca:	f000 fa8d 	bl	800b1e8 <SUBGRF_WriteRegister>
 800acce:	e067      	b.n	800ada0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800acd0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800acd4:	f000 faaa 	bl	800b22c <SUBGRF_ReadRegister>
 800acd8:	4603      	mov	r3, r0
 800acda:	f043 031e 	orr.w	r3, r3, #30
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	4619      	mov	r1, r3
 800ace2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800ace6:	f000 fa7f 	bl	800b1e8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800acea:	2001      	movs	r0, #1
 800acec:	f001 fbf5 	bl	800c4da <RBI_GetRFOMaxPowerConfig>
 800acf0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800acf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	da01      	bge.n	800ad00 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b14      	cmp	r3, #20
 800ad04:	d10e      	bne.n	800ad24 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800ad06:	2301      	movs	r3, #1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2105      	movs	r1, #5
 800ad0c:	2003      	movs	r0, #3
 800ad0e:	f7ff fe9f 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad12:	79ba      	ldrb	r2, [r7, #6]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	3316      	adds	r3, #22
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	71bb      	strb	r3, [r7, #6]
 800ad22:	e031      	b.n	800ad88 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b11      	cmp	r3, #17
 800ad28:	d10e      	bne.n	800ad48 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2103      	movs	r1, #3
 800ad30:	2002      	movs	r0, #2
 800ad32:	f7ff fe8d 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad36:	79ba      	ldrb	r2, [r7, #6]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	3316      	adds	r3, #22
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	71bb      	strb	r3, [r7, #6]
 800ad46:	e01f      	b.n	800ad88 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b0e      	cmp	r3, #14
 800ad4c:	d10e      	bne.n	800ad6c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800ad4e:	2301      	movs	r3, #1
 800ad50:	2200      	movs	r2, #0
 800ad52:	2102      	movs	r1, #2
 800ad54:	2002      	movs	r0, #2
 800ad56:	f7ff fe7b 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800ad5a:	79ba      	ldrb	r2, [r7, #6]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	330e      	adds	r3, #14
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	71bb      	strb	r3, [r7, #6]
 800ad6a:	e00d      	b.n	800ad88 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2107      	movs	r1, #7
 800ad72:	2004      	movs	r0, #4
 800ad74:	f7ff fe6c 	bl	800aa50 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800ad78:	79ba      	ldrb	r2, [r7, #6]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	3316      	adds	r3, #22
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800ad88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad8c:	f113 0f09 	cmn.w	r3, #9
 800ad90:	da01      	bge.n	800ad96 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800ad92:	23f7      	movs	r3, #247	@ 0xf7
 800ad94:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800ad96:	2138      	movs	r1, #56	@ 0x38
 800ad98:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ad9c:	f000 fa24 	bl	800b1e8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ada0:	79bb      	ldrb	r3, [r7, #6]
 800ada2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800ada4:	797b      	ldrb	r3, [r7, #5]
 800ada6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800ada8:	f107 0308 	add.w	r3, r7, #8
 800adac:	2202      	movs	r2, #2
 800adae:	4619      	mov	r1, r3
 800adb0:	208e      	movs	r0, #142	@ 0x8e
 800adb2:	f000 fae3 	bl	800b37c <SUBGRF_WriteCommand>
}
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800adc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800adc4:	b086      	sub	sp, #24
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	4b5c      	ldr	r3, [pc, #368]	@ (800af50 <SUBGRF_SetModulationParams+0x190>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d004      	beq.n	800adee <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fef5 	bl	800abd8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	f200 80a5 	bhi.w	800af42 <SUBGRF_SetModulationParams+0x182>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <SUBGRF_SetModulationParams+0x40>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae11 	.word	0x0800ae11
 800ae04:	0800aed1 	.word	0x0800aed1
 800ae08:	0800ae93 	.word	0x0800ae93
 800ae0c:	0800aeff 	.word	0x0800aeff
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800ae10:	2308      	movs	r3, #8
 800ae12:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4a4e      	ldr	r2, [pc, #312]	@ (800af54 <SUBGRF_SetModulationParams+0x194>)
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7b1b      	ldrb	r3, [r3, #12]
 800ae3a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7b5b      	ldrb	r3, [r3, #13]
 800ae40:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	2200      	movs	r2, #0
 800ae48:	461c      	mov	r4, r3
 800ae4a:	4615      	mov	r5, r2
 800ae4c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ae50:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ae54:	4a40      	ldr	r2, [pc, #256]	@ (800af58 <SUBGRF_SetModulationParams+0x198>)
 800ae56:	f04f 0300 	mov.w	r3, #0
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	f7f5 ffc1 	bl	8000de4 <__aeabi_uldivmod>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4613      	mov	r3, r2
 800ae68:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ae80:	7cfb      	ldrb	r3, [r7, #19]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	f107 0308 	add.w	r3, r7, #8
 800ae88:	4619      	mov	r1, r3
 800ae8a:	208b      	movs	r0, #139	@ 0x8b
 800ae8c:	f000 fa76 	bl	800b37c <SUBGRF_WriteCommand>
        break;
 800ae90:	e058      	b.n	800af44 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 800ae92:	2304      	movs	r3, #4
 800ae94:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	4a2e      	ldr	r2, [pc, #184]	@ (800af54 <SUBGRF_SetModulationParams+0x194>)
 800ae9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aea0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	0c1b      	lsrs	r3, r3, #16
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	7d1b      	ldrb	r3, [r3, #20]
 800aebc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aebe:	7cfb      	ldrb	r3, [r7, #19]
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	f107 0308 	add.w	r3, r7, #8
 800aec6:	4619      	mov	r1, r3
 800aec8:	208b      	movs	r0, #139	@ 0x8b
 800aeca:	f000 fa57 	bl	800b37c <SUBGRF_WriteCommand>
        break;
 800aece:	e039      	b.n	800af44 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 800aed0:	2304      	movs	r3, #4
 800aed2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7e1b      	ldrb	r3, [r3, #24]
 800aed8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7e5b      	ldrb	r3, [r3, #25]
 800aede:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7e9b      	ldrb	r3, [r3, #26]
 800aee4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7edb      	ldrb	r3, [r3, #27]
 800aeea:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aeec:	7cfb      	ldrb	r3, [r7, #19]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	4619      	mov	r1, r3
 800aef6:	208b      	movs	r0, #139	@ 0x8b
 800aef8:	f000 fa40 	bl	800b37c <SUBGRF_WriteCommand>

        break;
 800aefc:	e022      	b.n	800af44 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 800aefe:	2305      	movs	r3, #5
 800af00:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4a13      	ldr	r2, [pc, #76]	@ (800af54 <SUBGRF_SetModulationParams+0x194>)
 800af08:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	0c1b      	lsrs	r3, r3, #16
 800af12:	b2db      	uxtb	r3, r3
 800af14:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	0a1b      	lsrs	r3, r3, #8
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	7b1b      	ldrb	r3, [r3, #12]
 800af28:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7b5b      	ldrb	r3, [r3, #13]
 800af2e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800af30:	7cfb      	ldrb	r3, [r7, #19]
 800af32:	b29a      	uxth	r2, r3
 800af34:	f107 0308 	add.w	r3, r7, #8
 800af38:	4619      	mov	r1, r3
 800af3a:	208b      	movs	r0, #139	@ 0x8b
 800af3c:	f000 fa1e 	bl	800b37c <SUBGRF_WriteCommand>
        break;
 800af40:	e000      	b.n	800af44 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 800af42:	bf00      	nop
    }
}
 800af44:	bf00      	nop
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800af4e:	bf00      	nop
 800af50:	200004a9 	.word	0x200004a9
 800af54:	3d090000 	.word	0x3d090000
 800af58:	01e84800 	.word	0x01e84800

0800af5c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800af68:	f107 030c 	add.w	r3, r7, #12
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	605a      	str	r2, [r3, #4]
 800af72:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	4b44      	ldr	r3, [pc, #272]	@ (800b08c <SUBGRF_SetPacketParams+0x130>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d004      	beq.n	800af8a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff fe27 	bl	800abd8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d878      	bhi.n	800b084 <SUBGRF_SetPacketParams+0x128>
 800af92:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <SUBGRF_SetPacketParams+0x3c>)
 800af94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af98:	0800afa9 	.word	0x0800afa9
 800af9c:	0800b039 	.word	0x0800b039
 800afa0:	0800b02d 	.word	0x0800b02d
 800afa4:	0800afa9 	.word	0x0800afa9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	7a5b      	ldrb	r3, [r3, #9]
 800afac:	2bf1      	cmp	r3, #241	@ 0xf1
 800afae:	d10a      	bne.n	800afc6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800afb0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800afb4:	f7ff faa6 	bl	800a504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800afb8:	f248 0005 	movw	r0, #32773	@ 0x8005
 800afbc:	f7ff fac2 	bl	800a544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800afc0:	2302      	movs	r3, #2
 800afc2:	75bb      	strb	r3, [r7, #22]
 800afc4:	e011      	b.n	800afea <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7a5b      	ldrb	r3, [r3, #9]
 800afca:	2bf2      	cmp	r3, #242	@ 0xf2
 800afcc:	d10a      	bne.n	800afe4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800afce:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800afd2:	f7ff fa97 	bl	800a504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800afd6:	f241 0021 	movw	r0, #4129	@ 0x1021
 800afda:	f7ff fab3 	bl	800a544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800afde:	2306      	movs	r3, #6
 800afe0:	75bb      	strb	r3, [r7, #22]
 800afe2:	e002      	b.n	800afea <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	7a5b      	ldrb	r3, [r3, #9]
 800afe8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800afea:	2309      	movs	r3, #9
 800afec:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	885b      	ldrh	r3, [r3, #2]
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	791b      	ldrb	r3, [r3, #4]
 800b006:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	795b      	ldrb	r3, [r3, #5]
 800b00c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	799b      	ldrb	r3, [r3, #6]
 800b012:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	79db      	ldrb	r3, [r3, #7]
 800b018:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	7a1b      	ldrb	r3, [r3, #8]
 800b01e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800b020:	7dbb      	ldrb	r3, [r7, #22]
 800b022:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7a9b      	ldrb	r3, [r3, #10]
 800b028:	753b      	strb	r3, [r7, #20]
        break;
 800b02a:	e022      	b.n	800b072 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800b02c:	2301      	movs	r3, #1
 800b02e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	7b1b      	ldrb	r3, [r3, #12]
 800b034:	733b      	strb	r3, [r7, #12]
        break;
 800b036:	e01c      	b.n	800b072 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800b038:	2306      	movs	r3, #6
 800b03a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	89db      	ldrh	r3, [r3, #14]
 800b040:	0a1b      	lsrs	r3, r3, #8
 800b042:	b29b      	uxth	r3, r3
 800b044:	b2db      	uxtb	r3, r3
 800b046:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	89db      	ldrh	r3, [r3, #14]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	7c1a      	ldrb	r2, [r3, #16]
 800b054:	4b0e      	ldr	r3, [pc, #56]	@ (800b090 <SUBGRF_SetPacketParams+0x134>)
 800b056:	4611      	mov	r1, r2
 800b058:	7019      	strb	r1, [r3, #0]
 800b05a:	4613      	mov	r3, r2
 800b05c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	7c5b      	ldrb	r3, [r3, #17]
 800b062:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	7c9b      	ldrb	r3, [r3, #18]
 800b068:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7cdb      	ldrb	r3, [r3, #19]
 800b06e:	747b      	strb	r3, [r7, #17]
        break;
 800b070:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	b29a      	uxth	r2, r3
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4619      	mov	r1, r3
 800b07c:	208c      	movs	r0, #140	@ 0x8c
 800b07e:	f000 f97d 	bl	800b37c <SUBGRF_WriteCommand>
 800b082:	e000      	b.n	800b086 <SUBGRF_SetPacketParams+0x12a>
        return;
 800b084:	bf00      	nop
}
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	200004a9 	.word	0x200004a9
 800b090:	200004aa 	.word	0x200004aa

0800b094 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	4603      	mov	r3, r0
 800b09c:	460a      	mov	r2, r1
 800b09e:	71fb      	strb	r3, [r7, #7]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800b0a8:	79bb      	ldrb	r3, [r7, #6]
 800b0aa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800b0ac:	f107 030c 	add.w	r3, r7, #12
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	208f      	movs	r0, #143	@ 0x8f
 800b0b6:	f000 f961 	bl	800b37c <SUBGRF_WriteCommand>
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b082      	sub	sp, #8
 800b0c6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800b0cc:	1d3b      	adds	r3, r7, #4
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	2015      	movs	r0, #21
 800b0d4:	f000 f974 	bl	800b3c0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800b0d8:	793b      	ldrb	r3, [r7, #4]
 800b0da:	425b      	negs	r3, r3
 800b0dc:	105b      	asrs	r3, r3, #1
 800b0de:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800b0e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	2013      	movs	r0, #19
 800b100:	f000 f95e 	bl	800b3c0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800b104:	f7ff fd84 	bl	800ac10 <SUBGRF_GetPacketType>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d10d      	bne.n	800b12a <SUBGRF_GetRxBufferStatus+0x3e>
 800b10e:	4b0c      	ldr	r3, [pc, #48]	@ (800b140 <SUBGRF_GetRxBufferStatus+0x54>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b01      	cmp	r3, #1
 800b116:	d108      	bne.n	800b12a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800b118:	f240 7002 	movw	r0, #1794	@ 0x702
 800b11c:	f000 f886 	bl	800b22c <SUBGRF_ReadRegister>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	701a      	strb	r2, [r3, #0]
 800b128:	e002      	b.n	800b130 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800b12a:	7b3a      	ldrb	r2, [r7, #12]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800b130:	7b7a      	ldrb	r2, [r7, #13]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	701a      	strb	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200004aa 	.word	0x200004aa

0800b144 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800b14c:	f107 030c 	add.w	r3, r7, #12
 800b150:	2203      	movs	r2, #3
 800b152:	4619      	mov	r1, r3
 800b154:	2014      	movs	r0, #20
 800b156:	f000 f933 	bl	800b3c0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800b15a:	f7ff fd59 	bl	800ac10 <SUBGRF_GetPacketType>
 800b15e:	4603      	mov	r3, r0
 800b160:	461a      	mov	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <SUBGRF_GetPacketStatus+0x30>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d013      	beq.n	800b19a <SUBGRF_GetPacketStatus+0x56>
 800b172:	e02a      	b.n	800b1ca <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800b174:	7b3a      	ldrb	r2, [r7, #12]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800b17a:	7b7b      	ldrb	r3, [r7, #13]
 800b17c:	425b      	negs	r3, r3
 800b17e:	105b      	asrs	r3, r3, #1
 800b180:	b25a      	sxtb	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	425b      	negs	r3, r3
 800b18a:	105b      	asrs	r3, r3, #1
 800b18c:	b25a      	sxtb	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	609a      	str	r2, [r3, #8]
            break;
 800b198:	e020      	b.n	800b1dc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800b19a:	7b3b      	ldrb	r3, [r7, #12]
 800b19c:	425b      	negs	r3, r3
 800b19e:	105b      	asrs	r3, r3, #1
 800b1a0:	b25a      	sxtb	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800b1a6:	7b7b      	ldrb	r3, [r7, #13]
 800b1a8:	b25b      	sxtb	r3, r3
 800b1aa:	3302      	adds	r3, #2
 800b1ac:	109b      	asrs	r3, r3, #2
 800b1ae:	b25a      	sxtb	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	425b      	negs	r3, r3
 800b1b8:	105b      	asrs	r3, r3, #1
 800b1ba:	b25a      	sxtb	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800b1c0:	4b08      	ldr	r3, [pc, #32]	@ (800b1e4 <SUBGRF_GetPacketStatus+0xa0>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	611a      	str	r2, [r3, #16]
            break;
 800b1c8:	e008      	b.n	800b1dc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800b1ca:	2214      	movs	r2, #20
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 f9b7 	bl	800c542 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	220f      	movs	r2, #15
 800b1d8:	701a      	strb	r2, [r3, #0]
            break;
 800b1da:	bf00      	nop
    }
}
 800b1dc:	bf00      	nop
 800b1de:	3710      	adds	r7, #16
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	200004ac 	.word	0x200004ac

0800b1e8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	460a      	mov	r2, r1
 800b1f2:	80fb      	strh	r3, [r7, #6]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b1fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b202:	b672      	cpsid	i
}
 800b204:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800b206:	1d7a      	adds	r2, r7, #5
 800b208:	88f9      	ldrh	r1, [r7, #6]
 800b20a:	2301      	movs	r3, #1
 800b20c:	4806      	ldr	r0, [pc, #24]	@ (800b228 <SUBGRF_WriteRegister+0x40>)
 800b20e:	f7fa fbe3 	bl	80059d8 <HAL_SUBGHZ_WriteRegisters>
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f383 8810 	msr	PRIMASK, r3
}
 800b21c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b21e:	bf00      	nop
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20000194 	.word	0x20000194

0800b22c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b236:	f3ef 8310 	mrs	r3, PRIMASK
 800b23a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b23c:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 800b23e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b240:	b672      	cpsid	i
}
 800b242:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800b244:	f107 020b 	add.w	r2, r7, #11
 800b248:	88f9      	ldrh	r1, [r7, #6]
 800b24a:	2301      	movs	r3, #1
 800b24c:	4806      	ldr	r0, [pc, #24]	@ (800b268 <SUBGRF_ReadRegister+0x3c>)
 800b24e:	f7fa fc22 	bl	8005a96 <HAL_SUBGHZ_ReadRegisters>
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	f383 8810 	msr	PRIMASK, r3
}
 800b25c:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 800b25e:	7afb      	ldrb	r3, [r7, #11]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20000194 	.word	0x20000194

0800b26c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	4603      	mov	r3, r0
 800b274:	6039      	str	r1, [r7, #0]
 800b276:	80fb      	strh	r3, [r7, #6]
 800b278:	4613      	mov	r3, r2
 800b27a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b27c:	f3ef 8310 	mrs	r3, PRIMASK
 800b280:	60fb      	str	r3, [r7, #12]
  return(result);
 800b282:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b286:	b672      	cpsid	i
}
 800b288:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800b28a:	88bb      	ldrh	r3, [r7, #4]
 800b28c:	88f9      	ldrh	r1, [r7, #6]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	4806      	ldr	r0, [pc, #24]	@ (800b2ac <SUBGRF_WriteRegisters+0x40>)
 800b292:	f7fa fba1 	bl	80059d8 <HAL_SUBGHZ_WriteRegisters>
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f383 8810 	msr	PRIMASK, r3
}
 800b2a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b2a2:	bf00      	nop
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20000194 	.word	0x20000194

0800b2b0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	6039      	str	r1, [r7, #0]
 800b2ba:	80fb      	strh	r3, [r7, #6]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800b2c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b2c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ca:	b672      	cpsid	i
}
 800b2cc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800b2ce:	88bb      	ldrh	r3, [r7, #4]
 800b2d0:	88f9      	ldrh	r1, [r7, #6]
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	4806      	ldr	r0, [pc, #24]	@ (800b2f0 <SUBGRF_ReadRegisters+0x40>)
 800b2d6:	f7fa fbde 	bl	8005a96 <HAL_SUBGHZ_ReadRegisters>
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f383 8810 	msr	PRIMASK, r3
}
 800b2e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b2e6:	bf00      	nop
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000194 	.word	0x20000194

0800b2f4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	71fb      	strb	r3, [r7, #7]
 800b300:	4613      	mov	r3, r2
 800b302:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b304:	f3ef 8310 	mrs	r3, PRIMASK
 800b308:	60fb      	str	r3, [r7, #12]
  return(result);
 800b30a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b30c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b30e:	b672      	cpsid	i
}
 800b310:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b312:	79bb      	ldrb	r3, [r7, #6]
 800b314:	b29b      	uxth	r3, r3
 800b316:	79f9      	ldrb	r1, [r7, #7]
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	4806      	ldr	r0, [pc, #24]	@ (800b334 <SUBGRF_WriteBuffer+0x40>)
 800b31c:	f7fa fccf 	bl	8005cbe <HAL_SUBGHZ_WriteBuffer>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f383 8810 	msr	PRIMASK, r3
}
 800b32a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b32c:	bf00      	nop
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20000194 	.word	0x20000194

0800b338 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
 800b344:	4613      	mov	r3, r2
 800b346:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b348:	f3ef 8310 	mrs	r3, PRIMASK
 800b34c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b34e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b352:	b672      	cpsid	i
}
 800b354:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b356:	79bb      	ldrb	r3, [r7, #6]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	79f9      	ldrb	r1, [r7, #7]
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	4806      	ldr	r0, [pc, #24]	@ (800b378 <SUBGRF_ReadBuffer+0x40>)
 800b360:	f7fa fd00 	bl	8005d64 <HAL_SUBGHZ_ReadBuffer>
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f383 8810 	msr	PRIMASK, r3
}
 800b36e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b370:	bf00      	nop
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000194 	.word	0x20000194

0800b37c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	6039      	str	r1, [r7, #0]
 800b386:	71fb      	strb	r3, [r7, #7]
 800b388:	4613      	mov	r3, r2
 800b38a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38c:	f3ef 8310 	mrs	r3, PRIMASK
 800b390:	60fb      	str	r3, [r7, #12]
  return(result);
 800b392:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b396:	b672      	cpsid	i
}
 800b398:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b39a:	88bb      	ldrh	r3, [r7, #4]
 800b39c:	79f9      	ldrb	r1, [r7, #7]
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4806      	ldr	r0, [pc, #24]	@ (800b3bc <SUBGRF_WriteCommand+0x40>)
 800b3a2:	f7fa fbd9 	bl	8005b58 <HAL_SUBGHZ_ExecSetCmd>
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	f383 8810 	msr	PRIMASK, r3
}
 800b3b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b3b2:	bf00      	nop
 800b3b4:	3718      	adds	r7, #24
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000194 	.word	0x20000194

0800b3c0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	6039      	str	r1, [r7, #0]
 800b3ca:	71fb      	strb	r3, [r7, #7]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b3d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3da:	b672      	cpsid	i
}
 800b3dc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b3de:	88bb      	ldrh	r3, [r7, #4]
 800b3e0:	79f9      	ldrb	r1, [r7, #7]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4806      	ldr	r0, [pc, #24]	@ (800b400 <SUBGRF_ReadCommand+0x40>)
 800b3e6:	f7fa fc16 	bl	8005c16 <HAL_SUBGHZ_ExecGetCmd>
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	f383 8810 	msr	PRIMASK, r3
}
 800b3f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b3f6:	bf00      	nop
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000194 	.word	0x20000194

0800b404 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	460a      	mov	r2, r1
 800b40e:	71fb      	strb	r3, [r7, #7]
 800b410:	4613      	mov	r3, r2
 800b412:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b418:	79bb      	ldrb	r3, [r7, #6]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d10d      	bne.n	800b43a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d104      	bne.n	800b42e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b424:	2302      	movs	r3, #2
 800b426:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b428:	2004      	movs	r0, #4
 800b42a:	f000 f8ef 	bl	800b60c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	2b02      	cmp	r3, #2
 800b432:	d107      	bne.n	800b444 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b434:	2303      	movs	r3, #3
 800b436:	73fb      	strb	r3, [r7, #15]
 800b438:	e004      	b.n	800b444 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b43a:	79bb      	ldrb	r3, [r7, #6]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b440:	2301      	movs	r3, #1
 800b442:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	4618      	mov	r0, r3
 800b448:	f001 f807 	bl	800c45a <RBI_ConfigRFSwitch>
}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b45e:	2301      	movs	r3, #1
 800b460:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b462:	f001 f819 	bl	800c498 <RBI_GetTxConfig>
 800b466:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d016      	beq.n	800b49c <SUBGRF_SetRfTxPower+0x48>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b02      	cmp	r3, #2
 800b472:	dc16      	bgt.n	800b4a2 <SUBGRF_SetRfTxPower+0x4e>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <SUBGRF_SetRfTxPower+0x2e>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d00a      	beq.n	800b496 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b480:	e00f      	b.n	800b4a2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b486:	2b0f      	cmp	r3, #15
 800b488:	dd02      	ble.n	800b490 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b48a:	2302      	movs	r3, #2
 800b48c:	73fb      	strb	r3, [r7, #15]
            break;
 800b48e:	e009      	b.n	800b4a4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
            break;
 800b494:	e006      	b.n	800b4a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b496:	2301      	movs	r3, #1
 800b498:	73fb      	strb	r3, [r7, #15]
            break;
 800b49a:	e003      	b.n	800b4a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b49c:	2302      	movs	r3, #2
 800b49e:	73fb      	strb	r3, [r7, #15]
            break;
 800b4a0:	e000      	b.n	800b4a4 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b4a2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b4a4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff fbb9 	bl	800ac24 <SUBGRF_SetTxParams>

    return paSelect;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b4c0:	2301      	movs	r3, #1
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr
	...

0800b4cc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b4d4:	4b03      	ldr	r3, [pc, #12]	@ (800b4e4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2001      	movs	r0, #1
 800b4da:	4798      	blx	r3
}
 800b4dc:	bf00      	nop
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200004b4 	.word	0x200004b4

0800b4e8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b4f0:	4b03      	ldr	r3, [pc, #12]	@ (800b500 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2002      	movs	r0, #2
 800b4f6:	4798      	blx	r3
}
 800b4f8:	bf00      	nop
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	200004b4 	.word	0x200004b4

0800b504 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b50c:	4b03      	ldr	r3, [pc, #12]	@ (800b51c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2040      	movs	r0, #64	@ 0x40
 800b512:	4798      	blx	r3
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200004b4 	.word	0x200004b4

0800b520 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b52c:	78fb      	ldrb	r3, [r7, #3]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b532:	2b01      	cmp	r3, #1
 800b534:	d005      	beq.n	800b542 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b536:	e00a      	b.n	800b54e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b538:	4b07      	ldr	r3, [pc, #28]	@ (800b558 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2080      	movs	r0, #128	@ 0x80
 800b53e:	4798      	blx	r3
            break;
 800b540:	e005      	b.n	800b54e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b542:	4b05      	ldr	r3, [pc, #20]	@ (800b558 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b54a:	4798      	blx	r3
            break;
 800b54c:	bf00      	nop
    }
}
 800b54e:	bf00      	nop
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200004b4 	.word	0x200004b4

0800b55c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b564:	4b04      	ldr	r3, [pc, #16]	@ (800b578 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b56c:	4798      	blx	r3
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	200004b4 	.word	0x200004b4

0800b57c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b584:	4b03      	ldr	r3, [pc, #12]	@ (800b594 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2020      	movs	r0, #32
 800b58a:	4798      	blx	r3
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	200004b4 	.word	0x200004b4

0800b598 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b5a0:	4b03      	ldr	r3, [pc, #12]	@ (800b5b0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2004      	movs	r0, #4
 800b5a6:	4798      	blx	r3
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	200004b4 	.word	0x200004b4

0800b5b4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b5bc:	4b03      	ldr	r3, [pc, #12]	@ (800b5cc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2008      	movs	r0, #8
 800b5c2:	4798      	blx	r3
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200004b4 	.word	0x200004b4

0800b5d0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b5d8:	4b03      	ldr	r3, [pc, #12]	@ (800b5e8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2010      	movs	r0, #16
 800b5de:	4798      	blx	r3
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	200004b4 	.word	0x200004b4

0800b5ec <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b5f4:	4b04      	ldr	r3, [pc, #16]	@ (800b608 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800b5fc:	4798      	blx	r3
}
 800b5fe:	bf00      	nop
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200004b4 	.word	0x200004b4

0800b60c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b616:	f000 ff55 	bl	800c4c4 <RBI_IsDCDC>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d112      	bne.n	800b646 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b620:	f640 1023 	movw	r0, #2339	@ 0x923
 800b624:	f7ff fe02 	bl	800b22c <SUBGRF_ReadRegister>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	f023 0306 	bic.w	r3, r3, #6
 800b632:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b634:	7bfa      	ldrb	r2, [r7, #15]
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	4313      	orrs	r3, r2
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	4619      	mov	r1, r3
 800b63e:	f640 1023 	movw	r0, #2339	@ 0x923
 800b642:	f7ff fdd1 	bl	800b1e8 <SUBGRF_WriteRegister>
  }
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b65e:	231f      	movs	r3, #31
 800b660:	e017      	b.n	800b692 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b662:	2300      	movs	r3, #0
 800b664:	73fb      	strb	r3, [r7, #15]
 800b666:	e00f      	b.n	800b688 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	4a0c      	ldr	r2, [pc, #48]	@ (800b69c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b66c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	429a      	cmp	r2, r3
 800b674:	d205      	bcs.n	800b682 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	4a08      	ldr	r2, [pc, #32]	@ (800b69c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	4413      	add	r3, r2
 800b67e:	791b      	ldrb	r3, [r3, #4]
 800b680:	e007      	b.n	800b692 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	3301      	adds	r3, #1
 800b686:	73fb      	strb	r3, [r7, #15]
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	2b15      	cmp	r3, #21
 800b68c:	d9ec      	bls.n	800b668 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b68e:	bf00      	nop
 800b690:	e7fd      	b.n	800b68e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	bc80      	pop	{r7}
 800b69a:	4770      	bx	lr
 800b69c:	0800e408 	.word	0x0800e408

0800b6a0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08a      	sub	sp, #40	@ 0x28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b6aa:	4b35      	ldr	r3, [pc, #212]	@ (800b780 <SUBGRF_GetCFO+0xe0>)
 800b6ac:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b6ae:	f640 0007 	movw	r0, #2055	@ 0x807
 800b6b2:	f7ff fdbb 	bl	800b22c <SUBGRF_ReadRegister>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b6ba:	7ffb      	ldrb	r3, [r7, #31]
 800b6bc:	08db      	lsrs	r3, r3, #3
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f003 0303 	and.w	r3, r3, #3
 800b6c4:	3328      	adds	r3, #40	@ 0x28
 800b6c6:	443b      	add	r3, r7
 800b6c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b6cc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b6ce:	7ffb      	ldrb	r3, [r7, #31]
 800b6d0:	f003 0307 	and.w	r3, r3, #7
 800b6d4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b6d6:	7fba      	ldrb	r2, [r7, #30]
 800b6d8:	7f7b      	ldrb	r3, [r7, #29]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4b28      	ldr	r3, [pc, #160]	@ (800b784 <SUBGRF_GetCFO+0xe4>)
 800b6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6e8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	fb02 f303 	mul.w	r3, r2, r3
 800b704:	2b07      	cmp	r3, #7
 800b706:	d802      	bhi.n	800b70e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b708:	2302      	movs	r3, #2
 800b70a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 800b70e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	fb02 f303 	mul.w	r3, r2, r3
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d802      	bhi.n	800b722 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b71c:	2304      	movs	r3, #4
 800b71e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b722:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	fb02 f303 	mul.w	r3, r2, r3
 800b72c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b72e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800b732:	f7ff fd7b 	bl	800b22c <SUBGRF_ReadRegister>
 800b736:	4603      	mov	r3, r0
 800b738:	021b      	lsls	r3, r3, #8
 800b73a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b73e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b740:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800b744:	f7ff fd72 	bl	800b22c <SUBGRF_ReadRegister>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	4313      	orrs	r3, r2
 800b750:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b762:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b766:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	095b      	lsrs	r3, r3, #5
 800b76c:	6a3a      	ldr	r2, [r7, #32]
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	11da      	asrs	r2, r3, #7
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	601a      	str	r2, [r3, #0]
}
 800b778:	bf00      	nop
 800b77a:	3728      	adds	r7, #40	@ 0x28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	0c0a0804 	.word	0x0c0a0804
 800b784:	01e84800 	.word	0x01e84800

0800b788 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	4603      	mov	r3, r0
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b79a:	f04f 33ff 	mov.w	r3, #4294967295
 800b79e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b7a0:	697b      	ldr	r3, [r7, #20]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	371c      	adds	r7, #28
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b7be:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b7c4:	697b      	ldr	r3, [r7, #20]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bc80      	pop	{r7}
 800b7ce:	4770      	bx	lr

0800b7d0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b7dc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bc80      	pop	{r7}
 800b7e8:	4770      	bx	lr

0800b7ea <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b7ee:	bf00      	nop
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr

0800b7f6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b7fa:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr

0800b804 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b804:	b480      	push	{r7}
 800b806:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b808:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr

0800b812 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b812:	b480      	push	{r7}
 800b814:	b083      	sub	sp, #12
 800b816:	af00      	add	r7, sp, #0
 800b818:	4603      	mov	r3, r0
 800b81a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	bc80      	pop	{r7}
 800b824:	4770      	bx	lr

0800b826 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b826:	b480      	push	{r7}
 800b828:	b087      	sub	sp, #28
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	460b      	mov	r3, r1
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b83a:	697b      	ldr	r3, [r7, #20]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr

0800b846 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b846:	b480      	push	{r7}
 800b848:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b84a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800b84e:	4618      	mov	r0, r3
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr

0800b856 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b856:	b480      	push	{r7}
 800b858:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b85a:	bf00      	nop
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bc80      	pop	{r7}
 800b860:	4770      	bx	lr

0800b862 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b862:	b480      	push	{r7}
 800b864:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b866:	bf00      	nop
 800b868:	46bd      	mov	sp, r7
 800b86a:	bc80      	pop	{r7}
 800b86c:	4770      	bx	lr

0800b86e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	4603      	mov	r3, r0
 800b876:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr

0800b882 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

	/* USER CODE END MX_SubGHz_Phy_Init_1 */
	SystemApp_Init();
 800b886:	f7f6 f894 	bl	80019b2 <SystemApp_Init>
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

	/* USER CODE END MX_SubGHz_Phy_Init_1_1 */
	SubghzApp_Init();
 800b88a:	f000 f80f 	bl	800b8ac <SubghzApp_Init>
	/* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

	/* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b88e:	bf00      	nop
 800b890:	bd80      	pop	{r7, pc}

0800b892 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */
	// Run app background tasks (e.g., jittered TX scheduling)
	SubghzApp_BackgroundProcess();
 800b896:	f000 fc81 	bl	800c19c <SubghzApp_BackgroundProcess>
	/* USER CODE END MX_SubGHz_Phy_Process_1 */
	/* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

	/* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b89a:	bf00      	nop
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <SubGHz_Phy_Timeout>:

/* USER CODE BEGIN EF */
void SubGHz_Phy_Timeout(void)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	af00      	add	r7, sp, #0
	SubghzApp_Timeout();
 800b8a2:	f000 faad 	bl	800be00 <SubghzApp_Timeout>
}
 800b8a6:	bf00      	nop
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <SubghzApp_Init>:
void SubghzApp_ValueError(uint8_t errors);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b08d      	sub	sp, #52	@ 0x34
 800b8b0:	af0a      	add	r7, sp, #40	@ 0x28
	/* USER CODE BEGIN SubghzApp_Init_1 */
	memcpy(buffer, "SAGV-CRRFD0000TTTTTT", 20);
 800b8b2:	2214      	movs	r2, #20
 800b8b4:	4960      	ldr	r1, [pc, #384]	@ (800ba38 <SubghzApp_Init+0x18c>)
 800b8b6:	4861      	ldr	r0, [pc, #388]	@ (800ba3c <SubghzApp_Init+0x190>)
 800b8b8:	f001 fa7d 	bl	800cdb6 <memcpy>
	// Set a safe default threshold to avoid uninitialized use
	seuil = 10;
 800b8bc:	4b60      	ldr	r3, [pc, #384]	@ (800ba40 <SubghzApp_Init+0x194>)
 800b8be:	220a      	movs	r2, #10
 800b8c0:	701a      	strb	r2, [r3, #0]
	// Initialize current page to a sane default until 0x66 confirms
	currentPage = 0;
 800b8c2:	4b60      	ldr	r3, [pc, #384]	@ (800ba44 <SubghzApp_Init+0x198>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	701a      	strb	r2, [r3, #0]
	/* USER CODE END SubghzApp_Init_1 */

	/* Radio initialization */
	RadioEvents.TxDone = OnTxDone;
 800b8c8:	4b5f      	ldr	r3, [pc, #380]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8ca:	4a60      	ldr	r2, [pc, #384]	@ (800ba4c <SubghzApp_Init+0x1a0>)
 800b8cc:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRxDone;
 800b8ce:	4b5e      	ldr	r3, [pc, #376]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8d0:	4a5f      	ldr	r2, [pc, #380]	@ (800ba50 <SubghzApp_Init+0x1a4>)
 800b8d2:	609a      	str	r2, [r3, #8]
	RadioEvents.TxTimeout = OnTxTimeout;
 800b8d4:	4b5c      	ldr	r3, [pc, #368]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8d6:	4a5f      	ldr	r2, [pc, #380]	@ (800ba54 <SubghzApp_Init+0x1a8>)
 800b8d8:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRxTimeout;
 800b8da:	4b5b      	ldr	r3, [pc, #364]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8dc:	4a5e      	ldr	r2, [pc, #376]	@ (800ba58 <SubghzApp_Init+0x1ac>)
 800b8de:	60da      	str	r2, [r3, #12]
	RadioEvents.RxError = OnRxError;
 800b8e0:	4b59      	ldr	r3, [pc, #356]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8e2:	4a5e      	ldr	r2, [pc, #376]	@ (800ba5c <SubghzApp_Init+0x1b0>)
 800b8e4:	611a      	str	r2, [r3, #16]

	Radio.Init(&RadioEvents);
 800b8e6:	4b5e      	ldr	r3, [pc, #376]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4857      	ldr	r0, [pc, #348]	@ (800ba48 <SubghzApp_Init+0x19c>)
 800b8ec:	4798      	blx	r3

	/* USER CODE BEGIN SubghzApp_Init_2 */
	SUBGRF_SetTcxoMode(TCXO_CTRL_3_3V, 320);
 800b8ee:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800b8f2:	2007      	movs	r0, #7
 800b8f4:	f7ff f908 	bl	800ab08 <SUBGRF_SetTcxoMode>
	SUBGRF_SetStandby(STDBY_XOSC);
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f7fe fef1 	bl	800a6e0 <SUBGRF_SetStandby>

	CalibrationParams_t calib = {{1, 1, 1, 1, 1, 1, 1}};
 800b8fe:	2300      	movs	r3, #0
 800b900:	713b      	strb	r3, [r7, #4]
 800b902:	793b      	ldrb	r3, [r7, #4]
 800b904:	f043 0301 	orr.w	r3, r3, #1
 800b908:	713b      	strb	r3, [r7, #4]
 800b90a:	793b      	ldrb	r3, [r7, #4]
 800b90c:	f043 0302 	orr.w	r3, r3, #2
 800b910:	713b      	strb	r3, [r7, #4]
 800b912:	793b      	ldrb	r3, [r7, #4]
 800b914:	f043 0304 	orr.w	r3, r3, #4
 800b918:	713b      	strb	r3, [r7, #4]
 800b91a:	793b      	ldrb	r3, [r7, #4]
 800b91c:	f043 0308 	orr.w	r3, r3, #8
 800b920:	713b      	strb	r3, [r7, #4]
 800b922:	793b      	ldrb	r3, [r7, #4]
 800b924:	f043 0310 	orr.w	r3, r3, #16
 800b928:	713b      	strb	r3, [r7, #4]
 800b92a:	793b      	ldrb	r3, [r7, #4]
 800b92c:	f043 0320 	orr.w	r3, r3, #32
 800b930:	713b      	strb	r3, [r7, #4]
 800b932:	793b      	ldrb	r3, [r7, #4]
 800b934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b938:	713b      	strb	r3, [r7, #4]
	SUBGRF_Calibrate(calib);
 800b93a:	7938      	ldrb	r0, [r7, #4]
 800b93c:	f7fe fff1 	bl	800a922 <SUBGRF_Calibrate>
	SUBGRF_CalibrateImage(APP_FREQUENCY);
 800b940:	4848      	ldr	r0, [pc, #288]	@ (800ba64 <SubghzApp_Init+0x1b8>)
 800b942:	f7ff f83b 	bl	800a9bc <SUBGRF_CalibrateImage>

	Radio.SetModem(APP_MODEM);
 800b946:	4b46      	ldr	r3, [pc, #280]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	2001      	movs	r0, #1
 800b94c:	4798      	blx	r3
	Radio.SetChannel(APP_FREQUENCY);
 800b94e:	4b44      	ldr	r3, [pc, #272]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	4844      	ldr	r0, [pc, #272]	@ (800ba64 <SubghzApp_Init+0x1b8>)
 800b954:	4798      	blx	r3
	Radio.SetTxConfig(APP_MODEM, APP_OUTPUT_POWER, 0, APP_BANDWIDTH,
 800b956:	4b42      	ldr	r3, [pc, #264]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b958:	69dc      	ldr	r4, [r3, #28]
 800b95a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b95e:	9308      	str	r3, [sp, #32]
 800b960:	2300      	movs	r3, #0
 800b962:	9307      	str	r3, [sp, #28]
 800b964:	2300      	movs	r3, #0
 800b966:	9306      	str	r3, [sp, #24]
 800b968:	2300      	movs	r3, #0
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	2301      	movs	r3, #1
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	2300      	movs	r3, #0
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	230c      	movs	r3, #12
 800b976:	9302      	str	r3, [sp, #8]
 800b978:	2304      	movs	r3, #4
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	230a      	movs	r3, #10
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	2300      	movs	r3, #0
 800b982:	2200      	movs	r2, #0
 800b984:	2116      	movs	r1, #22
 800b986:	2001      	movs	r0, #1
 800b988:	47a0      	blx	r4
			APP_SPREADING_FACTOR, APP_CODING_RATE, APP_PREAMBLE_LENGTH,
			APP_HEADER, APP_CRC, 0, 0, 0, 500);
	Radio.SetRxConfig(APP_MODEM, APP_BANDWIDTH, APP_SPREADING_FACTOR,
 800b98a:	4b35      	ldr	r3, [pc, #212]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b98c:	699c      	ldr	r4, [r3, #24]
 800b98e:	2301      	movs	r3, #1
 800b990:	9309      	str	r3, [sp, #36]	@ 0x24
 800b992:	2300      	movs	r3, #0
 800b994:	9308      	str	r3, [sp, #32]
 800b996:	2300      	movs	r3, #0
 800b998:	9307      	str	r3, [sp, #28]
 800b99a:	2300      	movs	r3, #0
 800b99c:	9306      	str	r3, [sp, #24]
 800b99e:	2301      	movs	r3, #1
 800b9a0:	9305      	str	r3, [sp, #20]
 800b9a2:	2318      	movs	r3, #24
 800b9a4:	9304      	str	r3, [sp, #16]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9303      	str	r3, [sp, #12]
 800b9aa:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b9ae:	9302      	str	r3, [sp, #8]
 800b9b0:	230c      	movs	r3, #12
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	220a      	movs	r2, #10
 800b9bc:	2100      	movs	r1, #0
 800b9be:	2001      	movs	r0, #1
 800b9c0:	47a0      	blx	r4
			APP_CODING_RATE, 0, APP_PREAMBLE_LENGTH, APP_SYMB_TIMEOUT,
			APP_HEADER, APP_PAYLOAD_LENGTH, APP_CRC, 0, 0, 0, true);
	Radio.SetMaxPayloadLength(APP_MODEM, APP_PAYLOAD_LENGTH);
 800b9c2:	4b27      	ldr	r3, [pc, #156]	@ (800ba60 <SubghzApp_Init+0x1b4>)
 800b9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9c6:	2118      	movs	r1, #24
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	4798      	blx	r3

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	2032      	movs	r0, #50	@ 0x32
 800b9d2:	f7f7 ffa2 	bl	800391a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800b9d6:	2032      	movs	r0, #50	@ 0x32
 800b9d8:	f7f7 ffb9 	bl	800394e <HAL_NVIC_EnableIRQ>

	if(!HAL_GPIO_ReadPin(MASTER_GPIO_Port, MASTER_Pin)) SubghzApp_Mode = SUBGHZ_APP_SLAVE;
 800b9dc:	2110      	movs	r1, #16
 800b9de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b9e2:	f7f8 f9eb 	bl	8003dbc <HAL_GPIO_ReadPin>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <SubghzApp_Init+0x146>
 800b9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800ba68 <SubghzApp_Init+0x1bc>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	701a      	strb	r2, [r3, #0]

	// Initialize sender_id from mode
	if(SubghzApp_Mode == SUBGHZ_APP_MASTER_1) sender_id = 1;
 800b9f2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba68 <SubghzApp_Init+0x1bc>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d103      	bne.n	800ba02 <SubghzApp_Init+0x156>
 800b9fa:	4b1c      	ldr	r3, [pc, #112]	@ (800ba6c <SubghzApp_Init+0x1c0>)
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	e00a      	b.n	800ba18 <SubghzApp_Init+0x16c>
	else if(SubghzApp_Mode == SUBGHZ_APP_MASTER_2) sender_id = 2;
 800ba02:	4b19      	ldr	r3, [pc, #100]	@ (800ba68 <SubghzApp_Init+0x1bc>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d103      	bne.n	800ba12 <SubghzApp_Init+0x166>
 800ba0a:	4b18      	ldr	r3, [pc, #96]	@ (800ba6c <SubghzApp_Init+0x1c0>)
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e002      	b.n	800ba18 <SubghzApp_Init+0x16c>
	else sender_id = 0;
 800ba12:	4b16      	ldr	r3, [pc, #88]	@ (800ba6c <SubghzApp_Init+0x1c0>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]

	SubghzApp_Rx();
 800ba18:	f000 fa88 	bl	800bf2c <SubghzApp_Rx>

	if(SubghzApp_Mode == SUBGHZ_APP_MASTER_1)
 800ba1c:	4b12      	ldr	r3, [pc, #72]	@ (800ba68 <SubghzApp_Init+0x1bc>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d105      	bne.n	800ba30 <SubghzApp_Init+0x184>
	{
		HAL_ADCEx_Calibration_Start(&hadc);
 800ba24:	4812      	ldr	r0, [pc, #72]	@ (800ba70 <SubghzApp_Init+0x1c4>)
 800ba26:	f7f7 fdd4 	bl	80035d2 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start(&hadc);
 800ba2a:	4811      	ldr	r0, [pc, #68]	@ (800ba70 <SubghzApp_Init+0x1c4>)
 800ba2c:	f7f7 f9d2 	bl	8002dd4 <HAL_ADC_Start>
	}
	/* USER CODE END SubghzApp_Init_2 */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd90      	pop	{r4, r7, pc}
 800ba38:	0800ddfc 	.word	0x0800ddfc
 800ba3c:	200004f0 	.word	0x200004f0
 800ba40:	20000508 	.word	0x20000508
 800ba44:	20000509 	.word	0x20000509
 800ba48:	200004b8 	.word	0x200004b8
 800ba4c:	0800ba75 	.word	0x0800ba75
 800ba50:	0800baa5 	.word	0x0800baa5
 800ba54:	0800bd99 	.word	0x0800bd99
 800ba58:	0800bdc5 	.word	0x0800bdc5
 800ba5c:	0800bdd1 	.word	0x0800bdd1
 800ba60:	0800e378 	.word	0x0800e378
 800ba64:	33bca100 	.word	0x33bca100
 800ba68:	20000069 	.word	0x20000069
 800ba6c:	20000514 	.word	0x20000514
 800ba70:	200000e8 	.word	0x200000e8

0800ba74 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxDone */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2104      	movs	r1, #4
 800ba7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba80:	f7f8 f9b3 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800ba84:	2201      	movs	r2, #1
 800ba86:	2108      	movs	r1, #8
 800ba88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba8c:	f7f8 f9ad 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800ba90:	2200      	movs	r2, #0
 800ba92:	2102      	movs	r1, #2
 800ba94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba98:	f7f8 f9a7 	bl	8003dea <HAL_GPIO_WritePin>
	// Always go back to RX after a TX completes
	SubghzApp_Rx();
 800ba9c:	f000 fa46 	bl	800bf2c <SubghzApp_Rx>
	/* USER CODE END OnTxDone */
}
 800baa0:	bf00      	nop
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	4608      	mov	r0, r1
 800baae:	4611      	mov	r1, r2
 800bab0:	461a      	mov	r2, r3
 800bab2:	4603      	mov	r3, r0
 800bab4:	817b      	strh	r3, [r7, #10]
 800bab6:	460b      	mov	r3, r1
 800bab8:	813b      	strh	r3, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN OnRxDone */
	uint8_t isError = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	75fb      	strb	r3, [r7, #23]
	// Bound the copy to our buffer size
	uint16_t copyLen = (size <= sizeof(RxBuffer)) ? size : sizeof(RxBuffer);
 800bac2:	897b      	ldrh	r3, [r7, #10]
 800bac4:	2b18      	cmp	r3, #24
 800bac6:	bf28      	it	cs
 800bac8:	2318      	movcs	r3, #24
 800baca:	82bb      	strh	r3, [r7, #20]
	// Reject frames that are too short to contain the ID prefix
	if (copyLen < (sizeof(SUBGHZ_APP_ID))) {
 800bacc:	8abb      	ldrh	r3, [r7, #20]
 800bace:	2b08      	cmp	r3, #8
 800bad0:	f240 812f 	bls.w	800bd32 <OnRxDone+0x28e>
		return;
	}
	// Require minimum frame size for field parsing (indices up to 19)
	if (copyLen < 20) {
 800bad4:	8abb      	ldrh	r3, [r7, #20]
 800bad6:	2b13      	cmp	r3, #19
 800bad8:	f240 812d 	bls.w	800bd36 <OnRxDone+0x292>
		return;
	}
	memcpy(RxBuffer, payload, copyLen);
 800badc:	8abb      	ldrh	r3, [r7, #20]
 800bade:	461a      	mov	r2, r3
 800bae0:	68f9      	ldr	r1, [r7, #12]
 800bae2:	4897      	ldr	r0, [pc, #604]	@ (800bd40 <OnRxDone+0x29c>)
 800bae4:	f001 f967 	bl	800cdb6 <memcpy>
	if(memcmp(RxBuffer, SUBGHZ_APP_ID, sizeof(SUBGHZ_APP_ID)) == 0)
 800bae8:	2209      	movs	r2, #9
 800baea:	4996      	ldr	r1, [pc, #600]	@ (800bd44 <OnRxDone+0x2a0>)
 800baec:	4894      	ldr	r0, [pc, #592]	@ (800bd40 <OnRxDone+0x29c>)
 800baee:	f001 f8d6 	bl	800cc9e <memcmp>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f040 8119 	bne.w	800bd2c <OnRxDone+0x288>
	{
		// Byte 9 : identité de l'émetteur (0, 1 ou 2)
		if(RxBuffer[9] == 0)
 800bafa:	4b91      	ldr	r3, [pc, #580]	@ (800bd40 <OnRxDone+0x29c>)
 800bafc:	7a5b      	ldrb	r3, [r3, #9]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8099 	beq.w	800bc36 <OnRxDone+0x192>
		{
			// Trame du récepteur (slave), ignorer ou traiter si besoin
		}
		else if(RxBuffer[9] == 1)
 800bb04:	4b8e      	ldr	r3, [pc, #568]	@ (800bd40 <OnRxDone+0x29c>)
 800bb06:	7a5b      	ldrb	r3, [r3, #9]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d169      	bne.n	800bbe0 <OnRxDone+0x13c>
		{
			// Trame de l'émetteur 1
			// Indices: [11]=CASIER, [12]=GAZ, [13]=PRESSION
			if(RxBuffer[12] != 0)
 800bb0c:	4b8c      	ldr	r3, [pc, #560]	@ (800bd40 <OnRxDone+0x29c>)
 800bb0e:	7b1b      	ldrb	r3, [r3, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d011      	beq.n	800bb38 <OnRxDone+0x94>
			{
				NEXTION_SetText("main.t_gaz", "NOK");
 800bb14:	498c      	ldr	r1, [pc, #560]	@ (800bd48 <OnRxDone+0x2a4>)
 800bb16:	488d      	ldr	r0, [pc, #564]	@ (800bd4c <OnRxDone+0x2a8>)
 800bb18:	f7f6 fd48 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_gaz", 64333);
 800bb1c:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bb20:	488a      	ldr	r0, [pc, #552]	@ (800bd4c <OnRxDone+0x2a8>)
 800bb22:	f7f6 fd73 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_gaz", 2);
 800bb26:	2102      	movs	r1, #2
 800bb28:	4889      	ldr	r0, [pc, #548]	@ (800bd50 <OnRxDone+0x2ac>)
 800bb2a:	f7f6 fd9f 	bl	800266c <NEXTION_SetPicture>

				isError |= 0b0100;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	f043 0304 	orr.w	r3, r3, #4
 800bb34:	75fb      	strb	r3, [r7, #23]
 800bb36:	e00c      	b.n	800bb52 <OnRxDone+0xae>
			}
			else
			{
				NEXTION_SetText("main.t_gaz", "OK");
 800bb38:	4986      	ldr	r1, [pc, #536]	@ (800bd54 <OnRxDone+0x2b0>)
 800bb3a:	4884      	ldr	r0, [pc, #528]	@ (800bd4c <OnRxDone+0x2a8>)
 800bb3c:	f7f6 fd36 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_gaz", 5683);
 800bb40:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bb44:	4881      	ldr	r0, [pc, #516]	@ (800bd4c <OnRxDone+0x2a8>)
 800bb46:	f7f6 fd61 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_gaz", 3);
 800bb4a:	2103      	movs	r1, #3
 800bb4c:	4880      	ldr	r0, [pc, #512]	@ (800bd50 <OnRxDone+0x2ac>)
 800bb4e:	f7f6 fd8d 	bl	800266c <NEXTION_SetPicture>
			}

			if(RxBuffer[11] != 0)
 800bb52:	4b7b      	ldr	r3, [pc, #492]	@ (800bd40 <OnRxDone+0x29c>)
 800bb54:	7adb      	ldrb	r3, [r3, #11]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d011      	beq.n	800bb7e <OnRxDone+0xda>
			{
				NEXTION_SetText("main.t_casier", "NOK");
 800bb5a:	497b      	ldr	r1, [pc, #492]	@ (800bd48 <OnRxDone+0x2a4>)
 800bb5c:	487e      	ldr	r0, [pc, #504]	@ (800bd58 <OnRxDone+0x2b4>)
 800bb5e:	f7f6 fd25 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_casier", 64333);
 800bb62:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bb66:	487c      	ldr	r0, [pc, #496]	@ (800bd58 <OnRxDone+0x2b4>)
 800bb68:	f7f6 fd50 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_casier", 4);
 800bb6c:	2104      	movs	r1, #4
 800bb6e:	487b      	ldr	r0, [pc, #492]	@ (800bd5c <OnRxDone+0x2b8>)
 800bb70:	f7f6 fd7c 	bl	800266c <NEXTION_SetPicture>

				isError |= 0b0010;
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
 800bb76:	f043 0302 	orr.w	r3, r3, #2
 800bb7a:	75fb      	strb	r3, [r7, #23]
 800bb7c:	e00c      	b.n	800bb98 <OnRxDone+0xf4>
			}
			else
			{
				NEXTION_SetText("main.t_casier", "OK");
 800bb7e:	4975      	ldr	r1, [pc, #468]	@ (800bd54 <OnRxDone+0x2b0>)
 800bb80:	4875      	ldr	r0, [pc, #468]	@ (800bd58 <OnRxDone+0x2b4>)
 800bb82:	f7f6 fd13 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_casier", 5683);
 800bb86:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bb8a:	4873      	ldr	r0, [pc, #460]	@ (800bd58 <OnRxDone+0x2b4>)
 800bb8c:	f7f6 fd3e 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_casier", 5);
 800bb90:	2105      	movs	r1, #5
 800bb92:	4872      	ldr	r0, [pc, #456]	@ (800bd5c <OnRxDone+0x2b8>)
 800bb94:	f7f6 fd6a 	bl	800266c <NEXTION_SetPicture>
			}

			// Pressure value is byte [13]
			NEXTION_SetValue("main.x_prs", RxBuffer[13]);
 800bb98:	4b69      	ldr	r3, [pc, #420]	@ (800bd40 <OnRxDone+0x29c>)
 800bb9a:	7b5b      	ldrb	r3, [r3, #13]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	4870      	ldr	r0, [pc, #448]	@ (800bd60 <OnRxDone+0x2bc>)
 800bba0:	f7f6 fd1c 	bl	80025dc <NEXTION_SetValue>
			if(RxBuffer[13] < seuil)
 800bba4:	4b66      	ldr	r3, [pc, #408]	@ (800bd40 <OnRxDone+0x29c>)
 800bba6:	7b5a      	ldrb	r2, [r3, #13]
 800bba8:	4b6e      	ldr	r3, [pc, #440]	@ (800bd64 <OnRxDone+0x2c0>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d20d      	bcs.n	800bbcc <OnRxDone+0x128>
			{
				NEXTION_SetBackgroundColor("main.x_prs", 64333);
 800bbb0:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bbb4:	486a      	ldr	r0, [pc, #424]	@ (800bd60 <OnRxDone+0x2bc>)
 800bbb6:	f7f6 fd29 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_prs", 0);
 800bbba:	2100      	movs	r1, #0
 800bbbc:	486a      	ldr	r0, [pc, #424]	@ (800bd68 <OnRxDone+0x2c4>)
 800bbbe:	f7f6 fd55 	bl	800266c <NEXTION_SetPicture>

				isError |= 0b0001;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	f043 0301 	orr.w	r3, r3, #1
 800bbc8:	75fb      	strb	r3, [r7, #23]
 800bbca:	e034      	b.n	800bc36 <OnRxDone+0x192>
			}
			else
			{
				NEXTION_SetBackgroundColor("main.x_prs", 5683);
 800bbcc:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bbd0:	4863      	ldr	r0, [pc, #396]	@ (800bd60 <OnRxDone+0x2bc>)
 800bbd2:	f7f6 fd1b 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_prs", 1);
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4863      	ldr	r0, [pc, #396]	@ (800bd68 <OnRxDone+0x2c4>)
 800bbda:	f7f6 fd47 	bl	800266c <NEXTION_SetPicture>
 800bbde:	e02a      	b.n	800bc36 <OnRxDone+0x192>
			}
		}
		else if(RxBuffer[9] == 2)
 800bbe0:	4b57      	ldr	r3, [pc, #348]	@ (800bd40 <OnRxDone+0x29c>)
 800bbe2:	7a5b      	ldrb	r3, [r3, #9]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d123      	bne.n	800bc30 <OnRxDone+0x18c>
		{
			// Trame de l'émetteur 2
			// Index for secheur is [12]
			if(RxBuffer[12] != 0)
 800bbe8:	4b55      	ldr	r3, [pc, #340]	@ (800bd40 <OnRxDone+0x29c>)
 800bbea:	7b1b      	ldrb	r3, [r3, #12]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d011      	beq.n	800bc14 <OnRxDone+0x170>
			{
				NEXTION_SetText("main.t_sec", "NOK");
 800bbf0:	4955      	ldr	r1, [pc, #340]	@ (800bd48 <OnRxDone+0x2a4>)
 800bbf2:	485e      	ldr	r0, [pc, #376]	@ (800bd6c <OnRxDone+0x2c8>)
 800bbf4:	f7f6 fcda 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_sec", 64333);
 800bbf8:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800bbfc:	485b      	ldr	r0, [pc, #364]	@ (800bd6c <OnRxDone+0x2c8>)
 800bbfe:	f7f6 fd05 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_sec", 6);
 800bc02:	2106      	movs	r1, #6
 800bc04:	485a      	ldr	r0, [pc, #360]	@ (800bd70 <OnRxDone+0x2cc>)
 800bc06:	f7f6 fd31 	bl	800266c <NEXTION_SetPicture>

				isError |= 0b1000;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	75fb      	strb	r3, [r7, #23]
 800bc12:	e010      	b.n	800bc36 <OnRxDone+0x192>
			}
			else
			{
				NEXTION_SetText("main.t_sec", "OK");
 800bc14:	494f      	ldr	r1, [pc, #316]	@ (800bd54 <OnRxDone+0x2b0>)
 800bc16:	4855      	ldr	r0, [pc, #340]	@ (800bd6c <OnRxDone+0x2c8>)
 800bc18:	f7f6 fcc8 	bl	80025ac <NEXTION_SetText>
				NEXTION_SetBackgroundColor("main.t_sec", 5683);
 800bc1c:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bc20:	4852      	ldr	r0, [pc, #328]	@ (800bd6c <OnRxDone+0x2c8>)
 800bc22:	f7f6 fcf3 	bl	800260c <NEXTION_SetBackgroundColor>
				NEXTION_SetPicture("main.p_sec", 7);
 800bc26:	2107      	movs	r1, #7
 800bc28:	4851      	ldr	r0, [pc, #324]	@ (800bd70 <OnRxDone+0x2cc>)
 800bc2a:	f7f6 fd1f 	bl	800266c <NEXTION_SetPicture>
 800bc2e:	e002      	b.n	800bc36 <OnRxDone+0x192>
			}
		}
		else
		{
			// Valeur inconnue, erreur ou trame non reconnue
			OnRxError();
 800bc30:	f000 f8ce 	bl	800bdd0 <OnRxError>
			return;
 800bc34:	e080      	b.n	800bd38 <OnRxDone+0x294>
		}

		TIM16->CNT = 0;
 800bc36:	4b4f      	ldr	r3, [pc, #316]	@ (800bd74 <OnRxDone+0x2d0>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	625a      	str	r2, [r3, #36]	@ 0x24

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2104      	movs	r1, #4
 800bc40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bc44:	f7f8 f8d1 	bl	8003dea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2108      	movs	r1, #8
 800bc4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bc50:	f7f8 f8cb 	bl	8003dea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	2102      	movs	r1, #2
 800bc58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bc5c:	f7f8 f8c5 	bl	8003dea <HAL_GPIO_WritePin>

		NEXTION_SetText("main.t_radio", "OK");
 800bc60:	493c      	ldr	r1, [pc, #240]	@ (800bd54 <OnRxDone+0x2b0>)
 800bc62:	4845      	ldr	r0, [pc, #276]	@ (800bd78 <OnRxDone+0x2d4>)
 800bc64:	f7f6 fca2 	bl	80025ac <NEXTION_SetText>
		NEXTION_SetPicture("main.p_radio", 9);
 800bc68:	2109      	movs	r1, #9
 800bc6a:	4844      	ldr	r0, [pc, #272]	@ (800bd7c <OnRxDone+0x2d8>)
 800bc6c:	f7f6 fcfe 	bl	800266c <NEXTION_SetPicture>
		NEXTION_SetBackgroundColor("main.t_radio", 5683);
 800bc70:	f241 6133 	movw	r1, #5683	@ 0x1633
 800bc74:	4840      	ldr	r0, [pc, #256]	@ (800bd78 <OnRxDone+0x2d4>)
 800bc76:	f7f6 fcc9 	bl	800260c <NEXTION_SetBackgroundColor>

		// Display temperatures from received payload bytes [14..19]
		NEXTION_SetValue("boxState.x_e1T", (int)TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[14] << 8 | RxBuffer[15]), tmp_config.resolution));
 800bc7a:	4b31      	ldr	r3, [pc, #196]	@ (800bd40 <OnRxDone+0x29c>)
 800bc7c:	7b9b      	ldrb	r3, [r3, #14]
 800bc7e:	b21b      	sxth	r3, r3
 800bc80:	021b      	lsls	r3, r3, #8
 800bc82:	b21a      	sxth	r2, r3
 800bc84:	4b2e      	ldr	r3, [pc, #184]	@ (800bd40 <OnRxDone+0x29c>)
 800bc86:	7bdb      	ldrb	r3, [r3, #15]
 800bc88:	b21b      	sxth	r3, r3
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	b21b      	sxth	r3, r3
 800bc8e:	4a3c      	ldr	r2, [pc, #240]	@ (800bd80 <OnRxDone+0x2dc>)
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f6 f957 	bl	8001f48 <TMP275_ConvertRawToTemperature>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7f5 f85b 	bl	8000d58 <__aeabi_f2iz>
 800bca2:	4603      	mov	r3, r0
 800bca4:	4619      	mov	r1, r3
 800bca6:	4837      	ldr	r0, [pc, #220]	@ (800bd84 <OnRxDone+0x2e0>)
 800bca8:	f7f6 fc98 	bl	80025dc <NEXTION_SetValue>
		NEXTION_SetValue("boxState.x_e1C", (int)TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[16] << 8 | RxBuffer[17]), tmp_config.resolution));
 800bcac:	4b24      	ldr	r3, [pc, #144]	@ (800bd40 <OnRxDone+0x29c>)
 800bcae:	7c1b      	ldrb	r3, [r3, #16]
 800bcb0:	b21b      	sxth	r3, r3
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	4b22      	ldr	r3, [pc, #136]	@ (800bd40 <OnRxDone+0x29c>)
 800bcb8:	7c5b      	ldrb	r3, [r3, #17]
 800bcba:	b21b      	sxth	r3, r3
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	b21b      	sxth	r3, r3
 800bcc0:	4a2f      	ldr	r2, [pc, #188]	@ (800bd80 <OnRxDone+0x2dc>)
 800bcc2:	7812      	ldrb	r2, [r2, #0]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7f6 f93e 	bl	8001f48 <TMP275_ConvertRawToTemperature>
 800bccc:	4603      	mov	r3, r0
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f5 f842 	bl	8000d58 <__aeabi_f2iz>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	482b      	ldr	r0, [pc, #172]	@ (800bd88 <OnRxDone+0x2e4>)
 800bcda:	f7f6 fc7f 	bl	80025dc <NEXTION_SetValue>
		NEXTION_SetValue("boxState.x_e1A", (int)TMP275_ConvertRawToTemperature((int16_t)(RxBuffer[18] << 8 | RxBuffer[19]), tmp_config.resolution));
 800bcde:	4b18      	ldr	r3, [pc, #96]	@ (800bd40 <OnRxDone+0x29c>)
 800bce0:	7c9b      	ldrb	r3, [r3, #18]
 800bce2:	b21b      	sxth	r3, r3
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	b21a      	sxth	r2, r3
 800bce8:	4b15      	ldr	r3, [pc, #84]	@ (800bd40 <OnRxDone+0x29c>)
 800bcea:	7cdb      	ldrb	r3, [r3, #19]
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	b21b      	sxth	r3, r3
 800bcf2:	4a23      	ldr	r2, [pc, #140]	@ (800bd80 <OnRxDone+0x2dc>)
 800bcf4:	7812      	ldrb	r2, [r2, #0]
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7f6 f925 	bl	8001f48 <TMP275_ConvertRawToTemperature>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7f5 f829 	bl	8000d58 <__aeabi_f2iz>
 800bd06:	4603      	mov	r3, r0
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4820      	ldr	r0, [pc, #128]	@ (800bd8c <OnRxDone+0x2e8>)
 800bd0c:	f7f6 fc66 	bl	80025dc <NEXTION_SetValue>

		if(isError != 0)
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <OnRxDone+0x282>
		{
			NEXTION_SendCommand("main.bcg_error.en=1");
 800bd16:	481e      	ldr	r0, [pc, #120]	@ (800bd90 <OnRxDone+0x2ec>)
 800bd18:	f7f6 fbfe 	bl	8002518 <NEXTION_SendCommand>
			SubghzApp_ValueError(isError);
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fae2 	bl	800c2e8 <SubghzApp_ValueError>
 800bd24:	e002      	b.n	800bd2c <OnRxDone+0x288>
		}
		else NEXTION_SendCommand("main.bcg_error.en=0");
 800bd26:	481b      	ldr	r0, [pc, #108]	@ (800bd94 <OnRxDone+0x2f0>)
 800bd28:	f7f6 fbf6 	bl	8002518 <NEXTION_SendCommand>
	}
	// After handling a frame, resume RX continuously
	SubghzApp_Rx();
 800bd2c:	f000 f8fe 	bl	800bf2c <SubghzApp_Rx>
 800bd30:	e002      	b.n	800bd38 <OnRxDone+0x294>
		return;
 800bd32:	bf00      	nop
 800bd34:	e000      	b.n	800bd38 <OnRxDone+0x294>
		return;
 800bd36:	bf00      	nop
	/* USER CODE END OnRxDone */
}
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	200004d8 	.word	0x200004d8
 800bd44:	20000060 	.word	0x20000060
 800bd48:	0800de14 	.word	0x0800de14
 800bd4c:	0800de18 	.word	0x0800de18
 800bd50:	0800de24 	.word	0x0800de24
 800bd54:	0800de30 	.word	0x0800de30
 800bd58:	0800de34 	.word	0x0800de34
 800bd5c:	0800de44 	.word	0x0800de44
 800bd60:	0800de54 	.word	0x0800de54
 800bd64:	20000508 	.word	0x20000508
 800bd68:	0800de60 	.word	0x0800de60
 800bd6c:	0800de6c 	.word	0x0800de6c
 800bd70:	0800de78 	.word	0x0800de78
 800bd74:	40014400 	.word	0x40014400
 800bd78:	0800de84 	.word	0x0800de84
 800bd7c:	0800de94 	.word	0x0800de94
 800bd80:	0800e330 	.word	0x0800e330
 800bd84:	0800dea4 	.word	0x0800dea4
 800bd88:	0800deb4 	.word	0x0800deb4
 800bd8c:	0800dec4 	.word	0x0800dec4
 800bd90:	0800ded4 	.word	0x0800ded4
 800bd94:	0800dee8 	.word	0x0800dee8

0800bd98 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnTxTimeout */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2104      	movs	r1, #4
 800bda0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bda4:	f7f8 f821 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2108      	movs	r1, #8
 800bdac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bdb0:	f7f8 f81b 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	2102      	movs	r1, #2
 800bdb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bdbc:	f7f8 f815 	bl	8003dea <HAL_GPIO_WritePin>
	/* USER CODE END OnTxTimeout */
}
 800bdc0:	bf00      	nop
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnRxTimeout */
	// Resume RX after a timeout
	SubghzApp_Rx();
 800bdc8:	f000 f8b0 	bl	800bf2c <SubghzApp_Rx>
	/* USER CODE END OnRxTimeout */
}
 800bdcc:	bf00      	nop
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <OnRxError>:

static void OnRxError(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OnRxError */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bddc:	f7f8 f805 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800bde0:	2200      	movs	r2, #0
 800bde2:	2108      	movs	r1, #8
 800bde4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bde8:	f7f7 ffff 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800bdec:	2201      	movs	r2, #1
 800bdee:	2102      	movs	r1, #2
 800bdf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bdf4:	f7f7 fff9 	bl	8003dea <HAL_GPIO_WritePin>
	// Resume RX after an error
	SubghzApp_Rx();
 800bdf8:	f000 f898 	bl	800bf2c <SubghzApp_Rx>
	/* USER CODE END OnRxError */
}
 800bdfc:	bf00      	nop
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <SubghzApp_Timeout>:

/* USER CODE BEGIN PrFD */
void SubghzApp_Timeout(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
	//TIM16 Event
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800be04:	2200      	movs	r2, #0
 800be06:	2104      	movs	r1, #4
 800be08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be0c:	f7f7 ffed 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800be10:	2200      	movs	r2, #0
 800be12:	2108      	movs	r1, #8
 800be14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be18:	f7f7 ffe7 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800be1c:	2201      	movs	r2, #1
 800be1e:	2102      	movs	r1, #2
 800be20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800be24:	f7f7 ffe1 	bl	8003dea <HAL_GPIO_WritePin>

	NEXTION_SetText("main.t_radio", "DC");
 800be28:	491f      	ldr	r1, [pc, #124]	@ (800bea8 <SubghzApp_Timeout+0xa8>)
 800be2a:	4820      	ldr	r0, [pc, #128]	@ (800beac <SubghzApp_Timeout+0xac>)
 800be2c:	f7f6 fbbe 	bl	80025ac <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_radio", 64333);
 800be30:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800be34:	481d      	ldr	r0, [pc, #116]	@ (800beac <SubghzApp_Timeout+0xac>)
 800be36:	f7f6 fbe9 	bl	800260c <NEXTION_SetBackgroundColor>
	// Fix: set radio picture, not secheur
	NEXTION_SendCommand("main.p_radio.pic=10");
 800be3a:	481d      	ldr	r0, [pc, #116]	@ (800beb0 <SubghzApp_Timeout+0xb0>)
 800be3c:	f7f6 fb6c 	bl	8002518 <NEXTION_SendCommand>

	NEXTION_SetText("main.t_sec", "DC");
 800be40:	4919      	ldr	r1, [pc, #100]	@ (800bea8 <SubghzApp_Timeout+0xa8>)
 800be42:	481c      	ldr	r0, [pc, #112]	@ (800beb4 <SubghzApp_Timeout+0xb4>)
 800be44:	f7f6 fbb2 	bl	80025ac <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_sec", 64333);
 800be48:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800be4c:	4819      	ldr	r0, [pc, #100]	@ (800beb4 <SubghzApp_Timeout+0xb4>)
 800be4e:	f7f6 fbdd 	bl	800260c <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_sec.pic=6");
 800be52:	4819      	ldr	r0, [pc, #100]	@ (800beb8 <SubghzApp_Timeout+0xb8>)
 800be54:	f7f6 fb60 	bl	8002518 <NEXTION_SendCommand>

	NEXTION_SetText("main.t_gaz", "DC");
 800be58:	4913      	ldr	r1, [pc, #76]	@ (800bea8 <SubghzApp_Timeout+0xa8>)
 800be5a:	4818      	ldr	r0, [pc, #96]	@ (800bebc <SubghzApp_Timeout+0xbc>)
 800be5c:	f7f6 fba6 	bl	80025ac <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_gaz", 64333);
 800be60:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800be64:	4815      	ldr	r0, [pc, #84]	@ (800bebc <SubghzApp_Timeout+0xbc>)
 800be66:	f7f6 fbd1 	bl	800260c <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_gaz.pic=2");
 800be6a:	4815      	ldr	r0, [pc, #84]	@ (800bec0 <SubghzApp_Timeout+0xc0>)
 800be6c:	f7f6 fb54 	bl	8002518 <NEXTION_SendCommand>

	NEXTION_SetText("main.t_casier", "DC");
 800be70:	490d      	ldr	r1, [pc, #52]	@ (800bea8 <SubghzApp_Timeout+0xa8>)
 800be72:	4814      	ldr	r0, [pc, #80]	@ (800bec4 <SubghzApp_Timeout+0xc4>)
 800be74:	f7f6 fb9a 	bl	80025ac <NEXTION_SetText>
	NEXTION_SetBackgroundColor("main.t_casier", 64333);
 800be78:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800be7c:	4811      	ldr	r0, [pc, #68]	@ (800bec4 <SubghzApp_Timeout+0xc4>)
 800be7e:	f7f6 fbc5 	bl	800260c <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_casier.pic=4");
 800be82:	4811      	ldr	r0, [pc, #68]	@ (800bec8 <SubghzApp_Timeout+0xc8>)
 800be84:	f7f6 fb48 	bl	8002518 <NEXTION_SendCommand>

	NEXTION_SetBackgroundColor("main.x_prs", 64333);
 800be88:	f64f 314d 	movw	r1, #64333	@ 0xfb4d
 800be8c:	480f      	ldr	r0, [pc, #60]	@ (800becc <SubghzApp_Timeout+0xcc>)
 800be8e:	f7f6 fbbd 	bl	800260c <NEXTION_SetBackgroundColor>
	NEXTION_SendCommand("main.p_prs.pic=0");
 800be92:	480f      	ldr	r0, [pc, #60]	@ (800bed0 <SubghzApp_Timeout+0xd0>)
 800be94:	f7f6 fb40 	bl	8002518 <NEXTION_SendCommand>

	NEXTION_SendCommand("main.bcg_error.en=1");
 800be98:	480e      	ldr	r0, [pc, #56]	@ (800bed4 <SubghzApp_Timeout+0xd4>)
 800be9a:	f7f6 fb3d 	bl	8002518 <NEXTION_SendCommand>

	SubghzApp_ValueError((uint8_t)0b10000);
 800be9e:	2010      	movs	r0, #16
 800bea0:	f000 fa22 	bl	800c2e8 <SubghzApp_ValueError>
}
 800bea4:	bf00      	nop
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	0800defc 	.word	0x0800defc
 800beac:	0800de84 	.word	0x0800de84
 800beb0:	0800df00 	.word	0x0800df00
 800beb4:	0800de6c 	.word	0x0800de6c
 800beb8:	0800df14 	.word	0x0800df14
 800bebc:	0800de18 	.word	0x0800de18
 800bec0:	0800df28 	.word	0x0800df28
 800bec4:	0800de34 	.word	0x0800de34
 800bec8:	0800df3c 	.word	0x0800df3c
 800becc:	0800de54 	.word	0x0800de54
 800bed0:	0800df50 	.word	0x0800df50
 800bed4:	0800ded4 	.word	0x0800ded4

0800bed8 <SubghzApp_Event>:

void SubghzApp_Event(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
	// TIM2 Event (configured for 5 seconds)
	if(SubghzApp_Mode == SUBGHZ_APP_SLAVE)
 800bedc:	4b11      	ldr	r3, [pc, #68]	@ (800bf24 <SubghzApp_Event+0x4c>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <SubghzApp_Event+0x12>
	{
		// SLAVE only receives, no BEACON, just keep RX
		SubghzApp_Rx();
 800bee4:	f000 f822 	bl	800bf2c <SubghzApp_Rx>
 800bee8:	e00c      	b.n	800bf04 <SubghzApp_Event+0x2c>
	}
	else if(SubghzApp_Mode == SUBGHZ_APP_MASTER_1)
 800beea:	4b0e      	ldr	r3, [pc, #56]	@ (800bf24 <SubghzApp_Event+0x4c>)
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d102      	bne.n	800bef8 <SubghzApp_Event+0x20>
	{
		// MASTER_1 transmits every period
		SubghzApp_Tx_Event();
 800bef2:	f000 f885 	bl	800c000 <SubghzApp_Tx_Event>
 800bef6:	e005      	b.n	800bf04 <SubghzApp_Event+0x2c>
	}
	else if(SubghzApp_Mode == SUBGHZ_APP_MASTER_2)
 800bef8:	4b0a      	ldr	r3, [pc, #40]	@ (800bf24 <SubghzApp_Event+0x4c>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b02      	cmp	r3, #2
 800befe:	d101      	bne.n	800bf04 <SubghzApp_Event+0x2c>
	{
		// MASTER_2 transmits every period
		SubghzApp_Tx_Event();
 800bf00:	f000 f87e 	bl	800c000 <SubghzApp_Tx_Event>
	}

	// Maintain legacy state counter but it's no longer used for scheduling
	SubghzApp_State_n++;
 800bf04:	4b08      	ldr	r3, [pc, #32]	@ (800bf28 <SubghzApp_Event+0x50>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	4b06      	ldr	r3, [pc, #24]	@ (800bf28 <SubghzApp_Event+0x50>)
 800bf0e:	701a      	strb	r2, [r3, #0]
	if(SubghzApp_State_n > 5) SubghzApp_State_n = 0;
 800bf10:	4b05      	ldr	r3, [pc, #20]	@ (800bf28 <SubghzApp_Event+0x50>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b05      	cmp	r3, #5
 800bf16:	d902      	bls.n	800bf1e <SubghzApp_Event+0x46>
 800bf18:	4b03      	ldr	r3, [pc, #12]	@ (800bf28 <SubghzApp_Event+0x50>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	701a      	strb	r2, [r3, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20000069 	.word	0x20000069
 800bf28:	200004d4 	.word	0x200004d4

0800bf2c <SubghzApp_Rx>:
	NEXTION_SetValue("boxState.x_r1C", (int)(tmp2 * 10));
	NEXTION_SetValue("boxState.x_r1A", (int)(tmp3 * 10));
}

void SubghzApp_Rx(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
	if(SubghzApp_Mode == SUBGHZ_APP_MASTER_1) SubghzApp_State = SUBGHZ_APP_MASTER_1_RX;
 800bf30:	4b13      	ldr	r3, [pc, #76]	@ (800bf80 <SubghzApp_Rx+0x54>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d103      	bne.n	800bf40 <SubghzApp_Rx+0x14>
 800bf38:	4b12      	ldr	r3, [pc, #72]	@ (800bf84 <SubghzApp_Rx+0x58>)
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	e00e      	b.n	800bf5e <SubghzApp_Rx+0x32>
	else if(SubghzApp_Mode == SUBGHZ_APP_MASTER_2) SubghzApp_State = SUBGHZ_APP_MASTER_2_RX;
 800bf40:	4b0f      	ldr	r3, [pc, #60]	@ (800bf80 <SubghzApp_Rx+0x54>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d103      	bne.n	800bf50 <SubghzApp_Rx+0x24>
 800bf48:	4b0e      	ldr	r3, [pc, #56]	@ (800bf84 <SubghzApp_Rx+0x58>)
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	e006      	b.n	800bf5e <SubghzApp_Rx+0x32>
	else if(SubghzApp_Mode == SUBGHZ_APP_SLAVE) SubghzApp_State = SUBGHZ_APP_SLAVE_RX;
 800bf50:	4b0b      	ldr	r3, [pc, #44]	@ (800bf80 <SubghzApp_Rx+0x54>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <SubghzApp_Rx+0x32>
 800bf58:	4b0a      	ldr	r3, [pc, #40]	@ (800bf84 <SubghzApp_Rx+0x58>)
 800bf5a:	2205      	movs	r2, #5
 800bf5c:	701a      	strb	r2, [r3, #0]


	SUBGRF_SetSwitch(RFO_HP, RFSWITCH_RX);
 800bf5e:	2100      	movs	r1, #0
 800bf60:	2002      	movs	r0, #2
 800bf62:	f7ff fa4f 	bl	800b404 <SUBGRF_SetSwitch>

	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 1);
 800bf66:	2201      	movs	r2, #1
 800bf68:	2104      	movs	r1, #4
 800bf6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bf6e:	f7f7 ff3c 	bl	8003dea <HAL_GPIO_WritePin>
	// Do not force LED_GREEN off here; preserve TX indication until next event
	// HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);

	Radio.Rx(0);
 800bf72:	4b05      	ldr	r3, [pc, #20]	@ (800bf88 <SubghzApp_Rx+0x5c>)
 800bf74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf76:	2000      	movs	r0, #0
 800bf78:	4798      	blx	r3
}
 800bf7a:	bf00      	nop
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000069 	.word	0x20000069
 800bf84:	2000050a 	.word	0x2000050a
 800bf88:	0800e378 	.word	0x0800e378

0800bf8c <SubghzApp_Tx>:

void SubghzApp_Tx(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
	// Byte 9 : identité de l'émetteur (0, 1 ou 2)
	buffer[9] = sender_id;
 800bf90:	4b16      	ldr	r3, [pc, #88]	@ (800bfec <SubghzApp_Tx+0x60>)
 800bf92:	781a      	ldrb	r2, [r3, #0]
 800bf94:	4b16      	ldr	r3, [pc, #88]	@ (800bff0 <SubghzApp_Tx+0x64>)
 800bf96:	725a      	strb	r2, [r3, #9]
	if(sender_id == 1) SubghzApp_State = SUBGHZ_APP_MASTER_1_TX;
 800bf98:	4b14      	ldr	r3, [pc, #80]	@ (800bfec <SubghzApp_Tx+0x60>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d103      	bne.n	800bfa8 <SubghzApp_Tx+0x1c>
 800bfa0:	4b14      	ldr	r3, [pc, #80]	@ (800bff4 <SubghzApp_Tx+0x68>)
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	701a      	strb	r2, [r3, #0]
 800bfa6:	e00e      	b.n	800bfc6 <SubghzApp_Tx+0x3a>
	else if(sender_id == 2) SubghzApp_State = SUBGHZ_APP_MASTER_2_TX;
 800bfa8:	4b10      	ldr	r3, [pc, #64]	@ (800bfec <SubghzApp_Tx+0x60>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d103      	bne.n	800bfb8 <SubghzApp_Tx+0x2c>
 800bfb0:	4b10      	ldr	r3, [pc, #64]	@ (800bff4 <SubghzApp_Tx+0x68>)
 800bfb2:	2204      	movs	r2, #4
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	e006      	b.n	800bfc6 <SubghzApp_Tx+0x3a>
	else if(sender_id == 0) SubghzApp_State = SUBGHZ_APP_SLAVE_TX;
 800bfb8:	4b0c      	ldr	r3, [pc, #48]	@ (800bfec <SubghzApp_Tx+0x60>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <SubghzApp_Tx+0x3a>
 800bfc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bff4 <SubghzApp_Tx+0x68>)
 800bfc2:	2206      	movs	r2, #6
 800bfc4:	701a      	strb	r2, [r3, #0]

	// Indicate TX: Green ON, Blue OFF
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, 0);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2104      	movs	r1, #4
 800bfca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bfce:	f7f7 ff0c 	bl	8003dea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	2108      	movs	r1, #8
 800bfd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bfda:	f7f7 ff06 	bl	8003dea <HAL_GPIO_WritePin>

	Radio.Send(buffer, sizeof(buffer));
 800bfde:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <SubghzApp_Tx+0x6c>)
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	2118      	movs	r1, #24
 800bfe4:	4802      	ldr	r0, [pc, #8]	@ (800bff0 <SubghzApp_Tx+0x64>)
 800bfe6:	4798      	blx	r3
}
 800bfe8:	bf00      	nop
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20000514 	.word	0x20000514
 800bff0:	200004f0 	.word	0x200004f0
 800bff4:	2000050a 	.word	0x2000050a
 800bff8:	0800e378 	.word	0x0800e378
 800bffc:	00000000 	.word	0x00000000

0800c000 <SubghzApp_Tx_Event>:

void SubghzApp_Tx_Event(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
	int16_t tmp1;
	int16_t tmp2;
	int16_t tmp3;

	TMP275_ReadTemperatureRaw(&tmp_sensor_1, &tmp1);
 800c006:	f107 030a 	add.w	r3, r7, #10
 800c00a:	4619      	mov	r1, r3
 800c00c:	4856      	ldr	r0, [pc, #344]	@ (800c168 <SubghzApp_Tx_Event+0x168>)
 800c00e:	f7f6 f8a8 	bl	8002162 <TMP275_ReadTemperatureRaw>
	TMP275_ReadTemperatureRaw(&tmp_sensor_2, &tmp2);
 800c012:	f107 0308 	add.w	r3, r7, #8
 800c016:	4619      	mov	r1, r3
 800c018:	4854      	ldr	r0, [pc, #336]	@ (800c16c <SubghzApp_Tx_Event+0x16c>)
 800c01a:	f7f6 f8a2 	bl	8002162 <TMP275_ReadTemperatureRaw>
	TMP275_ReadTemperatureRaw(&tmp_sensor_3, &tmp3);
 800c01e:	1dbb      	adds	r3, r7, #6
 800c020:	4619      	mov	r1, r3
 800c022:	4853      	ldr	r0, [pc, #332]	@ (800c170 <SubghzApp_Tx_Event+0x170>)
 800c024:	f7f6 f89d 	bl	8002162 <TMP275_ReadTemperatureRaw>

	buffer[14] = (uint8_t) (tmp1 >> 8);
 800c028:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c02c:	121b      	asrs	r3, r3, #8
 800c02e:	b21b      	sxth	r3, r3
 800c030:	b2da      	uxtb	r2, r3
 800c032:	4b50      	ldr	r3, [pc, #320]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c034:	739a      	strb	r2, [r3, #14]
	buffer[15] = (uint8_t) tmp1;
 800c036:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	4b4d      	ldr	r3, [pc, #308]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c03e:	73da      	strb	r2, [r3, #15]
	buffer[16] = (uint8_t) (tmp2 >> 8);
 800c040:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c044:	121b      	asrs	r3, r3, #8
 800c046:	b21b      	sxth	r3, r3
 800c048:	b2da      	uxtb	r2, r3
 800c04a:	4b4a      	ldr	r3, [pc, #296]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c04c:	741a      	strb	r2, [r3, #16]
	buffer[17] = (uint8_t) tmp2;
 800c04e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c052:	b2da      	uxtb	r2, r3
 800c054:	4b47      	ldr	r3, [pc, #284]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c056:	745a      	strb	r2, [r3, #17]
	buffer[18] = (uint8_t) (tmp3 >> 8);
 800c058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c05c:	121b      	asrs	r3, r3, #8
 800c05e:	b21b      	sxth	r3, r3
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4b44      	ldr	r3, [pc, #272]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c064:	749a      	strb	r2, [r3, #18]
	buffer[19] = (uint8_t) tmp3;
 800c066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	4b41      	ldr	r3, [pc, #260]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c06e:	74da      	strb	r2, [r3, #19]

	if(SubghzApp_Mode == SUBGHZ_APP_MASTER_1)
 800c070:	4b41      	ldr	r3, [pc, #260]	@ (800c178 <SubghzApp_Tx_Event+0x178>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d144      	bne.n	800c102 <SubghzApp_Tx_Event+0x102>
	{
		SubghzApp_State = SUBGHZ_APP_MASTER_1_TX;
 800c078:	4b40      	ldr	r3, [pc, #256]	@ (800c17c <SubghzApp_Tx_Event+0x17c>)
 800c07a:	2202      	movs	r2, #2
 800c07c:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 800c07e:	4840      	ldr	r0, [pc, #256]	@ (800c180 <SubghzApp_Tx_Event+0x180>)
 800c080:	f7f6 fea8 	bl	8002dd4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 20);
 800c084:	2114      	movs	r1, #20
 800c086:	483e      	ldr	r0, [pc, #248]	@ (800c180 <SubghzApp_Tx_Event+0x180>)
 800c088:	f7f6 ff1c 	bl	8002ec4 <HAL_ADC_PollForConversion>

		buffer[10] = 0;
 800c08c:	4b39      	ldr	r3, [pc, #228]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c08e:	2200      	movs	r2, #0
 800c090:	729a      	strb	r2, [r3, #10]
		buffer[11] = HAL_GPIO_ReadPin(CASIER_GPIO_Port, CASIER_Pin);
 800c092:	2110      	movs	r1, #16
 800c094:	483b      	ldr	r0, [pc, #236]	@ (800c184 <SubghzApp_Tx_Event+0x184>)
 800c096:	f7f7 fe91 	bl	8003dbc <HAL_GPIO_ReadPin>
 800c09a:	4603      	mov	r3, r0
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b35      	ldr	r3, [pc, #212]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c0a0:	72da      	strb	r2, [r3, #11]
		buffer[12] = HAL_GPIO_ReadPin(GAZ_GPIO_Port, GAZ_Pin);
 800c0a2:	2120      	movs	r1, #32
 800c0a4:	4837      	ldr	r0, [pc, #220]	@ (800c184 <SubghzApp_Tx_Event+0x184>)
 800c0a6:	f7f7 fe89 	bl	8003dbc <HAL_GPIO_ReadPin>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4b31      	ldr	r3, [pc, #196]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c0b0:	731a      	strb	r2, [r3, #12]
		buffer[13] = (((float)(HAL_ADC_GetValue(&hadc) * 10.3421) / 65520) * 10);
 800c0b2:	4833      	ldr	r0, [pc, #204]	@ (800c180 <SubghzApp_Tx_Event+0x180>)
 800c0b4:	f7f6 ff9d 	bl	8002ff2 <HAL_ADC_GetValue>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7f4 fb24 	bl	8000708 <__aeabi_ui2d>
 800c0c0:	a327      	add	r3, pc, #156	@ (adr r3, 800c160 <SubghzApp_Tx_Event+0x160>)
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	f7f4 f8b3 	bl	8000230 <__aeabi_dmul>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7f4 fb93 	bl	80007fc <__aeabi_d2f>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	492b      	ldr	r1, [pc, #172]	@ (800c188 <SubghzApp_Tx_Event+0x188>)
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7f4 fda0 	bl	8000c20 <__aeabi_fdiv>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	492a      	ldr	r1, [pc, #168]	@ (800c18c <SubghzApp_Tx_Event+0x18c>)
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7f4 fce7 	bl	8000ab8 <__aeabi_fmul>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7f4 fe59 	bl	8000da4 <__aeabi_f2uiz>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	4b1f      	ldr	r3, [pc, #124]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c0f8:	735a      	strb	r2, [r3, #13]
		HAL_ADC_Stop(&hadc);
 800c0fa:	4821      	ldr	r0, [pc, #132]	@ (800c180 <SubghzApp_Tx_Event+0x180>)
 800c0fc:	f7f6 feb0 	bl	8002e60 <HAL_ADC_Stop>
 800c100:	e00e      	b.n	800c120 <SubghzApp_Tx_Event+0x120>
	}
	else if (SubghzApp_Mode == SUBGHZ_APP_MASTER_2)
 800c102:	4b1d      	ldr	r3, [pc, #116]	@ (800c178 <SubghzApp_Tx_Event+0x178>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d10a      	bne.n	800c120 <SubghzApp_Tx_Event+0x120>
	{
		SubghzApp_State = SUBGHZ_APP_MASTER_2_TX;
 800c10a:	4b1c      	ldr	r3, [pc, #112]	@ (800c17c <SubghzApp_Tx_Event+0x17c>)
 800c10c:	2204      	movs	r2, #4
 800c10e:	701a      	strb	r2, [r3, #0]
		buffer[12] = HAL_GPIO_ReadPin(SECHEUR_GPIO_Port, SECHEUR_Pin);
 800c110:	2108      	movs	r1, #8
 800c112:	481c      	ldr	r0, [pc, #112]	@ (800c184 <SubghzApp_Tx_Event+0x184>)
 800c114:	f7f7 fe52 	bl	8003dbc <HAL_GPIO_ReadPin>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b15      	ldr	r3, [pc, #84]	@ (800c174 <SubghzApp_Tx_Event+0x174>)
 800c11e:	731a      	strb	r2, [r3, #12]
	}

	// Schedule random jitter before transmission (0-500 ms) without blocking in ISR
	int jitter = rand() % 501;
 800c120:	f000 fc58 	bl	800c9d4 <rand>
 800c124:	4603      	mov	r3, r0
 800c126:	4a1a      	ldr	r2, [pc, #104]	@ (800c190 <SubghzApp_Tx_Event+0x190>)
 800c128:	fb82 1203 	smull	r1, r2, r2, r3
 800c12c:	1191      	asrs	r1, r2, #6
 800c12e:	17da      	asrs	r2, r3, #31
 800c130:	1a8a      	subs	r2, r1, r2
 800c132:	f240 11f5 	movw	r1, #501	@ 0x1f5
 800c136:	fb01 f202 	mul.w	r2, r1, r2
 800c13a:	1a9b      	subs	r3, r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]
	tx_due_tick = HAL_GetTick() + (uint32_t)jitter;
 800c13e:	f7f5 fc3f 	bl	80019c0 <HAL_GetTick>
 800c142:	4602      	mov	r2, r0
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	4413      	add	r3, r2
 800c148:	4a12      	ldr	r2, [pc, #72]	@ (800c194 <SubghzApp_Tx_Event+0x194>)
 800c14a:	6013      	str	r3, [r2, #0]
	tx_jitter_pending = 1;
 800c14c:	4b12      	ldr	r3, [pc, #72]	@ (800c198 <SubghzApp_Tx_Event+0x198>)
 800c14e:	2201      	movs	r2, #1
 800c150:	701a      	strb	r2, [r3, #0]
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	f3af 8000 	nop.w
 800c160:	bb2fec57 	.word	0xbb2fec57
 800c164:	4024af27 	.word	0x4024af27
 800c168:	20000004 	.word	0x20000004
 800c16c:	20000020 	.word	0x20000020
 800c170:	2000003c 	.word	0x2000003c
 800c174:	200004f0 	.word	0x200004f0
 800c178:	20000069 	.word	0x20000069
 800c17c:	2000050a 	.word	0x2000050a
 800c180:	200000e8 	.word	0x200000e8
 800c184:	48000400 	.word	0x48000400
 800c188:	477ff000 	.word	0x477ff000
 800c18c:	41200000 	.word	0x41200000
 800c190:	20b3dd41 	.word	0x20b3dd41
 800c194:	20000518 	.word	0x20000518
 800c198:	20000515 	.word	0x20000515

0800c19c <SubghzApp_BackgroundProcess>:

void SubghzApp_BackgroundProcess(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
	if (tx_jitter_pending)
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d0 <SubghzApp_BackgroundProcess+0x34>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00d      	beq.n	800c1c8 <SubghzApp_BackgroundProcess+0x2c>
	{
		uint32_t now = HAL_GetTick();
 800c1ac:	f7f5 fc08 	bl	80019c0 <HAL_GetTick>
 800c1b0:	6078      	str	r0, [r7, #4]
		// Handle tick wrap-around correctly using subtraction
		if ((int32_t)(now - tx_due_tick) >= 0)
 800c1b2:	4b08      	ldr	r3, [pc, #32]	@ (800c1d4 <SubghzApp_BackgroundProcess+0x38>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	db04      	blt.n	800c1c8 <SubghzApp_BackgroundProcess+0x2c>
		{
			// Clear pending first to avoid re-entry
			tx_jitter_pending = 0;
 800c1be:	4b04      	ldr	r3, [pc, #16]	@ (800c1d0 <SubghzApp_BackgroundProcess+0x34>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]
			SubghzApp_Tx();
 800c1c4:	f7ff fee2 	bl	800bf8c <SubghzApp_Tx>
		}
	}
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20000515 	.word	0x20000515
 800c1d4:	20000518 	.word	0x20000518

0800c1d8 <SubghzApp_UART_RxDone>:

void SubghzApp_UART_RxDone(uint8_t *rxBuffer, uint16_t rxLen)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	807b      	strh	r3, [r7, #2]
	// Handle standard Nextion reports (optional)
	// 0x66: Current page ID -> 2 bytes + 3 terminators => len = 5
	if (rxLen == 5 && rxBuffer[0] == 0x66)
 800c1e4:	887b      	ldrh	r3, [r7, #2]
 800c1e6:	2b05      	cmp	r3, #5
 800c1e8:	d108      	bne.n	800c1fc <SubghzApp_UART_RxDone+0x24>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b66      	cmp	r3, #102	@ 0x66
 800c1f0:	d104      	bne.n	800c1fc <SubghzApp_UART_RxDone+0x24>
	{
		currentPage = rxBuffer[1];
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	785a      	ldrb	r2, [r3, #1]
 800c1f6:	4b31      	ldr	r3, [pc, #196]	@ (800c2bc <SubghzApp_UART_RxDone+0xe4>)
 800c1f8:	701a      	strb	r2, [r3, #0]
		return;
 800c1fa:	e05b      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
	}

	// Custom protocol
	// 0x01 <page> 0xFF 0xFF 0xFF => len must be exactly 5
	if (rxLen == 5 && rxBuffer[0] == 0x01)
 800c1fc:	887b      	ldrh	r3, [r7, #2]
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	d113      	bne.n	800c22a <SubghzApp_UART_RxDone+0x52>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d10f      	bne.n	800c22a <SubghzApp_UART_RxDone+0x52>
	{
		uint8_t requestedPage = rxBuffer[1];
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	73fb      	strb	r3, [r7, #15]
		if(requestedPage != currentPage)
 800c210:	4b2a      	ldr	r3, [pc, #168]	@ (800c2bc <SubghzApp_UART_RxDone+0xe4>)
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	7bfa      	ldrb	r2, [r7, #15]
 800c216:	429a      	cmp	r2, r3
 800c218:	d043      	beq.n	800c2a2 <SubghzApp_UART_RxDone+0xca>
		{
			NEXTION_ChangePage(requestedPage);
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7f6 fa0d 	bl	800263c <NEXTION_ChangePage>
			currentPage = requestedPage;
 800c222:	4a26      	ldr	r2, [pc, #152]	@ (800c2bc <SubghzApp_UART_RxDone+0xe4>)
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	7013      	strb	r3, [r2, #0]
		}
		return;
 800c228:	e03b      	b.n	800c2a2 <SubghzApp_UART_RxDone+0xca>
	}

	if(rxLen >= 5 && rxBuffer[0] == 0x02)
 800c22a:	887b      	ldrh	r3, [r7, #2]
 800c22c:	2b04      	cmp	r3, #4
 800c22e:	d908      	bls.n	800c242 <SubghzApp_UART_RxDone+0x6a>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d104      	bne.n	800c242 <SubghzApp_UART_RxDone+0x6a>
	{
		// Réglage seuil défaut
		seuil = rxBuffer[1];
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	785a      	ldrb	r2, [r3, #1]
 800c23c:	4b20      	ldr	r3, [pc, #128]	@ (800c2c0 <SubghzApp_UART_RxDone+0xe8>)
 800c23e:	701a      	strb	r2, [r3, #0]
		return;
 800c240:	e038      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
	}
	if(rxLen >= 5 && rxBuffer[0] == 0x03)
 800c242:	887b      	ldrh	r3, [r7, #2]
 800c244:	2b04      	cmp	r3, #4
 800c246:	d903      	bls.n	800c250 <SubghzApp_UART_RxDone+0x78>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d02a      	beq.n	800c2a6 <SubghzApp_UART_RxDone+0xce>
	{
		// Mise à jour OTA
		return;
	}
	if(rxLen >= 5 && rxBuffer[0] == 0x04)
 800c250:	887b      	ldrh	r3, [r7, #2]
 800c252:	2b04      	cmp	r3, #4
 800c254:	d903      	bls.n	800c25e <SubghzApp_UART_RxDone+0x86>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	2b04      	cmp	r3, #4
 800c25c:	d025      	beq.n	800c2aa <SubghzApp_UART_RxDone+0xd2>
	{
		// Test Radio
		return;
	}
	if(rxLen >= 5 && rxBuffer[0] == 0x05)
 800c25e:	887b      	ldrh	r3, [r7, #2]
 800c260:	2b04      	cmp	r3, #4
 800c262:	d903      	bls.n	800c26c <SubghzApp_UART_RxDone+0x94>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b05      	cmp	r3, #5
 800c26a:	d020      	beq.n	800c2ae <SubghzApp_UART_RxDone+0xd6>
	{
		// Test HMI
		return;
	}
	if(rxLen == 5 && rxBuffer[0] == 0x07)
 800c26c:	887b      	ldrh	r3, [r7, #2]
 800c26e:	2b05      	cmp	r3, #5
 800c270:	d103      	bne.n	800c27a <SubghzApp_UART_RxDone+0xa2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2b07      	cmp	r3, #7
 800c278:	d01b      	beq.n	800c2b2 <SubghzApp_UART_RxDone+0xda>
	{
		// Non utilisé
		return;
	}
	if(rxLen >= 5 && rxBuffer[0] == 0x71)
 800c27a:	887b      	ldrh	r3, [r7, #2]
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d919      	bls.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b71      	cmp	r3, #113	@ 0x71
 800c286:	d115      	bne.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
	{
		// Resultat de l'opération "GET"
		memcpy(redeem_USART_ptr, rxBuffer + 1, redeem_USART_length);
 800c288:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c4 <SubghzApp_UART_RxDone+0xec>)
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3301      	adds	r3, #1
 800c290:	4a0d      	ldr	r2, [pc, #52]	@ (800c2c8 <SubghzApp_UART_RxDone+0xf0>)
 800c292:	6812      	ldr	r2, [r2, #0]
 800c294:	4619      	mov	r1, r3
 800c296:	f000 fd8e 	bl	800cdb6 <memcpy>
		redeem_done = 1;
 800c29a:	4b0c      	ldr	r3, [pc, #48]	@ (800c2cc <SubghzApp_UART_RxDone+0xf4>)
 800c29c:	2201      	movs	r2, #1
 800c29e:	601a      	str	r2, [r3, #0]
		return;
 800c2a0:	e008      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
		return;
 800c2a2:	bf00      	nop
 800c2a4:	e006      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
		return;
 800c2a6:	bf00      	nop
 800c2a8:	e004      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
		return;
 800c2aa:	bf00      	nop
 800c2ac:	e002      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
		return;
 800c2ae:	bf00      	nop
 800c2b0:	e000      	b.n	800c2b4 <SubghzApp_UART_RxDone+0xdc>
		return;
 800c2b2:	bf00      	nop
	}
}
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000509 	.word	0x20000509
 800c2c0:	20000508 	.word	0x20000508
 800c2c4:	2000050c 	.word	0x2000050c
 800c2c8:	20000510 	.word	0x20000510
 800c2cc:	2000006c 	.word	0x2000006c

0800c2d0 <SubghzApp_Start>:

void SubghzApp_Start(void)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
	// No BEACON anymore. Ensure RX is set for SLAVE and timers are handled in main.
	if(SubghzApp_Mode == SUBGHZ_APP_SLAVE)
 800c2d4:	4b03      	ldr	r3, [pc, #12]	@ (800c2e4 <SubghzApp_Start+0x14>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <SubghzApp_Start+0x10>
	{
		SubghzApp_Rx();
 800c2dc:	f7ff fe26 	bl	800bf2c <SubghzApp_Rx>
	}
}
 800c2e0:	bf00      	nop
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20000069 	.word	0x20000069

0800c2e8 <SubghzApp_ValueError>:

void SubghzApp_ValueError(uint8_t errors)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	71fb      	strb	r3, [r7, #7]
	if(errors != past_errors)
 800c2f2:	4b3f      	ldr	r3, [pc, #252]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d074      	beq.n	800c3e6 <SubghzApp_ValueError+0xfe>
	{
		NEXTION_SendCommand("history.t6.txt=history.t5.txt");
 800c2fc:	483d      	ldr	r0, [pc, #244]	@ (800c3f4 <SubghzApp_ValueError+0x10c>)
 800c2fe:	f7f6 f90b 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t5.txt=history.t4.txt");
 800c302:	483d      	ldr	r0, [pc, #244]	@ (800c3f8 <SubghzApp_ValueError+0x110>)
 800c304:	f7f6 f908 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t4.txt=history.t3.txt");
 800c308:	483c      	ldr	r0, [pc, #240]	@ (800c3fc <SubghzApp_ValueError+0x114>)
 800c30a:	f7f6 f905 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t3.txt=history.t2.txt");
 800c30e:	483c      	ldr	r0, [pc, #240]	@ (800c400 <SubghzApp_ValueError+0x118>)
 800c310:	f7f6 f902 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t2.txt=history.t1.txt");
 800c314:	483b      	ldr	r0, [pc, #236]	@ (800c404 <SubghzApp_ValueError+0x11c>)
 800c316:	f7f6 f8ff 	bl	8002518 <NEXTION_SendCommand>

		NEXTION_SendCommand("covx rtc2,history.buffer.txt,0,0");
 800c31a:	483b      	ldr	r0, [pc, #236]	@ (800c408 <SubghzApp_ValueError+0x120>)
 800c31c:	f7f6 f8fc 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt=\"Le \"+history.buffer.txt+\"/\"");
 800c320:	483a      	ldr	r0, [pc, #232]	@ (800c40c <SubghzApp_ValueError+0x124>)
 800c322:	f7f6 f8f9 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc1,history.buffer.txt,0,0");
 800c326:	483a      	ldr	r0, [pc, #232]	@ (800c410 <SubghzApp_ValueError+0x128>)
 800c328:	f7f6 f8f6 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\" a \"");
 800c32c:	4839      	ldr	r0, [pc, #228]	@ (800c414 <SubghzApp_ValueError+0x12c>)
 800c32e:	f7f6 f8f3 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc3,history.buffer.txt,0,0");
 800c332:	4839      	ldr	r0, [pc, #228]	@ (800c418 <SubghzApp_ValueError+0x130>)
 800c334:	f7f6 f8f0 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\":\"");
 800c338:	4838      	ldr	r0, [pc, #224]	@ (800c41c <SubghzApp_ValueError+0x134>)
 800c33a:	f7f6 f8ed 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc4,history.buffer.txt,0,0");
 800c33e:	4838      	ldr	r0, [pc, #224]	@ (800c420 <SubghzApp_ValueError+0x138>)
 800c340:	f7f6 f8ea 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\":\"");
 800c344:	4835      	ldr	r0, [pc, #212]	@ (800c41c <SubghzApp_ValueError+0x134>)
 800c346:	f7f6 f8e7 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("covx rtc5,history.buffer.txt,0,0");
 800c34a:	4836      	ldr	r0, [pc, #216]	@ (800c424 <SubghzApp_ValueError+0x13c>)
 800c34c:	f7f6 f8e4 	bl	8002518 <NEXTION_SendCommand>
		NEXTION_SendCommand("history.t1.txt+=history.buffer.txt+\" : \"");
 800c350:	4835      	ldr	r0, [pc, #212]	@ (800c428 <SubghzApp_ValueError+0x140>)
 800c352:	f7f6 f8e1 	bl	8002518 <NEXTION_SendCommand>

		if(errors >> 4 == 1 && past_errors >> 4 == 0)
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	091b      	lsrs	r3, r3, #4
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d108      	bne.n	800c372 <SubghzApp_ValueError+0x8a>
 800c360:	4b23      	ldr	r3, [pc, #140]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	091b      	lsrs	r3, r3, #4
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <SubghzApp_ValueError+0x8a>
		{
			// Alarme radio
			NEXTION_SendCommand("history.t1.txt+=\"radio,\"");
 800c36c:	482f      	ldr	r0, [pc, #188]	@ (800c42c <SubghzApp_ValueError+0x144>)
 800c36e:	f7f6 f8d3 	bl	8002518 <NEXTION_SendCommand>
		}
		if(errors >> 3 == 1 && past_errors >> 3 == 0)
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	08db      	lsrs	r3, r3, #3
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d108      	bne.n	800c38e <SubghzApp_ValueError+0xa6>
 800c37c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	08db      	lsrs	r3, r3, #3
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <SubghzApp_ValueError+0xa6>
		{
			// Alarme secheur
			NEXTION_SendCommand("history.t1.txt+=\"secheur,\"");
 800c388:	4829      	ldr	r0, [pc, #164]	@ (800c430 <SubghzApp_ValueError+0x148>)
 800c38a:	f7f6 f8c5 	bl	8002518 <NEXTION_SendCommand>
		}
		if(errors >> 2 == 1 && past_errors >> 2 == 0)
 800c38e:	79fb      	ldrb	r3, [r7, #7]
 800c390:	089b      	lsrs	r3, r3, #2
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b01      	cmp	r3, #1
 800c396:	d108      	bne.n	800c3aa <SubghzApp_ValueError+0xc2>
 800c398:	4b15      	ldr	r3, [pc, #84]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	089b      	lsrs	r3, r3, #2
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <SubghzApp_ValueError+0xc2>
		{
			// Alarme gaz
			NEXTION_SendCommand("history.t1.txt+=\"gaz,\"");
 800c3a4:	4823      	ldr	r0, [pc, #140]	@ (800c434 <SubghzApp_ValueError+0x14c>)
 800c3a6:	f7f6 f8b7 	bl	8002518 <NEXTION_SendCommand>
		}
		if(errors >> 1 == 1 && past_errors >> 1 == 0)
 800c3aa:	79fb      	ldrb	r3, [r7, #7]
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d108      	bne.n	800c3c6 <SubghzApp_ValueError+0xde>
 800c3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	085b      	lsrs	r3, r3, #1
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d102      	bne.n	800c3c6 <SubghzApp_ValueError+0xde>
		{
			// Alarme casier
			NEXTION_SendCommand("history.t1.txt+=\"casier,\"");
 800c3c0:	481d      	ldr	r0, [pc, #116]	@ (800c438 <SubghzApp_ValueError+0x150>)
 800c3c2:	f7f6 f8a9 	bl	8002518 <NEXTION_SendCommand>
		}
		if(errors >> 0 == 1 && past_errors >> 0 == 0)
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d106      	bne.n	800c3da <SubghzApp_ValueError+0xf2>
 800c3cc:	4b08      	ldr	r3, [pc, #32]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <SubghzApp_ValueError+0xf2>
		{
			// Alarme pression
			NEXTION_SendCommand("history.t1.txt+=\"pression,\"");
 800c3d4:	4819      	ldr	r0, [pc, #100]	@ (800c43c <SubghzApp_ValueError+0x154>)
 800c3d6:	f7f6 f89f 	bl	8002518 <NEXTION_SendCommand>
		}
		NEXTION_SendCommand("history.t1.txt-=1");
 800c3da:	4819      	ldr	r0, [pc, #100]	@ (800c440 <SubghzApp_ValueError+0x158>)
 800c3dc:	f7f6 f89c 	bl	8002518 <NEXTION_SendCommand>

		past_errors = errors;
 800c3e0:	4a03      	ldr	r2, [pc, #12]	@ (800c3f0 <SubghzApp_ValueError+0x108>)
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	7013      	strb	r3, [r2, #0]
	}
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	2000050b 	.word	0x2000050b
 800c3f4:	0800dfc8 	.word	0x0800dfc8
 800c3f8:	0800dfe8 	.word	0x0800dfe8
 800c3fc:	0800e008 	.word	0x0800e008
 800c400:	0800e028 	.word	0x0800e028
 800c404:	0800e048 	.word	0x0800e048
 800c408:	0800e068 	.word	0x0800e068
 800c40c:	0800e08c 	.word	0x0800e08c
 800c410:	0800e0b8 	.word	0x0800e0b8
 800c414:	0800e0dc 	.word	0x0800e0dc
 800c418:	0800e108 	.word	0x0800e108
 800c41c:	0800e12c 	.word	0x0800e12c
 800c420:	0800e154 	.word	0x0800e154
 800c424:	0800e178 	.word	0x0800e178
 800c428:	0800e19c 	.word	0x0800e19c
 800c42c:	0800e1c8 	.word	0x0800e1c8
 800c430:	0800e1e4 	.word	0x0800e1e4
 800c434:	0800e200 	.word	0x0800e200
 800c438:	0800e218 	.word	0x0800e218
 800c43c:	0800e234 	.word	0x0800e234
 800c440:	0800e250 	.word	0x0800e250

0800c444 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800c44e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	bc80      	pop	{r7}
 800c458:	4770      	bx	lr

0800c45a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	4603      	mov	r3, r0
 800c462:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
  if(Config == RBI_SWITCH_RFO_HP) HAL_GPIO_WritePin(FE_CTRL_GPIO_Port, FE_CTRL_Pin, 1);
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d106      	bne.n	800c47c <RBI_ConfigRFSwitch+0x22>
 800c46e:	2201      	movs	r2, #1
 800c470:	2140      	movs	r1, #64	@ 0x40
 800c472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c476:	f7f7 fcb8 	bl	8003dea <HAL_GPIO_WritePin>
 800c47a:	e008      	b.n	800c48e <RBI_ConfigRFSwitch+0x34>
  else if (Config == RBI_SWITCH_RX) HAL_GPIO_WritePin(FE_CTRL_GPIO_Port, FE_CTRL_Pin, 0);
 800c47c:	79fb      	ldrb	r3, [r7, #7]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d105      	bne.n	800c48e <RBI_ConfigRFSwitch+0x34>
 800c482:	2200      	movs	r2, #0
 800c484:	2140      	movs	r1, #64	@ 0x40
 800c486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c48a:	f7f7 fcae 	bl	8003dea <HAL_GPIO_WritePin>
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800c48e:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800c49e:	2302      	movs	r3, #2
 800c4a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800c4a2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bc80      	pop	{r7}
 800c4ac:	4770      	bx	lr

0800c4ae <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800c4b8:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bc80      	pop	{r7}
 800c4c2:	4770      	bx	lr

0800c4c4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800c4ce:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bc80      	pop	{r7}
 800c4d8:	4770      	bx	lr

0800c4da <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c4da:	b480      	push	{r7}
 800c4dc:	b085      	sub	sp, #20
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800c4ee:	230f      	movs	r3, #15
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e001      	b.n	800c4f8 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800c4f4:	2316      	movs	r3, #22
 800c4f6:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bc80      	pop	{r7}
 800c502:	4770      	bx	lr

0800c504 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	4613      	mov	r3, r2
 800c510:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	613b      	str	r3, [r7, #16]

  while( size-- )
 800c51a:	e007      	b.n	800c52c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	1c53      	adds	r3, r2, #1
 800c520:	613b      	str	r3, [r7, #16]
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	1c59      	adds	r1, r3, #1
 800c526:	6179      	str	r1, [r7, #20]
 800c528:	7812      	ldrb	r2, [r2, #0]
 800c52a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c52c:	88fb      	ldrh	r3, [r7, #6]
 800c52e:	1e5a      	subs	r2, r3, #1
 800c530:	80fa      	strh	r2, [r7, #6]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1f2      	bne.n	800c51c <UTIL_MEM_cpy_8+0x18>
    }
}
 800c536:	bf00      	nop
 800c538:	bf00      	nop
 800c53a:	371c      	adds	r7, #28
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bc80      	pop	{r7}
 800c540:	4770      	bx	lr

0800c542 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	460b      	mov	r3, r1
 800c54c:	70fb      	strb	r3, [r7, #3]
 800c54e:	4613      	mov	r3, r2
 800c550:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800c556:	e004      	b.n	800c562 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	60fa      	str	r2, [r7, #12]
 800c55e:	78fa      	ldrb	r2, [r7, #3]
 800c560:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800c562:	883b      	ldrh	r3, [r7, #0]
 800c564:	1e5a      	subs	r2, r3, #1
 800c566:	803a      	strh	r2, [r7, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f5      	bne.n	800c558 <UTIL_MEM_set_8+0x16>
  }
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	3714      	adds	r7, #20
 800c572:	46bd      	mov	sp, r7
 800c574:	bc80      	pop	{r7}
 800c576:	4770      	bx	lr

0800c578 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4613      	mov	r3, r2
 800c586:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d023      	beq.n	800c5d6 <UTIL_TIMER_Create+0x5e>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d020      	beq.n	800c5d6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c59a:	4b11      	ldr	r3, [pc, #68]	@ (800c5e0 <UTIL_TIMER_Create+0x68>)
 800c59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c59e:	68b8      	ldr	r0, [r7, #8]
 800c5a0:	4798      	blx	r3
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	79fa      	ldrb	r2, [r7, #7]
 800c5ca:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	e000      	b.n	800c5d8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800c5d6:	2301      	movs	r3, #1
  }
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	0800e304 	.word	0x0800e304

0800c5e4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	@ 0x28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d056      	beq.n	800c6a6 <UTIL_TIMER_Start+0xc2>
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f929 	bl	800c850 <TimerExists>
 800c5fe:	4603      	mov	r3, r0
 800c600:	f083 0301 	eor.w	r3, r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04d      	beq.n	800c6a6 <UTIL_TIMER_Start+0xc2>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7a5b      	ldrb	r3, [r3, #9]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d149      	bne.n	800c6a6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c612:	f3ef 8310 	mrs	r3, PRIMASK
 800c616:	613b      	str	r3, [r7, #16]
  return(result);
 800c618:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c61a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c61c:	b672      	cpsid	i
}
 800c61e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c626:	4b24      	ldr	r3, [pc, #144]	@ (800c6b8 <UTIL_TIMER_Start+0xd4>)
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	4798      	blx	r3
 800c62c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800c62e:	6a3a      	ldr	r2, [r7, #32]
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	429a      	cmp	r2, r3
 800c634:	d201      	bcs.n	800c63a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a3a      	ldr	r2, [r7, #32]
 800c63e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800c652:	4b1a      	ldr	r3, [pc, #104]	@ (800c6bc <UTIL_TIMER_Start+0xd8>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800c65a:	4b17      	ldr	r3, [pc, #92]	@ (800c6b8 <UTIL_TIMER_Start+0xd4>)
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f96b 	bl	800c93c <TimerInsertNewHeadTimer>
 800c666:	e017      	b.n	800c698 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c668:	4b13      	ldr	r3, [pc, #76]	@ (800c6b8 <UTIL_TIMER_Start+0xd4>)
 800c66a:	699b      	ldr	r3, [r3, #24]
 800c66c:	4798      	blx	r3
 800c66e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	441a      	add	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	4b0e      	ldr	r3, [pc, #56]	@ (800c6bc <UTIL_TIMER_Start+0xd8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d203      	bcs.n	800c692 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f956 	bl	800c93c <TimerInsertNewHeadTimer>
 800c690:	e002      	b.n	800c698 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f922 	bl	800c8dc <TimerInsertTimer>
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f383 8810 	msr	PRIMASK, r3
}
 800c6a2:	bf00      	nop
  {
 800c6a4:	e002      	b.n	800c6ac <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800c6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3728      	adds	r7, #40	@ 0x28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	0800e304 	.word	0x0800e304
 800c6bc:	2000051c 	.word	0x2000051c

0800c6c0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d05b      	beq.n	800c78a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800c6da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6dc:	b672      	cpsid	i
}
 800c6de:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c6e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800c6e6:	4b2c      	ldr	r3, [pc, #176]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800c6f2:	4b29      	ldr	r3, [pc, #164]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d041      	beq.n	800c77e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c700:	4b25      	ldr	r3, [pc, #148]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	d134      	bne.n	800c774 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800c70a:	4b23      	ldr	r3, [pc, #140]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2200      	movs	r2, #0
 800c710:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800c712:	4b21      	ldr	r3, [pc, #132]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00a      	beq.n	800c732 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800c71c:	4b1e      	ldr	r3, [pc, #120]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	4a1d      	ldr	r2, [pc, #116]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c724:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800c726:	4b1c      	ldr	r3, [pc, #112]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 f8ac 	bl	800c888 <TimerSetTimeout>
 800c730:	e023      	b.n	800c77a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800c732:	4b1a      	ldr	r3, [pc, #104]	@ (800c79c <UTIL_TIMER_Stop+0xdc>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	4798      	blx	r3
            TimerListHead = NULL;
 800c738:	4b17      	ldr	r3, [pc, #92]	@ (800c798 <UTIL_TIMER_Stop+0xd8>)
 800c73a:	2200      	movs	r2, #0
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e01c      	b.n	800c77a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d110      	bne.n	800c76a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d006      	beq.n	800c75e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800c75c:	e00d      	b.n	800c77a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	615a      	str	r2, [r3, #20]
            break;
 800c768:	e007      	b.n	800c77a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e2      	bne.n	800c740 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800c77a:	2300      	movs	r3, #0
 800c77c:	77fb      	strb	r3, [r7, #31]
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f383 8810 	msr	PRIMASK, r3
}
 800c788:	e001      	b.n	800c78e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800c78a:	2301      	movs	r3, #1
 800c78c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800c78e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3720      	adds	r7, #32
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2000051c 	.word	0x2000051c
 800c79c:	0800e304 	.word	0x0800e304

0800c7a0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	73fb      	strb	r3, [r7, #15]
 800c7b8:	e014      	b.n	800c7e4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f0 <UTIL_TIMER_SetPeriod+0x50>)
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7be:	6838      	ldr	r0, [r7, #0]
 800c7c0:	4798      	blx	r3
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f841 	bl	800c850 <TimerExists>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d007      	beq.n	800c7e4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff ff73 	bl	800c6c0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ff02 	bl	800c5e4 <UTIL_TIMER_Start>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	0800e304 	.word	0x0800e304

0800c7f4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800c7fa:	4b06      	ldr	r3, [pc, #24]	@ (800c814 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	4798      	blx	r3
 800c800:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800c802:	4b04      	ldr	r3, [pc, #16]	@ (800c814 <UTIL_TIMER_GetCurrentTime+0x20>)
 800c804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	4798      	blx	r3
 800c80a:	4603      	mov	r3, r0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	0800e304 	.word	0x0800e304

0800c818 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800c820:	4b0a      	ldr	r3, [pc, #40]	@ (800c84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	4798      	blx	r3
 800c826:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800c828:	4b08      	ldr	r3, [pc, #32]	@ (800c84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	4798      	blx	r3
 800c830:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800c832:	4b06      	ldr	r3, [pc, #24]	@ (800c84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800c834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	1a8a      	subs	r2, r1, r2
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	4603      	mov	r3, r0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0800e304 	.word	0x0800e304

0800c850 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c858:	4b0a      	ldr	r3, [pc, #40]	@ (800c884 <TimerExists+0x34>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800c85e:	e008      	b.n	800c872 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	429a      	cmp	r2, r3
 800c866:	d101      	bne.n	800c86c <TimerExists+0x1c>
    {
      return true;
 800c868:	2301      	movs	r3, #1
 800c86a:	e006      	b.n	800c87a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1f3      	bne.n	800c860 <TimerExists+0x10>
  }
  return false;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	bc80      	pop	{r7}
 800c882:	4770      	bx	lr
 800c884:	2000051c 	.word	0x2000051c

0800c888 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800c888:	b590      	push	{r4, r7, lr}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c890:	4b11      	ldr	r3, [pc, #68]	@ (800c8d8 <TimerSetTimeout+0x50>)
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	4798      	blx	r3
 800c896:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2201      	movs	r2, #1
 800c89c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681c      	ldr	r4, [r3, #0]
 800c8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d8 <TimerSetTimeout+0x50>)
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	4798      	blx	r3
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	429c      	cmp	r4, r3
 800c8b0:	d207      	bcs.n	800c8c2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c8b2:	4b09      	ldr	r3, [pc, #36]	@ (800c8d8 <TimerSetTimeout+0x50>)
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	4798      	blx	r3
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	441a      	add	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c8c2:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <TimerSetTimeout+0x50>)
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6812      	ldr	r2, [r2, #0]
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	4798      	blx	r3
}
 800c8ce:	bf00      	nop
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd90      	pop	{r4, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0800e304 	.word	0x0800e304

0800c8dc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c8e4:	4b14      	ldr	r3, [pc, #80]	@ (800c938 <TimerInsertTimer+0x5c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c8ea:	4b13      	ldr	r3, [pc, #76]	@ (800c938 <TimerInsertTimer+0x5c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800c8f2:	e012      	b.n	800c91a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d905      	bls.n	800c90c <TimerInsertTimer+0x30>
    {
        cur = next;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	e006      	b.n	800c91a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	615a      	str	r2, [r3, #20]
        return;
 800c918:	e009      	b.n	800c92e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	695b      	ldr	r3, [r3, #20]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1e8      	bne.n	800c8f4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	615a      	str	r2, [r3, #20]
}
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	bc80      	pop	{r7}
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	2000051c 	.word	0x2000051c

0800c93c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c944:	4b0b      	ldr	r3, [pc, #44]	@ (800c974 <TimerInsertNewHeadTimer+0x38>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800c95c:	4a05      	ldr	r2, [pc, #20]	@ (800c974 <TimerInsertNewHeadTimer+0x38>)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c962:	4b04      	ldr	r3, [pc, #16]	@ (800c974 <TimerInsertNewHeadTimer+0x38>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff ff8e 	bl	800c888 <TimerSetTimeout>
}
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	2000051c 	.word	0x2000051c

0800c978 <srand>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4b10      	ldr	r3, [pc, #64]	@ (800c9bc <srand+0x44>)
 800c97c:	681d      	ldr	r5, [r3, #0]
 800c97e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c980:	4604      	mov	r4, r0
 800c982:	b9b3      	cbnz	r3, 800c9b2 <srand+0x3a>
 800c984:	2018      	movs	r0, #24
 800c986:	f000 fa8d 	bl	800cea4 <malloc>
 800c98a:	4602      	mov	r2, r0
 800c98c:	6328      	str	r0, [r5, #48]	@ 0x30
 800c98e:	b920      	cbnz	r0, 800c99a <srand+0x22>
 800c990:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c0 <srand+0x48>)
 800c992:	480c      	ldr	r0, [pc, #48]	@ (800c9c4 <srand+0x4c>)
 800c994:	2146      	movs	r1, #70	@ 0x46
 800c996:	f000 fa1d 	bl	800cdd4 <__assert_func>
 800c99a:	490b      	ldr	r1, [pc, #44]	@ (800c9c8 <srand+0x50>)
 800c99c:	4b0b      	ldr	r3, [pc, #44]	@ (800c9cc <srand+0x54>)
 800c99e:	e9c0 1300 	strd	r1, r3, [r0]
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d0 <srand+0x58>)
 800c9a4:	6083      	str	r3, [r0, #8]
 800c9a6:	230b      	movs	r3, #11
 800c9a8:	8183      	strh	r3, [r0, #12]
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c9b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	611c      	str	r4, [r3, #16]
 800c9b8:	615a      	str	r2, [r3, #20]
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	2000007c 	.word	0x2000007c
 800c9c0:	0800e4b8 	.word	0x0800e4b8
 800c9c4:	0800e4cf 	.word	0x0800e4cf
 800c9c8:	abcd330e 	.word	0xabcd330e
 800c9cc:	e66d1234 	.word	0xe66d1234
 800c9d0:	0005deec 	.word	0x0005deec

0800c9d4 <rand>:
 800c9d4:	4b16      	ldr	r3, [pc, #88]	@ (800ca30 <rand+0x5c>)
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	681c      	ldr	r4, [r3, #0]
 800c9da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c9dc:	b9b3      	cbnz	r3, 800ca0c <rand+0x38>
 800c9de:	2018      	movs	r0, #24
 800c9e0:	f000 fa60 	bl	800cea4 <malloc>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	6320      	str	r0, [r4, #48]	@ 0x30
 800c9e8:	b920      	cbnz	r0, 800c9f4 <rand+0x20>
 800c9ea:	4b12      	ldr	r3, [pc, #72]	@ (800ca34 <rand+0x60>)
 800c9ec:	4812      	ldr	r0, [pc, #72]	@ (800ca38 <rand+0x64>)
 800c9ee:	2152      	movs	r1, #82	@ 0x52
 800c9f0:	f000 f9f0 	bl	800cdd4 <__assert_func>
 800c9f4:	4911      	ldr	r1, [pc, #68]	@ (800ca3c <rand+0x68>)
 800c9f6:	4b12      	ldr	r3, [pc, #72]	@ (800ca40 <rand+0x6c>)
 800c9f8:	e9c0 1300 	strd	r1, r3, [r0]
 800c9fc:	4b11      	ldr	r3, [pc, #68]	@ (800ca44 <rand+0x70>)
 800c9fe:	6083      	str	r3, [r0, #8]
 800ca00:	230b      	movs	r3, #11
 800ca02:	8183      	strh	r3, [r0, #12]
 800ca04:	2100      	movs	r1, #0
 800ca06:	2001      	movs	r0, #1
 800ca08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ca0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ca0e:	480e      	ldr	r0, [pc, #56]	@ (800ca48 <rand+0x74>)
 800ca10:	690b      	ldr	r3, [r1, #16]
 800ca12:	694c      	ldr	r4, [r1, #20]
 800ca14:	4a0d      	ldr	r2, [pc, #52]	@ (800ca4c <rand+0x78>)
 800ca16:	4358      	muls	r0, r3
 800ca18:	fb02 0004 	mla	r0, r2, r4, r0
 800ca1c:	fba3 3202 	umull	r3, r2, r3, r2
 800ca20:	3301      	adds	r3, #1
 800ca22:	eb40 0002 	adc.w	r0, r0, r2
 800ca26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ca2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ca2e:	bd10      	pop	{r4, pc}
 800ca30:	2000007c 	.word	0x2000007c
 800ca34:	0800e4b8 	.word	0x0800e4b8
 800ca38:	0800e4cf 	.word	0x0800e4cf
 800ca3c:	abcd330e 	.word	0xabcd330e
 800ca40:	e66d1234 	.word	0xe66d1234
 800ca44:	0005deec 	.word	0x0005deec
 800ca48:	5851f42d 	.word	0x5851f42d
 800ca4c:	4c957f2d 	.word	0x4c957f2d

0800ca50 <std>:
 800ca50:	2300      	movs	r3, #0
 800ca52:	b510      	push	{r4, lr}
 800ca54:	4604      	mov	r4, r0
 800ca56:	e9c0 3300 	strd	r3, r3, [r0]
 800ca5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca5e:	6083      	str	r3, [r0, #8]
 800ca60:	8181      	strh	r1, [r0, #12]
 800ca62:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca64:	81c2      	strh	r2, [r0, #14]
 800ca66:	6183      	str	r3, [r0, #24]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	2208      	movs	r2, #8
 800ca6c:	305c      	adds	r0, #92	@ 0x5c
 800ca6e:	f000 f926 	bl	800ccbe <memset>
 800ca72:	4b0d      	ldr	r3, [pc, #52]	@ (800caa8 <std+0x58>)
 800ca74:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca76:	4b0d      	ldr	r3, [pc, #52]	@ (800caac <std+0x5c>)
 800ca78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cab0 <std+0x60>)
 800ca7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <std+0x64>)
 800ca80:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca82:	4b0d      	ldr	r3, [pc, #52]	@ (800cab8 <std+0x68>)
 800ca84:	6224      	str	r4, [r4, #32]
 800ca86:	429c      	cmp	r4, r3
 800ca88:	d006      	beq.n	800ca98 <std+0x48>
 800ca8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca8e:	4294      	cmp	r4, r2
 800ca90:	d002      	beq.n	800ca98 <std+0x48>
 800ca92:	33d0      	adds	r3, #208	@ 0xd0
 800ca94:	429c      	cmp	r4, r3
 800ca96:	d105      	bne.n	800caa4 <std+0x54>
 800ca98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa0:	f000 b986 	b.w	800cdb0 <__retarget_lock_init_recursive>
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	bf00      	nop
 800caa8:	0800cc19 	.word	0x0800cc19
 800caac:	0800cc3b 	.word	0x0800cc3b
 800cab0:	0800cc73 	.word	0x0800cc73
 800cab4:	0800cc97 	.word	0x0800cc97
 800cab8:	20000520 	.word	0x20000520

0800cabc <stdio_exit_handler>:
 800cabc:	4a02      	ldr	r2, [pc, #8]	@ (800cac8 <stdio_exit_handler+0xc>)
 800cabe:	4903      	ldr	r1, [pc, #12]	@ (800cacc <stdio_exit_handler+0x10>)
 800cac0:	4803      	ldr	r0, [pc, #12]	@ (800cad0 <stdio_exit_handler+0x14>)
 800cac2:	f000 b869 	b.w	800cb98 <_fwalk_sglue>
 800cac6:	bf00      	nop
 800cac8:	20000070 	.word	0x20000070
 800cacc:	0800d6d9 	.word	0x0800d6d9
 800cad0:	20000080 	.word	0x20000080

0800cad4 <cleanup_stdio>:
 800cad4:	6841      	ldr	r1, [r0, #4]
 800cad6:	4b0c      	ldr	r3, [pc, #48]	@ (800cb08 <cleanup_stdio+0x34>)
 800cad8:	4299      	cmp	r1, r3
 800cada:	b510      	push	{r4, lr}
 800cadc:	4604      	mov	r4, r0
 800cade:	d001      	beq.n	800cae4 <cleanup_stdio+0x10>
 800cae0:	f000 fdfa 	bl	800d6d8 <_fflush_r>
 800cae4:	68a1      	ldr	r1, [r4, #8]
 800cae6:	4b09      	ldr	r3, [pc, #36]	@ (800cb0c <cleanup_stdio+0x38>)
 800cae8:	4299      	cmp	r1, r3
 800caea:	d002      	beq.n	800caf2 <cleanup_stdio+0x1e>
 800caec:	4620      	mov	r0, r4
 800caee:	f000 fdf3 	bl	800d6d8 <_fflush_r>
 800caf2:	68e1      	ldr	r1, [r4, #12]
 800caf4:	4b06      	ldr	r3, [pc, #24]	@ (800cb10 <cleanup_stdio+0x3c>)
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d004      	beq.n	800cb04 <cleanup_stdio+0x30>
 800cafa:	4620      	mov	r0, r4
 800cafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb00:	f000 bdea 	b.w	800d6d8 <_fflush_r>
 800cb04:	bd10      	pop	{r4, pc}
 800cb06:	bf00      	nop
 800cb08:	20000520 	.word	0x20000520
 800cb0c:	20000588 	.word	0x20000588
 800cb10:	200005f0 	.word	0x200005f0

0800cb14 <global_stdio_init.part.0>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	4b0b      	ldr	r3, [pc, #44]	@ (800cb44 <global_stdio_init.part.0+0x30>)
 800cb18:	4c0b      	ldr	r4, [pc, #44]	@ (800cb48 <global_stdio_init.part.0+0x34>)
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	@ (800cb4c <global_stdio_init.part.0+0x38>)
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	2200      	movs	r2, #0
 800cb22:	2104      	movs	r1, #4
 800cb24:	f7ff ff94 	bl	800ca50 <std>
 800cb28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	2109      	movs	r1, #9
 800cb30:	f7ff ff8e 	bl	800ca50 <std>
 800cb34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb38:	2202      	movs	r2, #2
 800cb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3e:	2112      	movs	r1, #18
 800cb40:	f7ff bf86 	b.w	800ca50 <std>
 800cb44:	20000658 	.word	0x20000658
 800cb48:	20000520 	.word	0x20000520
 800cb4c:	0800cabd 	.word	0x0800cabd

0800cb50 <__sfp_lock_acquire>:
 800cb50:	4801      	ldr	r0, [pc, #4]	@ (800cb58 <__sfp_lock_acquire+0x8>)
 800cb52:	f000 b92e 	b.w	800cdb2 <__retarget_lock_acquire_recursive>
 800cb56:	bf00      	nop
 800cb58:	20000661 	.word	0x20000661

0800cb5c <__sfp_lock_release>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	@ (800cb64 <__sfp_lock_release+0x8>)
 800cb5e:	f000 b929 	b.w	800cdb4 <__retarget_lock_release_recursive>
 800cb62:	bf00      	nop
 800cb64:	20000661 	.word	0x20000661

0800cb68 <__sinit>:
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	f7ff fff0 	bl	800cb50 <__sfp_lock_acquire>
 800cb70:	6a23      	ldr	r3, [r4, #32]
 800cb72:	b11b      	cbz	r3, 800cb7c <__sinit+0x14>
 800cb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb78:	f7ff bff0 	b.w	800cb5c <__sfp_lock_release>
 800cb7c:	4b04      	ldr	r3, [pc, #16]	@ (800cb90 <__sinit+0x28>)
 800cb7e:	6223      	str	r3, [r4, #32]
 800cb80:	4b04      	ldr	r3, [pc, #16]	@ (800cb94 <__sinit+0x2c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1f5      	bne.n	800cb74 <__sinit+0xc>
 800cb88:	f7ff ffc4 	bl	800cb14 <global_stdio_init.part.0>
 800cb8c:	e7f2      	b.n	800cb74 <__sinit+0xc>
 800cb8e:	bf00      	nop
 800cb90:	0800cad5 	.word	0x0800cad5
 800cb94:	20000658 	.word	0x20000658

0800cb98 <_fwalk_sglue>:
 800cb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	4688      	mov	r8, r1
 800cba0:	4614      	mov	r4, r2
 800cba2:	2600      	movs	r6, #0
 800cba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cba8:	f1b9 0901 	subs.w	r9, r9, #1
 800cbac:	d505      	bpl.n	800cbba <_fwalk_sglue+0x22>
 800cbae:	6824      	ldr	r4, [r4, #0]
 800cbb0:	2c00      	cmp	r4, #0
 800cbb2:	d1f7      	bne.n	800cba4 <_fwalk_sglue+0xc>
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbba:	89ab      	ldrh	r3, [r5, #12]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d907      	bls.n	800cbd0 <_fwalk_sglue+0x38>
 800cbc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	d003      	beq.n	800cbd0 <_fwalk_sglue+0x38>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4638      	mov	r0, r7
 800cbcc:	47c0      	blx	r8
 800cbce:	4306      	orrs	r6, r0
 800cbd0:	3568      	adds	r5, #104	@ 0x68
 800cbd2:	e7e9      	b.n	800cba8 <_fwalk_sglue+0x10>

0800cbd4 <siprintf>:
 800cbd4:	b40e      	push	{r1, r2, r3}
 800cbd6:	b510      	push	{r4, lr}
 800cbd8:	b09d      	sub	sp, #116	@ 0x74
 800cbda:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cbdc:	9002      	str	r0, [sp, #8]
 800cbde:	9006      	str	r0, [sp, #24]
 800cbe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cbe4:	480a      	ldr	r0, [pc, #40]	@ (800cc10 <siprintf+0x3c>)
 800cbe6:	9107      	str	r1, [sp, #28]
 800cbe8:	9104      	str	r1, [sp, #16]
 800cbea:	490a      	ldr	r1, [pc, #40]	@ (800cc14 <siprintf+0x40>)
 800cbec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf0:	9105      	str	r1, [sp, #20]
 800cbf2:	2400      	movs	r4, #0
 800cbf4:	a902      	add	r1, sp, #8
 800cbf6:	6800      	ldr	r0, [r0, #0]
 800cbf8:	9301      	str	r3, [sp, #4]
 800cbfa:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cbfc:	f000 fa64 	bl	800d0c8 <_svfiprintf_r>
 800cc00:	9b02      	ldr	r3, [sp, #8]
 800cc02:	701c      	strb	r4, [r3, #0]
 800cc04:	b01d      	add	sp, #116	@ 0x74
 800cc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc0a:	b003      	add	sp, #12
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	2000007c 	.word	0x2000007c
 800cc14:	ffff0208 	.word	0xffff0208

0800cc18 <__sread>:
 800cc18:	b510      	push	{r4, lr}
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc20:	f000 f878 	bl	800cd14 <_read_r>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	bfab      	itete	ge
 800cc28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc2a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc2c:	181b      	addge	r3, r3, r0
 800cc2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc32:	bfac      	ite	ge
 800cc34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc36:	81a3      	strhlt	r3, [r4, #12]
 800cc38:	bd10      	pop	{r4, pc}

0800cc3a <__swrite>:
 800cc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	461f      	mov	r7, r3
 800cc40:	898b      	ldrh	r3, [r1, #12]
 800cc42:	05db      	lsls	r3, r3, #23
 800cc44:	4605      	mov	r5, r0
 800cc46:	460c      	mov	r4, r1
 800cc48:	4616      	mov	r6, r2
 800cc4a:	d505      	bpl.n	800cc58 <__swrite+0x1e>
 800cc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc50:	2302      	movs	r3, #2
 800cc52:	2200      	movs	r2, #0
 800cc54:	f000 f84c 	bl	800ccf0 <_lseek_r>
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	4632      	mov	r2, r6
 800cc66:	463b      	mov	r3, r7
 800cc68:	4628      	mov	r0, r5
 800cc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6e:	f000 b863 	b.w	800cd38 <_write_r>

0800cc72 <__sseek>:
 800cc72:	b510      	push	{r4, lr}
 800cc74:	460c      	mov	r4, r1
 800cc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc7a:	f000 f839 	bl	800ccf0 <_lseek_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	bf15      	itete	ne
 800cc84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc8e:	81a3      	strheq	r3, [r4, #12]
 800cc90:	bf18      	it	ne
 800cc92:	81a3      	strhne	r3, [r4, #12]
 800cc94:	bd10      	pop	{r4, pc}

0800cc96 <__sclose>:
 800cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9a:	f000 b819 	b.w	800ccd0 <_close_r>

0800cc9e <memcmp>:
 800cc9e:	b510      	push	{r4, lr}
 800cca0:	3901      	subs	r1, #1
 800cca2:	4402      	add	r2, r0
 800cca4:	4290      	cmp	r0, r2
 800cca6:	d101      	bne.n	800ccac <memcmp+0xe>
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e005      	b.n	800ccb8 <memcmp+0x1a>
 800ccac:	7803      	ldrb	r3, [r0, #0]
 800ccae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccb2:	42a3      	cmp	r3, r4
 800ccb4:	d001      	beq.n	800ccba <memcmp+0x1c>
 800ccb6:	1b18      	subs	r0, r3, r4
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	3001      	adds	r0, #1
 800ccbc:	e7f2      	b.n	800cca4 <memcmp+0x6>

0800ccbe <memset>:
 800ccbe:	4402      	add	r2, r0
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d100      	bne.n	800ccc8 <memset+0xa>
 800ccc6:	4770      	bx	lr
 800ccc8:	f803 1b01 	strb.w	r1, [r3], #1
 800cccc:	e7f9      	b.n	800ccc2 <memset+0x4>
	...

0800ccd0 <_close_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4d06      	ldr	r5, [pc, #24]	@ (800ccec <_close_r+0x1c>)
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	4608      	mov	r0, r1
 800ccda:	602b      	str	r3, [r5, #0]
 800ccdc:	f7f4 fed5 	bl	8001a8a <_close>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_close_r+0x1a>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_close_r+0x1a>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	2000065c 	.word	0x2000065c

0800ccf0 <_lseek_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d07      	ldr	r5, [pc, #28]	@ (800cd10 <_lseek_r+0x20>)
 800ccf4:	4604      	mov	r4, r0
 800ccf6:	4608      	mov	r0, r1
 800ccf8:	4611      	mov	r1, r2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	602a      	str	r2, [r5, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	f7f4 fee7 	bl	8001ad2 <_lseek>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d102      	bne.n	800cd0e <_lseek_r+0x1e>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	b103      	cbz	r3, 800cd0e <_lseek_r+0x1e>
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	2000065c 	.word	0x2000065c

0800cd14 <_read_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4d07      	ldr	r5, [pc, #28]	@ (800cd34 <_read_r+0x20>)
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4608      	mov	r0, r1
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	2200      	movs	r2, #0
 800cd20:	602a      	str	r2, [r5, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	f7f4 fe94 	bl	8001a50 <_read>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d102      	bne.n	800cd32 <_read_r+0x1e>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	b103      	cbz	r3, 800cd32 <_read_r+0x1e>
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	2000065c 	.word	0x2000065c

0800cd38 <_write_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d07      	ldr	r5, [pc, #28]	@ (800cd58 <_write_r+0x20>)
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4608      	mov	r0, r1
 800cd40:	4611      	mov	r1, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	602a      	str	r2, [r5, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f7f4 fcfc 	bl	8001744 <_write>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_write_r+0x1e>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_write_r+0x1e>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	2000065c 	.word	0x2000065c

0800cd5c <__errno>:
 800cd5c:	4b01      	ldr	r3, [pc, #4]	@ (800cd64 <__errno+0x8>)
 800cd5e:	6818      	ldr	r0, [r3, #0]
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	2000007c 	.word	0x2000007c

0800cd68 <__libc_init_array>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	4d0d      	ldr	r5, [pc, #52]	@ (800cda0 <__libc_init_array+0x38>)
 800cd6c:	4c0d      	ldr	r4, [pc, #52]	@ (800cda4 <__libc_init_array+0x3c>)
 800cd6e:	1b64      	subs	r4, r4, r5
 800cd70:	10a4      	asrs	r4, r4, #2
 800cd72:	2600      	movs	r6, #0
 800cd74:	42a6      	cmp	r6, r4
 800cd76:	d109      	bne.n	800cd8c <__libc_init_array+0x24>
 800cd78:	4d0b      	ldr	r5, [pc, #44]	@ (800cda8 <__libc_init_array+0x40>)
 800cd7a:	4c0c      	ldr	r4, [pc, #48]	@ (800cdac <__libc_init_array+0x44>)
 800cd7c:	f000 ffe8 	bl	800dd50 <_init>
 800cd80:	1b64      	subs	r4, r4, r5
 800cd82:	10a4      	asrs	r4, r4, #2
 800cd84:	2600      	movs	r6, #0
 800cd86:	42a6      	cmp	r6, r4
 800cd88:	d105      	bne.n	800cd96 <__libc_init_array+0x2e>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd90:	4798      	blx	r3
 800cd92:	3601      	adds	r6, #1
 800cd94:	e7ee      	b.n	800cd74 <__libc_init_array+0xc>
 800cd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd9a:	4798      	blx	r3
 800cd9c:	3601      	adds	r6, #1
 800cd9e:	e7f2      	b.n	800cd86 <__libc_init_array+0x1e>
 800cda0:	0800e5a0 	.word	0x0800e5a0
 800cda4:	0800e5a0 	.word	0x0800e5a0
 800cda8:	0800e5a0 	.word	0x0800e5a0
 800cdac:	0800e5a4 	.word	0x0800e5a4

0800cdb0 <__retarget_lock_init_recursive>:
 800cdb0:	4770      	bx	lr

0800cdb2 <__retarget_lock_acquire_recursive>:
 800cdb2:	4770      	bx	lr

0800cdb4 <__retarget_lock_release_recursive>:
 800cdb4:	4770      	bx	lr

0800cdb6 <memcpy>:
 800cdb6:	440a      	add	r2, r1
 800cdb8:	4291      	cmp	r1, r2
 800cdba:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdbe:	d100      	bne.n	800cdc2 <memcpy+0xc>
 800cdc0:	4770      	bx	lr
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdcc:	4291      	cmp	r1, r2
 800cdce:	d1f9      	bne.n	800cdc4 <memcpy+0xe>
 800cdd0:	bd10      	pop	{r4, pc}
	...

0800cdd4 <__assert_func>:
 800cdd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdd6:	4614      	mov	r4, r2
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4b09      	ldr	r3, [pc, #36]	@ (800ce00 <__assert_func+0x2c>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4605      	mov	r5, r0
 800cde0:	68d8      	ldr	r0, [r3, #12]
 800cde2:	b14c      	cbz	r4, 800cdf8 <__assert_func+0x24>
 800cde4:	4b07      	ldr	r3, [pc, #28]	@ (800ce04 <__assert_func+0x30>)
 800cde6:	9100      	str	r1, [sp, #0]
 800cde8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdec:	4906      	ldr	r1, [pc, #24]	@ (800ce08 <__assert_func+0x34>)
 800cdee:	462b      	mov	r3, r5
 800cdf0:	f000 fc9a 	bl	800d728 <fiprintf>
 800cdf4:	f000 fcd4 	bl	800d7a0 <abort>
 800cdf8:	4b04      	ldr	r3, [pc, #16]	@ (800ce0c <__assert_func+0x38>)
 800cdfa:	461c      	mov	r4, r3
 800cdfc:	e7f3      	b.n	800cde6 <__assert_func+0x12>
 800cdfe:	bf00      	nop
 800ce00:	2000007c 	.word	0x2000007c
 800ce04:	0800e527 	.word	0x0800e527
 800ce08:	0800e534 	.word	0x0800e534
 800ce0c:	0800e562 	.word	0x0800e562

0800ce10 <_free_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4605      	mov	r5, r0
 800ce14:	2900      	cmp	r1, #0
 800ce16:	d041      	beq.n	800ce9c <_free_r+0x8c>
 800ce18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce1c:	1f0c      	subs	r4, r1, #4
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bfb8      	it	lt
 800ce22:	18e4      	addlt	r4, r4, r3
 800ce24:	f000 f8e8 	bl	800cff8 <__malloc_lock>
 800ce28:	4a1d      	ldr	r2, [pc, #116]	@ (800cea0 <_free_r+0x90>)
 800ce2a:	6813      	ldr	r3, [r2, #0]
 800ce2c:	b933      	cbnz	r3, 800ce3c <_free_r+0x2c>
 800ce2e:	6063      	str	r3, [r4, #4]
 800ce30:	6014      	str	r4, [r2, #0]
 800ce32:	4628      	mov	r0, r5
 800ce34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce38:	f000 b8e4 	b.w	800d004 <__malloc_unlock>
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	d908      	bls.n	800ce52 <_free_r+0x42>
 800ce40:	6820      	ldr	r0, [r4, #0]
 800ce42:	1821      	adds	r1, r4, r0
 800ce44:	428b      	cmp	r3, r1
 800ce46:	bf01      	itttt	eq
 800ce48:	6819      	ldreq	r1, [r3, #0]
 800ce4a:	685b      	ldreq	r3, [r3, #4]
 800ce4c:	1809      	addeq	r1, r1, r0
 800ce4e:	6021      	streq	r1, [r4, #0]
 800ce50:	e7ed      	b.n	800ce2e <_free_r+0x1e>
 800ce52:	461a      	mov	r2, r3
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	b10b      	cbz	r3, 800ce5c <_free_r+0x4c>
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d9fa      	bls.n	800ce52 <_free_r+0x42>
 800ce5c:	6811      	ldr	r1, [r2, #0]
 800ce5e:	1850      	adds	r0, r2, r1
 800ce60:	42a0      	cmp	r0, r4
 800ce62:	d10b      	bne.n	800ce7c <_free_r+0x6c>
 800ce64:	6820      	ldr	r0, [r4, #0]
 800ce66:	4401      	add	r1, r0
 800ce68:	1850      	adds	r0, r2, r1
 800ce6a:	4283      	cmp	r3, r0
 800ce6c:	6011      	str	r1, [r2, #0]
 800ce6e:	d1e0      	bne.n	800ce32 <_free_r+0x22>
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	6053      	str	r3, [r2, #4]
 800ce76:	4408      	add	r0, r1
 800ce78:	6010      	str	r0, [r2, #0]
 800ce7a:	e7da      	b.n	800ce32 <_free_r+0x22>
 800ce7c:	d902      	bls.n	800ce84 <_free_r+0x74>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	e7d6      	b.n	800ce32 <_free_r+0x22>
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	1821      	adds	r1, r4, r0
 800ce88:	428b      	cmp	r3, r1
 800ce8a:	bf04      	itt	eq
 800ce8c:	6819      	ldreq	r1, [r3, #0]
 800ce8e:	685b      	ldreq	r3, [r3, #4]
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	bf04      	itt	eq
 800ce94:	1809      	addeq	r1, r1, r0
 800ce96:	6021      	streq	r1, [r4, #0]
 800ce98:	6054      	str	r4, [r2, #4]
 800ce9a:	e7ca      	b.n	800ce32 <_free_r+0x22>
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	20000668 	.word	0x20000668

0800cea4 <malloc>:
 800cea4:	4b02      	ldr	r3, [pc, #8]	@ (800ceb0 <malloc+0xc>)
 800cea6:	4601      	mov	r1, r0
 800cea8:	6818      	ldr	r0, [r3, #0]
 800ceaa:	f000 b825 	b.w	800cef8 <_malloc_r>
 800ceae:	bf00      	nop
 800ceb0:	2000007c 	.word	0x2000007c

0800ceb4 <sbrk_aligned>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4e0f      	ldr	r6, [pc, #60]	@ (800cef4 <sbrk_aligned+0x40>)
 800ceb8:	460c      	mov	r4, r1
 800ceba:	6831      	ldr	r1, [r6, #0]
 800cebc:	4605      	mov	r5, r0
 800cebe:	b911      	cbnz	r1, 800cec6 <sbrk_aligned+0x12>
 800cec0:	f000 fc5e 	bl	800d780 <_sbrk_r>
 800cec4:	6030      	str	r0, [r6, #0]
 800cec6:	4621      	mov	r1, r4
 800cec8:	4628      	mov	r0, r5
 800ceca:	f000 fc59 	bl	800d780 <_sbrk_r>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d103      	bne.n	800ceda <sbrk_aligned+0x26>
 800ced2:	f04f 34ff 	mov.w	r4, #4294967295
 800ced6:	4620      	mov	r0, r4
 800ced8:	bd70      	pop	{r4, r5, r6, pc}
 800ceda:	1cc4      	adds	r4, r0, #3
 800cedc:	f024 0403 	bic.w	r4, r4, #3
 800cee0:	42a0      	cmp	r0, r4
 800cee2:	d0f8      	beq.n	800ced6 <sbrk_aligned+0x22>
 800cee4:	1a21      	subs	r1, r4, r0
 800cee6:	4628      	mov	r0, r5
 800cee8:	f000 fc4a 	bl	800d780 <_sbrk_r>
 800ceec:	3001      	adds	r0, #1
 800ceee:	d1f2      	bne.n	800ced6 <sbrk_aligned+0x22>
 800cef0:	e7ef      	b.n	800ced2 <sbrk_aligned+0x1e>
 800cef2:	bf00      	nop
 800cef4:	20000664 	.word	0x20000664

0800cef8 <_malloc_r>:
 800cef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cefc:	1ccd      	adds	r5, r1, #3
 800cefe:	f025 0503 	bic.w	r5, r5, #3
 800cf02:	3508      	adds	r5, #8
 800cf04:	2d0c      	cmp	r5, #12
 800cf06:	bf38      	it	cc
 800cf08:	250c      	movcc	r5, #12
 800cf0a:	2d00      	cmp	r5, #0
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	db01      	blt.n	800cf14 <_malloc_r+0x1c>
 800cf10:	42a9      	cmp	r1, r5
 800cf12:	d904      	bls.n	800cf1e <_malloc_r+0x26>
 800cf14:	230c      	movs	r3, #12
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	2000      	movs	r0, #0
 800cf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cff4 <_malloc_r+0xfc>
 800cf22:	f000 f869 	bl	800cff8 <__malloc_lock>
 800cf26:	f8d8 3000 	ldr.w	r3, [r8]
 800cf2a:	461c      	mov	r4, r3
 800cf2c:	bb44      	cbnz	r4, 800cf80 <_malloc_r+0x88>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4630      	mov	r0, r6
 800cf32:	f7ff ffbf 	bl	800ceb4 <sbrk_aligned>
 800cf36:	1c43      	adds	r3, r0, #1
 800cf38:	4604      	mov	r4, r0
 800cf3a:	d158      	bne.n	800cfee <_malloc_r+0xf6>
 800cf3c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf40:	4627      	mov	r7, r4
 800cf42:	2f00      	cmp	r7, #0
 800cf44:	d143      	bne.n	800cfce <_malloc_r+0xd6>
 800cf46:	2c00      	cmp	r4, #0
 800cf48:	d04b      	beq.n	800cfe2 <_malloc_r+0xea>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	4630      	mov	r0, r6
 800cf50:	eb04 0903 	add.w	r9, r4, r3
 800cf54:	f000 fc14 	bl	800d780 <_sbrk_r>
 800cf58:	4581      	cmp	r9, r0
 800cf5a:	d142      	bne.n	800cfe2 <_malloc_r+0xea>
 800cf5c:	6821      	ldr	r1, [r4, #0]
 800cf5e:	1a6d      	subs	r5, r5, r1
 800cf60:	4629      	mov	r1, r5
 800cf62:	4630      	mov	r0, r6
 800cf64:	f7ff ffa6 	bl	800ceb4 <sbrk_aligned>
 800cf68:	3001      	adds	r0, #1
 800cf6a:	d03a      	beq.n	800cfe2 <_malloc_r+0xea>
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	442b      	add	r3, r5
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	f8d8 3000 	ldr.w	r3, [r8]
 800cf76:	685a      	ldr	r2, [r3, #4]
 800cf78:	bb62      	cbnz	r2, 800cfd4 <_malloc_r+0xdc>
 800cf7a:	f8c8 7000 	str.w	r7, [r8]
 800cf7e:	e00f      	b.n	800cfa0 <_malloc_r+0xa8>
 800cf80:	6822      	ldr	r2, [r4, #0]
 800cf82:	1b52      	subs	r2, r2, r5
 800cf84:	d420      	bmi.n	800cfc8 <_malloc_r+0xd0>
 800cf86:	2a0b      	cmp	r2, #11
 800cf88:	d917      	bls.n	800cfba <_malloc_r+0xc2>
 800cf8a:	1961      	adds	r1, r4, r5
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	6025      	str	r5, [r4, #0]
 800cf90:	bf18      	it	ne
 800cf92:	6059      	strne	r1, [r3, #4]
 800cf94:	6863      	ldr	r3, [r4, #4]
 800cf96:	bf08      	it	eq
 800cf98:	f8c8 1000 	streq.w	r1, [r8]
 800cf9c:	5162      	str	r2, [r4, r5]
 800cf9e:	604b      	str	r3, [r1, #4]
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f000 f82f 	bl	800d004 <__malloc_unlock>
 800cfa6:	f104 000b 	add.w	r0, r4, #11
 800cfaa:	1d23      	adds	r3, r4, #4
 800cfac:	f020 0007 	bic.w	r0, r0, #7
 800cfb0:	1ac2      	subs	r2, r0, r3
 800cfb2:	bf1c      	itt	ne
 800cfb4:	1a1b      	subne	r3, r3, r0
 800cfb6:	50a3      	strne	r3, [r4, r2]
 800cfb8:	e7af      	b.n	800cf1a <_malloc_r+0x22>
 800cfba:	6862      	ldr	r2, [r4, #4]
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	bf0c      	ite	eq
 800cfc0:	f8c8 2000 	streq.w	r2, [r8]
 800cfc4:	605a      	strne	r2, [r3, #4]
 800cfc6:	e7eb      	b.n	800cfa0 <_malloc_r+0xa8>
 800cfc8:	4623      	mov	r3, r4
 800cfca:	6864      	ldr	r4, [r4, #4]
 800cfcc:	e7ae      	b.n	800cf2c <_malloc_r+0x34>
 800cfce:	463c      	mov	r4, r7
 800cfd0:	687f      	ldr	r7, [r7, #4]
 800cfd2:	e7b6      	b.n	800cf42 <_malloc_r+0x4a>
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	d1fb      	bne.n	800cfd4 <_malloc_r+0xdc>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	6053      	str	r3, [r2, #4]
 800cfe0:	e7de      	b.n	800cfa0 <_malloc_r+0xa8>
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	6033      	str	r3, [r6, #0]
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f000 f80c 	bl	800d004 <__malloc_unlock>
 800cfec:	e794      	b.n	800cf18 <_malloc_r+0x20>
 800cfee:	6005      	str	r5, [r0, #0]
 800cff0:	e7d6      	b.n	800cfa0 <_malloc_r+0xa8>
 800cff2:	bf00      	nop
 800cff4:	20000668 	.word	0x20000668

0800cff8 <__malloc_lock>:
 800cff8:	4801      	ldr	r0, [pc, #4]	@ (800d000 <__malloc_lock+0x8>)
 800cffa:	f7ff beda 	b.w	800cdb2 <__retarget_lock_acquire_recursive>
 800cffe:	bf00      	nop
 800d000:	20000660 	.word	0x20000660

0800d004 <__malloc_unlock>:
 800d004:	4801      	ldr	r0, [pc, #4]	@ (800d00c <__malloc_unlock+0x8>)
 800d006:	f7ff bed5 	b.w	800cdb4 <__retarget_lock_release_recursive>
 800d00a:	bf00      	nop
 800d00c:	20000660 	.word	0x20000660

0800d010 <__ssputs_r>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	688e      	ldr	r6, [r1, #8]
 800d016:	461f      	mov	r7, r3
 800d018:	42be      	cmp	r6, r7
 800d01a:	680b      	ldr	r3, [r1, #0]
 800d01c:	4682      	mov	sl, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	4690      	mov	r8, r2
 800d022:	d82d      	bhi.n	800d080 <__ssputs_r+0x70>
 800d024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d02c:	d026      	beq.n	800d07c <__ssputs_r+0x6c>
 800d02e:	6965      	ldr	r5, [r4, #20]
 800d030:	6909      	ldr	r1, [r1, #16]
 800d032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d036:	eba3 0901 	sub.w	r9, r3, r1
 800d03a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d03e:	1c7b      	adds	r3, r7, #1
 800d040:	444b      	add	r3, r9
 800d042:	106d      	asrs	r5, r5, #1
 800d044:	429d      	cmp	r5, r3
 800d046:	bf38      	it	cc
 800d048:	461d      	movcc	r5, r3
 800d04a:	0553      	lsls	r3, r2, #21
 800d04c:	d527      	bpl.n	800d09e <__ssputs_r+0x8e>
 800d04e:	4629      	mov	r1, r5
 800d050:	f7ff ff52 	bl	800cef8 <_malloc_r>
 800d054:	4606      	mov	r6, r0
 800d056:	b360      	cbz	r0, 800d0b2 <__ssputs_r+0xa2>
 800d058:	6921      	ldr	r1, [r4, #16]
 800d05a:	464a      	mov	r2, r9
 800d05c:	f7ff feab 	bl	800cdb6 <memcpy>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	6126      	str	r6, [r4, #16]
 800d06e:	6165      	str	r5, [r4, #20]
 800d070:	444e      	add	r6, r9
 800d072:	eba5 0509 	sub.w	r5, r5, r9
 800d076:	6026      	str	r6, [r4, #0]
 800d078:	60a5      	str	r5, [r4, #8]
 800d07a:	463e      	mov	r6, r7
 800d07c:	42be      	cmp	r6, r7
 800d07e:	d900      	bls.n	800d082 <__ssputs_r+0x72>
 800d080:	463e      	mov	r6, r7
 800d082:	6820      	ldr	r0, [r4, #0]
 800d084:	4632      	mov	r2, r6
 800d086:	4641      	mov	r1, r8
 800d088:	f000 fb60 	bl	800d74c <memmove>
 800d08c:	68a3      	ldr	r3, [r4, #8]
 800d08e:	1b9b      	subs	r3, r3, r6
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	4433      	add	r3, r6
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	2000      	movs	r0, #0
 800d09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09e:	462a      	mov	r2, r5
 800d0a0:	f000 fb85 	bl	800d7ae <_realloc_r>
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1e0      	bne.n	800d06c <__ssputs_r+0x5c>
 800d0aa:	6921      	ldr	r1, [r4, #16]
 800d0ac:	4650      	mov	r0, sl
 800d0ae:	f7ff feaf 	bl	800ce10 <_free_r>
 800d0b2:	230c      	movs	r3, #12
 800d0b4:	f8ca 3000 	str.w	r3, [sl]
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e7e9      	b.n	800d09a <__ssputs_r+0x8a>
	...

0800d0c8 <_svfiprintf_r>:
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	4698      	mov	r8, r3
 800d0ce:	898b      	ldrh	r3, [r1, #12]
 800d0d0:	061b      	lsls	r3, r3, #24
 800d0d2:	b09d      	sub	sp, #116	@ 0x74
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	d510      	bpl.n	800d0fe <_svfiprintf_r+0x36>
 800d0dc:	690b      	ldr	r3, [r1, #16]
 800d0de:	b973      	cbnz	r3, 800d0fe <_svfiprintf_r+0x36>
 800d0e0:	2140      	movs	r1, #64	@ 0x40
 800d0e2:	f7ff ff09 	bl	800cef8 <_malloc_r>
 800d0e6:	6028      	str	r0, [r5, #0]
 800d0e8:	6128      	str	r0, [r5, #16]
 800d0ea:	b930      	cbnz	r0, 800d0fa <_svfiprintf_r+0x32>
 800d0ec:	230c      	movs	r3, #12
 800d0ee:	603b      	str	r3, [r7, #0]
 800d0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f4:	b01d      	add	sp, #116	@ 0x74
 800d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fa:	2340      	movs	r3, #64	@ 0x40
 800d0fc:	616b      	str	r3, [r5, #20]
 800d0fe:	2300      	movs	r3, #0
 800d100:	9309      	str	r3, [sp, #36]	@ 0x24
 800d102:	2320      	movs	r3, #32
 800d104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d108:	f8cd 800c 	str.w	r8, [sp, #12]
 800d10c:	2330      	movs	r3, #48	@ 0x30
 800d10e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2ac <_svfiprintf_r+0x1e4>
 800d112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d116:	f04f 0901 	mov.w	r9, #1
 800d11a:	4623      	mov	r3, r4
 800d11c:	469a      	mov	sl, r3
 800d11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d122:	b10a      	cbz	r2, 800d128 <_svfiprintf_r+0x60>
 800d124:	2a25      	cmp	r2, #37	@ 0x25
 800d126:	d1f9      	bne.n	800d11c <_svfiprintf_r+0x54>
 800d128:	ebba 0b04 	subs.w	fp, sl, r4
 800d12c:	d00b      	beq.n	800d146 <_svfiprintf_r+0x7e>
 800d12e:	465b      	mov	r3, fp
 800d130:	4622      	mov	r2, r4
 800d132:	4629      	mov	r1, r5
 800d134:	4638      	mov	r0, r7
 800d136:	f7ff ff6b 	bl	800d010 <__ssputs_r>
 800d13a:	3001      	adds	r0, #1
 800d13c:	f000 80a7 	beq.w	800d28e <_svfiprintf_r+0x1c6>
 800d140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d142:	445a      	add	r2, fp
 800d144:	9209      	str	r2, [sp, #36]	@ 0x24
 800d146:	f89a 3000 	ldrb.w	r3, [sl]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 809f 	beq.w	800d28e <_svfiprintf_r+0x1c6>
 800d150:	2300      	movs	r3, #0
 800d152:	f04f 32ff 	mov.w	r2, #4294967295
 800d156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d15a:	f10a 0a01 	add.w	sl, sl, #1
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	9307      	str	r3, [sp, #28]
 800d162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d166:	931a      	str	r3, [sp, #104]	@ 0x68
 800d168:	4654      	mov	r4, sl
 800d16a:	2205      	movs	r2, #5
 800d16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d170:	484e      	ldr	r0, [pc, #312]	@ (800d2ac <_svfiprintf_r+0x1e4>)
 800d172:	f7f3 f80d 	bl	8000190 <memchr>
 800d176:	9a04      	ldr	r2, [sp, #16]
 800d178:	b9d8      	cbnz	r0, 800d1b2 <_svfiprintf_r+0xea>
 800d17a:	06d0      	lsls	r0, r2, #27
 800d17c:	bf44      	itt	mi
 800d17e:	2320      	movmi	r3, #32
 800d180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d184:	0711      	lsls	r1, r2, #28
 800d186:	bf44      	itt	mi
 800d188:	232b      	movmi	r3, #43	@ 0x2b
 800d18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18e:	f89a 3000 	ldrb.w	r3, [sl]
 800d192:	2b2a      	cmp	r3, #42	@ 0x2a
 800d194:	d015      	beq.n	800d1c2 <_svfiprintf_r+0xfa>
 800d196:	9a07      	ldr	r2, [sp, #28]
 800d198:	4654      	mov	r4, sl
 800d19a:	2000      	movs	r0, #0
 800d19c:	f04f 0c0a 	mov.w	ip, #10
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a6:	3b30      	subs	r3, #48	@ 0x30
 800d1a8:	2b09      	cmp	r3, #9
 800d1aa:	d94b      	bls.n	800d244 <_svfiprintf_r+0x17c>
 800d1ac:	b1b0      	cbz	r0, 800d1dc <_svfiprintf_r+0x114>
 800d1ae:	9207      	str	r2, [sp, #28]
 800d1b0:	e014      	b.n	800d1dc <_svfiprintf_r+0x114>
 800d1b2:	eba0 0308 	sub.w	r3, r0, r8
 800d1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	9304      	str	r3, [sp, #16]
 800d1be:	46a2      	mov	sl, r4
 800d1c0:	e7d2      	b.n	800d168 <_svfiprintf_r+0xa0>
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	1d19      	adds	r1, r3, #4
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	9103      	str	r1, [sp, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	bfbb      	ittet	lt
 800d1ce:	425b      	neglt	r3, r3
 800d1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d1d4:	9307      	strge	r3, [sp, #28]
 800d1d6:	9307      	strlt	r3, [sp, #28]
 800d1d8:	bfb8      	it	lt
 800d1da:	9204      	strlt	r2, [sp, #16]
 800d1dc:	7823      	ldrb	r3, [r4, #0]
 800d1de:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1e0:	d10a      	bne.n	800d1f8 <_svfiprintf_r+0x130>
 800d1e2:	7863      	ldrb	r3, [r4, #1]
 800d1e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e6:	d132      	bne.n	800d24e <_svfiprintf_r+0x186>
 800d1e8:	9b03      	ldr	r3, [sp, #12]
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	9203      	str	r2, [sp, #12]
 800d1f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1f4:	3402      	adds	r4, #2
 800d1f6:	9305      	str	r3, [sp, #20]
 800d1f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d2b0 <_svfiprintf_r+0x1e8>
 800d1fc:	7821      	ldrb	r1, [r4, #0]
 800d1fe:	2203      	movs	r2, #3
 800d200:	4650      	mov	r0, sl
 800d202:	f7f2 ffc5 	bl	8000190 <memchr>
 800d206:	b138      	cbz	r0, 800d218 <_svfiprintf_r+0x150>
 800d208:	9b04      	ldr	r3, [sp, #16]
 800d20a:	eba0 000a 	sub.w	r0, r0, sl
 800d20e:	2240      	movs	r2, #64	@ 0x40
 800d210:	4082      	lsls	r2, r0
 800d212:	4313      	orrs	r3, r2
 800d214:	3401      	adds	r4, #1
 800d216:	9304      	str	r3, [sp, #16]
 800d218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21c:	4825      	ldr	r0, [pc, #148]	@ (800d2b4 <_svfiprintf_r+0x1ec>)
 800d21e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d222:	2206      	movs	r2, #6
 800d224:	f7f2 ffb4 	bl	8000190 <memchr>
 800d228:	2800      	cmp	r0, #0
 800d22a:	d036      	beq.n	800d29a <_svfiprintf_r+0x1d2>
 800d22c:	4b22      	ldr	r3, [pc, #136]	@ (800d2b8 <_svfiprintf_r+0x1f0>)
 800d22e:	bb1b      	cbnz	r3, 800d278 <_svfiprintf_r+0x1b0>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	3307      	adds	r3, #7
 800d234:	f023 0307 	bic.w	r3, r3, #7
 800d238:	3308      	adds	r3, #8
 800d23a:	9303      	str	r3, [sp, #12]
 800d23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23e:	4433      	add	r3, r6
 800d240:	9309      	str	r3, [sp, #36]	@ 0x24
 800d242:	e76a      	b.n	800d11a <_svfiprintf_r+0x52>
 800d244:	fb0c 3202 	mla	r2, ip, r2, r3
 800d248:	460c      	mov	r4, r1
 800d24a:	2001      	movs	r0, #1
 800d24c:	e7a8      	b.n	800d1a0 <_svfiprintf_r+0xd8>
 800d24e:	2300      	movs	r3, #0
 800d250:	3401      	adds	r4, #1
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	4619      	mov	r1, r3
 800d256:	f04f 0c0a 	mov.w	ip, #10
 800d25a:	4620      	mov	r0, r4
 800d25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d260:	3a30      	subs	r2, #48	@ 0x30
 800d262:	2a09      	cmp	r2, #9
 800d264:	d903      	bls.n	800d26e <_svfiprintf_r+0x1a6>
 800d266:	2b00      	cmp	r3, #0
 800d268:	d0c6      	beq.n	800d1f8 <_svfiprintf_r+0x130>
 800d26a:	9105      	str	r1, [sp, #20]
 800d26c:	e7c4      	b.n	800d1f8 <_svfiprintf_r+0x130>
 800d26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d272:	4604      	mov	r4, r0
 800d274:	2301      	movs	r3, #1
 800d276:	e7f0      	b.n	800d25a <_svfiprintf_r+0x192>
 800d278:	ab03      	add	r3, sp, #12
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	462a      	mov	r2, r5
 800d27e:	4b0f      	ldr	r3, [pc, #60]	@ (800d2bc <_svfiprintf_r+0x1f4>)
 800d280:	a904      	add	r1, sp, #16
 800d282:	4638      	mov	r0, r7
 800d284:	f3af 8000 	nop.w
 800d288:	1c42      	adds	r2, r0, #1
 800d28a:	4606      	mov	r6, r0
 800d28c:	d1d6      	bne.n	800d23c <_svfiprintf_r+0x174>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	065b      	lsls	r3, r3, #25
 800d292:	f53f af2d 	bmi.w	800d0f0 <_svfiprintf_r+0x28>
 800d296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d298:	e72c      	b.n	800d0f4 <_svfiprintf_r+0x2c>
 800d29a:	ab03      	add	r3, sp, #12
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	462a      	mov	r2, r5
 800d2a0:	4b06      	ldr	r3, [pc, #24]	@ (800d2bc <_svfiprintf_r+0x1f4>)
 800d2a2:	a904      	add	r1, sp, #16
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	f000 f879 	bl	800d39c <_printf_i>
 800d2aa:	e7ed      	b.n	800d288 <_svfiprintf_r+0x1c0>
 800d2ac:	0800e563 	.word	0x0800e563
 800d2b0:	0800e569 	.word	0x0800e569
 800d2b4:	0800e56d 	.word	0x0800e56d
 800d2b8:	00000000 	.word	0x00000000
 800d2bc:	0800d011 	.word	0x0800d011

0800d2c0 <_printf_common>:
 800d2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c4:	4616      	mov	r6, r2
 800d2c6:	4698      	mov	r8, r3
 800d2c8:	688a      	ldr	r2, [r1, #8]
 800d2ca:	690b      	ldr	r3, [r1, #16]
 800d2cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	bfb8      	it	lt
 800d2d4:	4613      	movlt	r3, r2
 800d2d6:	6033      	str	r3, [r6, #0]
 800d2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2dc:	4607      	mov	r7, r0
 800d2de:	460c      	mov	r4, r1
 800d2e0:	b10a      	cbz	r2, 800d2e6 <_printf_common+0x26>
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	6033      	str	r3, [r6, #0]
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	0699      	lsls	r1, r3, #26
 800d2ea:	bf42      	ittt	mi
 800d2ec:	6833      	ldrmi	r3, [r6, #0]
 800d2ee:	3302      	addmi	r3, #2
 800d2f0:	6033      	strmi	r3, [r6, #0]
 800d2f2:	6825      	ldr	r5, [r4, #0]
 800d2f4:	f015 0506 	ands.w	r5, r5, #6
 800d2f8:	d106      	bne.n	800d308 <_printf_common+0x48>
 800d2fa:	f104 0a19 	add.w	sl, r4, #25
 800d2fe:	68e3      	ldr	r3, [r4, #12]
 800d300:	6832      	ldr	r2, [r6, #0]
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	42ab      	cmp	r3, r5
 800d306:	dc26      	bgt.n	800d356 <_printf_common+0x96>
 800d308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d30c:	6822      	ldr	r2, [r4, #0]
 800d30e:	3b00      	subs	r3, #0
 800d310:	bf18      	it	ne
 800d312:	2301      	movne	r3, #1
 800d314:	0692      	lsls	r2, r2, #26
 800d316:	d42b      	bmi.n	800d370 <_printf_common+0xb0>
 800d318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d31c:	4641      	mov	r1, r8
 800d31e:	4638      	mov	r0, r7
 800d320:	47c8      	blx	r9
 800d322:	3001      	adds	r0, #1
 800d324:	d01e      	beq.n	800d364 <_printf_common+0xa4>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	6922      	ldr	r2, [r4, #16]
 800d32a:	f003 0306 	and.w	r3, r3, #6
 800d32e:	2b04      	cmp	r3, #4
 800d330:	bf02      	ittt	eq
 800d332:	68e5      	ldreq	r5, [r4, #12]
 800d334:	6833      	ldreq	r3, [r6, #0]
 800d336:	1aed      	subeq	r5, r5, r3
 800d338:	68a3      	ldr	r3, [r4, #8]
 800d33a:	bf0c      	ite	eq
 800d33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d340:	2500      	movne	r5, #0
 800d342:	4293      	cmp	r3, r2
 800d344:	bfc4      	itt	gt
 800d346:	1a9b      	subgt	r3, r3, r2
 800d348:	18ed      	addgt	r5, r5, r3
 800d34a:	2600      	movs	r6, #0
 800d34c:	341a      	adds	r4, #26
 800d34e:	42b5      	cmp	r5, r6
 800d350:	d11a      	bne.n	800d388 <_printf_common+0xc8>
 800d352:	2000      	movs	r0, #0
 800d354:	e008      	b.n	800d368 <_printf_common+0xa8>
 800d356:	2301      	movs	r3, #1
 800d358:	4652      	mov	r2, sl
 800d35a:	4641      	mov	r1, r8
 800d35c:	4638      	mov	r0, r7
 800d35e:	47c8      	blx	r9
 800d360:	3001      	adds	r0, #1
 800d362:	d103      	bne.n	800d36c <_printf_common+0xac>
 800d364:	f04f 30ff 	mov.w	r0, #4294967295
 800d368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d36c:	3501      	adds	r5, #1
 800d36e:	e7c6      	b.n	800d2fe <_printf_common+0x3e>
 800d370:	18e1      	adds	r1, r4, r3
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	2030      	movs	r0, #48	@ 0x30
 800d376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d37a:	4422      	add	r2, r4
 800d37c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d384:	3302      	adds	r3, #2
 800d386:	e7c7      	b.n	800d318 <_printf_common+0x58>
 800d388:	2301      	movs	r3, #1
 800d38a:	4622      	mov	r2, r4
 800d38c:	4641      	mov	r1, r8
 800d38e:	4638      	mov	r0, r7
 800d390:	47c8      	blx	r9
 800d392:	3001      	adds	r0, #1
 800d394:	d0e6      	beq.n	800d364 <_printf_common+0xa4>
 800d396:	3601      	adds	r6, #1
 800d398:	e7d9      	b.n	800d34e <_printf_common+0x8e>
	...

0800d39c <_printf_i>:
 800d39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	7e0f      	ldrb	r7, [r1, #24]
 800d3a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3a4:	2f78      	cmp	r7, #120	@ 0x78
 800d3a6:	4691      	mov	r9, r2
 800d3a8:	4680      	mov	r8, r0
 800d3aa:	460c      	mov	r4, r1
 800d3ac:	469a      	mov	sl, r3
 800d3ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3b2:	d807      	bhi.n	800d3c4 <_printf_i+0x28>
 800d3b4:	2f62      	cmp	r7, #98	@ 0x62
 800d3b6:	d80a      	bhi.n	800d3ce <_printf_i+0x32>
 800d3b8:	2f00      	cmp	r7, #0
 800d3ba:	f000 80d1 	beq.w	800d560 <_printf_i+0x1c4>
 800d3be:	2f58      	cmp	r7, #88	@ 0x58
 800d3c0:	f000 80b8 	beq.w	800d534 <_printf_i+0x198>
 800d3c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3cc:	e03a      	b.n	800d444 <_printf_i+0xa8>
 800d3ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3d2:	2b15      	cmp	r3, #21
 800d3d4:	d8f6      	bhi.n	800d3c4 <_printf_i+0x28>
 800d3d6:	a101      	add	r1, pc, #4	@ (adr r1, 800d3dc <_printf_i+0x40>)
 800d3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3dc:	0800d435 	.word	0x0800d435
 800d3e0:	0800d449 	.word	0x0800d449
 800d3e4:	0800d3c5 	.word	0x0800d3c5
 800d3e8:	0800d3c5 	.word	0x0800d3c5
 800d3ec:	0800d3c5 	.word	0x0800d3c5
 800d3f0:	0800d3c5 	.word	0x0800d3c5
 800d3f4:	0800d449 	.word	0x0800d449
 800d3f8:	0800d3c5 	.word	0x0800d3c5
 800d3fc:	0800d3c5 	.word	0x0800d3c5
 800d400:	0800d3c5 	.word	0x0800d3c5
 800d404:	0800d3c5 	.word	0x0800d3c5
 800d408:	0800d547 	.word	0x0800d547
 800d40c:	0800d473 	.word	0x0800d473
 800d410:	0800d501 	.word	0x0800d501
 800d414:	0800d3c5 	.word	0x0800d3c5
 800d418:	0800d3c5 	.word	0x0800d3c5
 800d41c:	0800d569 	.word	0x0800d569
 800d420:	0800d3c5 	.word	0x0800d3c5
 800d424:	0800d473 	.word	0x0800d473
 800d428:	0800d3c5 	.word	0x0800d3c5
 800d42c:	0800d3c5 	.word	0x0800d3c5
 800d430:	0800d509 	.word	0x0800d509
 800d434:	6833      	ldr	r3, [r6, #0]
 800d436:	1d1a      	adds	r2, r3, #4
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6032      	str	r2, [r6, #0]
 800d43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d444:	2301      	movs	r3, #1
 800d446:	e09c      	b.n	800d582 <_printf_i+0x1e6>
 800d448:	6833      	ldr	r3, [r6, #0]
 800d44a:	6820      	ldr	r0, [r4, #0]
 800d44c:	1d19      	adds	r1, r3, #4
 800d44e:	6031      	str	r1, [r6, #0]
 800d450:	0606      	lsls	r6, r0, #24
 800d452:	d501      	bpl.n	800d458 <_printf_i+0xbc>
 800d454:	681d      	ldr	r5, [r3, #0]
 800d456:	e003      	b.n	800d460 <_printf_i+0xc4>
 800d458:	0645      	lsls	r5, r0, #25
 800d45a:	d5fb      	bpl.n	800d454 <_printf_i+0xb8>
 800d45c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d460:	2d00      	cmp	r5, #0
 800d462:	da03      	bge.n	800d46c <_printf_i+0xd0>
 800d464:	232d      	movs	r3, #45	@ 0x2d
 800d466:	426d      	negs	r5, r5
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d46c:	4858      	ldr	r0, [pc, #352]	@ (800d5d0 <_printf_i+0x234>)
 800d46e:	230a      	movs	r3, #10
 800d470:	e011      	b.n	800d496 <_printf_i+0xfa>
 800d472:	6821      	ldr	r1, [r4, #0]
 800d474:	6833      	ldr	r3, [r6, #0]
 800d476:	0608      	lsls	r0, r1, #24
 800d478:	f853 5b04 	ldr.w	r5, [r3], #4
 800d47c:	d402      	bmi.n	800d484 <_printf_i+0xe8>
 800d47e:	0649      	lsls	r1, r1, #25
 800d480:	bf48      	it	mi
 800d482:	b2ad      	uxthmi	r5, r5
 800d484:	2f6f      	cmp	r7, #111	@ 0x6f
 800d486:	4852      	ldr	r0, [pc, #328]	@ (800d5d0 <_printf_i+0x234>)
 800d488:	6033      	str	r3, [r6, #0]
 800d48a:	bf14      	ite	ne
 800d48c:	230a      	movne	r3, #10
 800d48e:	2308      	moveq	r3, #8
 800d490:	2100      	movs	r1, #0
 800d492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d496:	6866      	ldr	r6, [r4, #4]
 800d498:	60a6      	str	r6, [r4, #8]
 800d49a:	2e00      	cmp	r6, #0
 800d49c:	db05      	blt.n	800d4aa <_printf_i+0x10e>
 800d49e:	6821      	ldr	r1, [r4, #0]
 800d4a0:	432e      	orrs	r6, r5
 800d4a2:	f021 0104 	bic.w	r1, r1, #4
 800d4a6:	6021      	str	r1, [r4, #0]
 800d4a8:	d04b      	beq.n	800d542 <_printf_i+0x1a6>
 800d4aa:	4616      	mov	r6, r2
 800d4ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4b0:	fb03 5711 	mls	r7, r3, r1, r5
 800d4b4:	5dc7      	ldrb	r7, [r0, r7]
 800d4b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4ba:	462f      	mov	r7, r5
 800d4bc:	42bb      	cmp	r3, r7
 800d4be:	460d      	mov	r5, r1
 800d4c0:	d9f4      	bls.n	800d4ac <_printf_i+0x110>
 800d4c2:	2b08      	cmp	r3, #8
 800d4c4:	d10b      	bne.n	800d4de <_printf_i+0x142>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	07df      	lsls	r7, r3, #31
 800d4ca:	d508      	bpl.n	800d4de <_printf_i+0x142>
 800d4cc:	6923      	ldr	r3, [r4, #16]
 800d4ce:	6861      	ldr	r1, [r4, #4]
 800d4d0:	4299      	cmp	r1, r3
 800d4d2:	bfde      	ittt	le
 800d4d4:	2330      	movle	r3, #48	@ 0x30
 800d4d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4de:	1b92      	subs	r2, r2, r6
 800d4e0:	6122      	str	r2, [r4, #16]
 800d4e2:	f8cd a000 	str.w	sl, [sp]
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	aa03      	add	r2, sp, #12
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	f7ff fee7 	bl	800d2c0 <_printf_common>
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d14a      	bne.n	800d58c <_printf_i+0x1f0>
 800d4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fa:	b004      	add	sp, #16
 800d4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	f043 0320 	orr.w	r3, r3, #32
 800d506:	6023      	str	r3, [r4, #0]
 800d508:	4832      	ldr	r0, [pc, #200]	@ (800d5d4 <_printf_i+0x238>)
 800d50a:	2778      	movs	r7, #120	@ 0x78
 800d50c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	6831      	ldr	r1, [r6, #0]
 800d514:	061f      	lsls	r7, r3, #24
 800d516:	f851 5b04 	ldr.w	r5, [r1], #4
 800d51a:	d402      	bmi.n	800d522 <_printf_i+0x186>
 800d51c:	065f      	lsls	r7, r3, #25
 800d51e:	bf48      	it	mi
 800d520:	b2ad      	uxthmi	r5, r5
 800d522:	6031      	str	r1, [r6, #0]
 800d524:	07d9      	lsls	r1, r3, #31
 800d526:	bf44      	itt	mi
 800d528:	f043 0320 	orrmi.w	r3, r3, #32
 800d52c:	6023      	strmi	r3, [r4, #0]
 800d52e:	b11d      	cbz	r5, 800d538 <_printf_i+0x19c>
 800d530:	2310      	movs	r3, #16
 800d532:	e7ad      	b.n	800d490 <_printf_i+0xf4>
 800d534:	4826      	ldr	r0, [pc, #152]	@ (800d5d0 <_printf_i+0x234>)
 800d536:	e7e9      	b.n	800d50c <_printf_i+0x170>
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	f023 0320 	bic.w	r3, r3, #32
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	e7f6      	b.n	800d530 <_printf_i+0x194>
 800d542:	4616      	mov	r6, r2
 800d544:	e7bd      	b.n	800d4c2 <_printf_i+0x126>
 800d546:	6833      	ldr	r3, [r6, #0]
 800d548:	6825      	ldr	r5, [r4, #0]
 800d54a:	6961      	ldr	r1, [r4, #20]
 800d54c:	1d18      	adds	r0, r3, #4
 800d54e:	6030      	str	r0, [r6, #0]
 800d550:	062e      	lsls	r6, r5, #24
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	d501      	bpl.n	800d55a <_printf_i+0x1be>
 800d556:	6019      	str	r1, [r3, #0]
 800d558:	e002      	b.n	800d560 <_printf_i+0x1c4>
 800d55a:	0668      	lsls	r0, r5, #25
 800d55c:	d5fb      	bpl.n	800d556 <_printf_i+0x1ba>
 800d55e:	8019      	strh	r1, [r3, #0]
 800d560:	2300      	movs	r3, #0
 800d562:	6123      	str	r3, [r4, #16]
 800d564:	4616      	mov	r6, r2
 800d566:	e7bc      	b.n	800d4e2 <_printf_i+0x146>
 800d568:	6833      	ldr	r3, [r6, #0]
 800d56a:	1d1a      	adds	r2, r3, #4
 800d56c:	6032      	str	r2, [r6, #0]
 800d56e:	681e      	ldr	r6, [r3, #0]
 800d570:	6862      	ldr	r2, [r4, #4]
 800d572:	2100      	movs	r1, #0
 800d574:	4630      	mov	r0, r6
 800d576:	f7f2 fe0b 	bl	8000190 <memchr>
 800d57a:	b108      	cbz	r0, 800d580 <_printf_i+0x1e4>
 800d57c:	1b80      	subs	r0, r0, r6
 800d57e:	6060      	str	r0, [r4, #4]
 800d580:	6863      	ldr	r3, [r4, #4]
 800d582:	6123      	str	r3, [r4, #16]
 800d584:	2300      	movs	r3, #0
 800d586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d58a:	e7aa      	b.n	800d4e2 <_printf_i+0x146>
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	4632      	mov	r2, r6
 800d590:	4649      	mov	r1, r9
 800d592:	4640      	mov	r0, r8
 800d594:	47d0      	blx	sl
 800d596:	3001      	adds	r0, #1
 800d598:	d0ad      	beq.n	800d4f6 <_printf_i+0x15a>
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	079b      	lsls	r3, r3, #30
 800d59e:	d413      	bmi.n	800d5c8 <_printf_i+0x22c>
 800d5a0:	68e0      	ldr	r0, [r4, #12]
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	4298      	cmp	r0, r3
 800d5a6:	bfb8      	it	lt
 800d5a8:	4618      	movlt	r0, r3
 800d5aa:	e7a6      	b.n	800d4fa <_printf_i+0x15e>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	47d0      	blx	sl
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d09d      	beq.n	800d4f6 <_printf_i+0x15a>
 800d5ba:	3501      	adds	r5, #1
 800d5bc:	68e3      	ldr	r3, [r4, #12]
 800d5be:	9903      	ldr	r1, [sp, #12]
 800d5c0:	1a5b      	subs	r3, r3, r1
 800d5c2:	42ab      	cmp	r3, r5
 800d5c4:	dcf2      	bgt.n	800d5ac <_printf_i+0x210>
 800d5c6:	e7eb      	b.n	800d5a0 <_printf_i+0x204>
 800d5c8:	2500      	movs	r5, #0
 800d5ca:	f104 0619 	add.w	r6, r4, #25
 800d5ce:	e7f5      	b.n	800d5bc <_printf_i+0x220>
 800d5d0:	0800e574 	.word	0x0800e574
 800d5d4:	0800e585 	.word	0x0800e585

0800d5d8 <__sflush_r>:
 800d5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	0716      	lsls	r6, r2, #28
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	d454      	bmi.n	800d690 <__sflush_r+0xb8>
 800d5e6:	684b      	ldr	r3, [r1, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	dc02      	bgt.n	800d5f2 <__sflush_r+0x1a>
 800d5ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	dd48      	ble.n	800d684 <__sflush_r+0xac>
 800d5f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5f4:	2e00      	cmp	r6, #0
 800d5f6:	d045      	beq.n	800d684 <__sflush_r+0xac>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5fe:	682f      	ldr	r7, [r5, #0]
 800d600:	6a21      	ldr	r1, [r4, #32]
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	d030      	beq.n	800d668 <__sflush_r+0x90>
 800d606:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	0759      	lsls	r1, r3, #29
 800d60c:	d505      	bpl.n	800d61a <__sflush_r+0x42>
 800d60e:	6863      	ldr	r3, [r4, #4]
 800d610:	1ad2      	subs	r2, r2, r3
 800d612:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d614:	b10b      	cbz	r3, 800d61a <__sflush_r+0x42>
 800d616:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d618:	1ad2      	subs	r2, r2, r3
 800d61a:	2300      	movs	r3, #0
 800d61c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d61e:	6a21      	ldr	r1, [r4, #32]
 800d620:	4628      	mov	r0, r5
 800d622:	47b0      	blx	r6
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	d106      	bne.n	800d638 <__sflush_r+0x60>
 800d62a:	6829      	ldr	r1, [r5, #0]
 800d62c:	291d      	cmp	r1, #29
 800d62e:	d82b      	bhi.n	800d688 <__sflush_r+0xb0>
 800d630:	4a28      	ldr	r2, [pc, #160]	@ (800d6d4 <__sflush_r+0xfc>)
 800d632:	40ca      	lsrs	r2, r1
 800d634:	07d6      	lsls	r6, r2, #31
 800d636:	d527      	bpl.n	800d688 <__sflush_r+0xb0>
 800d638:	2200      	movs	r2, #0
 800d63a:	6062      	str	r2, [r4, #4]
 800d63c:	04d9      	lsls	r1, r3, #19
 800d63e:	6922      	ldr	r2, [r4, #16]
 800d640:	6022      	str	r2, [r4, #0]
 800d642:	d504      	bpl.n	800d64e <__sflush_r+0x76>
 800d644:	1c42      	adds	r2, r0, #1
 800d646:	d101      	bne.n	800d64c <__sflush_r+0x74>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b903      	cbnz	r3, 800d64e <__sflush_r+0x76>
 800d64c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d64e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d650:	602f      	str	r7, [r5, #0]
 800d652:	b1b9      	cbz	r1, 800d684 <__sflush_r+0xac>
 800d654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d658:	4299      	cmp	r1, r3
 800d65a:	d002      	beq.n	800d662 <__sflush_r+0x8a>
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7ff fbd7 	bl	800ce10 <_free_r>
 800d662:	2300      	movs	r3, #0
 800d664:	6363      	str	r3, [r4, #52]	@ 0x34
 800d666:	e00d      	b.n	800d684 <__sflush_r+0xac>
 800d668:	2301      	movs	r3, #1
 800d66a:	4628      	mov	r0, r5
 800d66c:	47b0      	blx	r6
 800d66e:	4602      	mov	r2, r0
 800d670:	1c50      	adds	r0, r2, #1
 800d672:	d1c9      	bne.n	800d608 <__sflush_r+0x30>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0c6      	beq.n	800d608 <__sflush_r+0x30>
 800d67a:	2b1d      	cmp	r3, #29
 800d67c:	d001      	beq.n	800d682 <__sflush_r+0xaa>
 800d67e:	2b16      	cmp	r3, #22
 800d680:	d11d      	bne.n	800d6be <__sflush_r+0xe6>
 800d682:	602f      	str	r7, [r5, #0]
 800d684:	2000      	movs	r0, #0
 800d686:	e021      	b.n	800d6cc <__sflush_r+0xf4>
 800d688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d68c:	b21b      	sxth	r3, r3
 800d68e:	e01a      	b.n	800d6c6 <__sflush_r+0xee>
 800d690:	690f      	ldr	r7, [r1, #16]
 800d692:	2f00      	cmp	r7, #0
 800d694:	d0f6      	beq.n	800d684 <__sflush_r+0xac>
 800d696:	0793      	lsls	r3, r2, #30
 800d698:	680e      	ldr	r6, [r1, #0]
 800d69a:	bf08      	it	eq
 800d69c:	694b      	ldreq	r3, [r1, #20]
 800d69e:	600f      	str	r7, [r1, #0]
 800d6a0:	bf18      	it	ne
 800d6a2:	2300      	movne	r3, #0
 800d6a4:	1bf6      	subs	r6, r6, r7
 800d6a6:	608b      	str	r3, [r1, #8]
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	ddeb      	ble.n	800d684 <__sflush_r+0xac>
 800d6ac:	6a21      	ldr	r1, [r4, #32]
 800d6ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d6b2:	4633      	mov	r3, r6
 800d6b4:	463a      	mov	r2, r7
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	47e0      	blx	ip
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	dc07      	bgt.n	800d6ce <__sflush_r+0xf6>
 800d6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6c6:	81a3      	strh	r3, [r4, #12]
 800d6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ce:	4407      	add	r7, r0
 800d6d0:	1a36      	subs	r6, r6, r0
 800d6d2:	e7e9      	b.n	800d6a8 <__sflush_r+0xd0>
 800d6d4:	20400001 	.word	0x20400001

0800d6d8 <_fflush_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	690b      	ldr	r3, [r1, #16]
 800d6dc:	4605      	mov	r5, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	b913      	cbnz	r3, 800d6e8 <_fflush_r+0x10>
 800d6e2:	2500      	movs	r5, #0
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	b118      	cbz	r0, 800d6f2 <_fflush_r+0x1a>
 800d6ea:	6a03      	ldr	r3, [r0, #32]
 800d6ec:	b90b      	cbnz	r3, 800d6f2 <_fflush_r+0x1a>
 800d6ee:	f7ff fa3b 	bl	800cb68 <__sinit>
 800d6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0f3      	beq.n	800d6e2 <_fflush_r+0xa>
 800d6fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6fc:	07d0      	lsls	r0, r2, #31
 800d6fe:	d404      	bmi.n	800d70a <_fflush_r+0x32>
 800d700:	0599      	lsls	r1, r3, #22
 800d702:	d402      	bmi.n	800d70a <_fflush_r+0x32>
 800d704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d706:	f7ff fb54 	bl	800cdb2 <__retarget_lock_acquire_recursive>
 800d70a:	4628      	mov	r0, r5
 800d70c:	4621      	mov	r1, r4
 800d70e:	f7ff ff63 	bl	800d5d8 <__sflush_r>
 800d712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d714:	07da      	lsls	r2, r3, #31
 800d716:	4605      	mov	r5, r0
 800d718:	d4e4      	bmi.n	800d6e4 <_fflush_r+0xc>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	059b      	lsls	r3, r3, #22
 800d71e:	d4e1      	bmi.n	800d6e4 <_fflush_r+0xc>
 800d720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d722:	f7ff fb47 	bl	800cdb4 <__retarget_lock_release_recursive>
 800d726:	e7dd      	b.n	800d6e4 <_fflush_r+0xc>

0800d728 <fiprintf>:
 800d728:	b40e      	push	{r1, r2, r3}
 800d72a:	b503      	push	{r0, r1, lr}
 800d72c:	4601      	mov	r1, r0
 800d72e:	ab03      	add	r3, sp, #12
 800d730:	4805      	ldr	r0, [pc, #20]	@ (800d748 <fiprintf+0x20>)
 800d732:	f853 2b04 	ldr.w	r2, [r3], #4
 800d736:	6800      	ldr	r0, [r0, #0]
 800d738:	9301      	str	r3, [sp, #4]
 800d73a:	f000 f88d 	bl	800d858 <_vfiprintf_r>
 800d73e:	b002      	add	sp, #8
 800d740:	f85d eb04 	ldr.w	lr, [sp], #4
 800d744:	b003      	add	sp, #12
 800d746:	4770      	bx	lr
 800d748:	2000007c 	.word	0x2000007c

0800d74c <memmove>:
 800d74c:	4288      	cmp	r0, r1
 800d74e:	b510      	push	{r4, lr}
 800d750:	eb01 0402 	add.w	r4, r1, r2
 800d754:	d902      	bls.n	800d75c <memmove+0x10>
 800d756:	4284      	cmp	r4, r0
 800d758:	4623      	mov	r3, r4
 800d75a:	d807      	bhi.n	800d76c <memmove+0x20>
 800d75c:	1e43      	subs	r3, r0, #1
 800d75e:	42a1      	cmp	r1, r4
 800d760:	d008      	beq.n	800d774 <memmove+0x28>
 800d762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d76a:	e7f8      	b.n	800d75e <memmove+0x12>
 800d76c:	4402      	add	r2, r0
 800d76e:	4601      	mov	r1, r0
 800d770:	428a      	cmp	r2, r1
 800d772:	d100      	bne.n	800d776 <memmove+0x2a>
 800d774:	bd10      	pop	{r4, pc}
 800d776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d77e:	e7f7      	b.n	800d770 <memmove+0x24>

0800d780 <_sbrk_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4d06      	ldr	r5, [pc, #24]	@ (800d79c <_sbrk_r+0x1c>)
 800d784:	2300      	movs	r3, #0
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f4 f9ae 	bl	8001aec <_sbrk>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_sbrk_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_sbrk_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	2000065c 	.word	0x2000065c

0800d7a0 <abort>:
 800d7a0:	b508      	push	{r3, lr}
 800d7a2:	2006      	movs	r0, #6
 800d7a4:	f000 fa2c 	bl	800dc00 <raise>
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f7f4 f946 	bl	8001a3a <_exit>

0800d7ae <_realloc_r>:
 800d7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	460d      	mov	r5, r1
 800d7b8:	b921      	cbnz	r1, 800d7c4 <_realloc_r+0x16>
 800d7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7be:	4611      	mov	r1, r2
 800d7c0:	f7ff bb9a 	b.w	800cef8 <_malloc_r>
 800d7c4:	b92a      	cbnz	r2, 800d7d2 <_realloc_r+0x24>
 800d7c6:	f7ff fb23 	bl	800ce10 <_free_r>
 800d7ca:	4625      	mov	r5, r4
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d2:	f000 fa31 	bl	800dc38 <_malloc_usable_size_r>
 800d7d6:	4284      	cmp	r4, r0
 800d7d8:	4606      	mov	r6, r0
 800d7da:	d802      	bhi.n	800d7e2 <_realloc_r+0x34>
 800d7dc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7e0:	d8f4      	bhi.n	800d7cc <_realloc_r+0x1e>
 800d7e2:	4621      	mov	r1, r4
 800d7e4:	4638      	mov	r0, r7
 800d7e6:	f7ff fb87 	bl	800cef8 <_malloc_r>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	b908      	cbnz	r0, 800d7f2 <_realloc_r+0x44>
 800d7ee:	4645      	mov	r5, r8
 800d7f0:	e7ec      	b.n	800d7cc <_realloc_r+0x1e>
 800d7f2:	42b4      	cmp	r4, r6
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	bf28      	it	cs
 800d7fa:	4632      	movcs	r2, r6
 800d7fc:	f7ff fadb 	bl	800cdb6 <memcpy>
 800d800:	4629      	mov	r1, r5
 800d802:	4638      	mov	r0, r7
 800d804:	f7ff fb04 	bl	800ce10 <_free_r>
 800d808:	e7f1      	b.n	800d7ee <_realloc_r+0x40>

0800d80a <__sfputc_r>:
 800d80a:	6893      	ldr	r3, [r2, #8]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	b410      	push	{r4}
 800d812:	6093      	str	r3, [r2, #8]
 800d814:	da07      	bge.n	800d826 <__sfputc_r+0x1c>
 800d816:	6994      	ldr	r4, [r2, #24]
 800d818:	42a3      	cmp	r3, r4
 800d81a:	db01      	blt.n	800d820 <__sfputc_r+0x16>
 800d81c:	290a      	cmp	r1, #10
 800d81e:	d102      	bne.n	800d826 <__sfputc_r+0x1c>
 800d820:	bc10      	pop	{r4}
 800d822:	f000 b931 	b.w	800da88 <__swbuf_r>
 800d826:	6813      	ldr	r3, [r2, #0]
 800d828:	1c58      	adds	r0, r3, #1
 800d82a:	6010      	str	r0, [r2, #0]
 800d82c:	7019      	strb	r1, [r3, #0]
 800d82e:	4608      	mov	r0, r1
 800d830:	bc10      	pop	{r4}
 800d832:	4770      	bx	lr

0800d834 <__sfputs_r>:
 800d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d836:	4606      	mov	r6, r0
 800d838:	460f      	mov	r7, r1
 800d83a:	4614      	mov	r4, r2
 800d83c:	18d5      	adds	r5, r2, r3
 800d83e:	42ac      	cmp	r4, r5
 800d840:	d101      	bne.n	800d846 <__sfputs_r+0x12>
 800d842:	2000      	movs	r0, #0
 800d844:	e007      	b.n	800d856 <__sfputs_r+0x22>
 800d846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d84a:	463a      	mov	r2, r7
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff ffdc 	bl	800d80a <__sfputc_r>
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	d1f3      	bne.n	800d83e <__sfputs_r+0xa>
 800d856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d858 <_vfiprintf_r>:
 800d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	460d      	mov	r5, r1
 800d85e:	b09d      	sub	sp, #116	@ 0x74
 800d860:	4614      	mov	r4, r2
 800d862:	4698      	mov	r8, r3
 800d864:	4606      	mov	r6, r0
 800d866:	b118      	cbz	r0, 800d870 <_vfiprintf_r+0x18>
 800d868:	6a03      	ldr	r3, [r0, #32]
 800d86a:	b90b      	cbnz	r3, 800d870 <_vfiprintf_r+0x18>
 800d86c:	f7ff f97c 	bl	800cb68 <__sinit>
 800d870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d872:	07d9      	lsls	r1, r3, #31
 800d874:	d405      	bmi.n	800d882 <_vfiprintf_r+0x2a>
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	059a      	lsls	r2, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_vfiprintf_r+0x2a>
 800d87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d87e:	f7ff fa98 	bl	800cdb2 <__retarget_lock_acquire_recursive>
 800d882:	89ab      	ldrh	r3, [r5, #12]
 800d884:	071b      	lsls	r3, r3, #28
 800d886:	d501      	bpl.n	800d88c <_vfiprintf_r+0x34>
 800d888:	692b      	ldr	r3, [r5, #16]
 800d88a:	b99b      	cbnz	r3, 800d8b4 <_vfiprintf_r+0x5c>
 800d88c:	4629      	mov	r1, r5
 800d88e:	4630      	mov	r0, r6
 800d890:	f000 f938 	bl	800db04 <__swsetup_r>
 800d894:	b170      	cbz	r0, 800d8b4 <_vfiprintf_r+0x5c>
 800d896:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d898:	07dc      	lsls	r4, r3, #31
 800d89a:	d504      	bpl.n	800d8a6 <_vfiprintf_r+0x4e>
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a0:	b01d      	add	sp, #116	@ 0x74
 800d8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	0598      	lsls	r0, r3, #22
 800d8aa:	d4f7      	bmi.n	800d89c <_vfiprintf_r+0x44>
 800d8ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8ae:	f7ff fa81 	bl	800cdb4 <__retarget_lock_release_recursive>
 800d8b2:	e7f3      	b.n	800d89c <_vfiprintf_r+0x44>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b8:	2320      	movs	r3, #32
 800d8ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8be:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c2:	2330      	movs	r3, #48	@ 0x30
 800d8c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da74 <_vfiprintf_r+0x21c>
 800d8c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8cc:	f04f 0901 	mov.w	r9, #1
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	469a      	mov	sl, r3
 800d8d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8d8:	b10a      	cbz	r2, 800d8de <_vfiprintf_r+0x86>
 800d8da:	2a25      	cmp	r2, #37	@ 0x25
 800d8dc:	d1f9      	bne.n	800d8d2 <_vfiprintf_r+0x7a>
 800d8de:	ebba 0b04 	subs.w	fp, sl, r4
 800d8e2:	d00b      	beq.n	800d8fc <_vfiprintf_r+0xa4>
 800d8e4:	465b      	mov	r3, fp
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	f7ff ffa2 	bl	800d834 <__sfputs_r>
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	f000 80a7 	beq.w	800da44 <_vfiprintf_r+0x1ec>
 800d8f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8f8:	445a      	add	r2, fp
 800d8fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 809f 	beq.w	800da44 <_vfiprintf_r+0x1ec>
 800d906:	2300      	movs	r3, #0
 800d908:	f04f 32ff 	mov.w	r2, #4294967295
 800d90c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d910:	f10a 0a01 	add.w	sl, sl, #1
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	9307      	str	r3, [sp, #28]
 800d918:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d91c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d91e:	4654      	mov	r4, sl
 800d920:	2205      	movs	r2, #5
 800d922:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d926:	4853      	ldr	r0, [pc, #332]	@ (800da74 <_vfiprintf_r+0x21c>)
 800d928:	f7f2 fc32 	bl	8000190 <memchr>
 800d92c:	9a04      	ldr	r2, [sp, #16]
 800d92e:	b9d8      	cbnz	r0, 800d968 <_vfiprintf_r+0x110>
 800d930:	06d1      	lsls	r1, r2, #27
 800d932:	bf44      	itt	mi
 800d934:	2320      	movmi	r3, #32
 800d936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d93a:	0713      	lsls	r3, r2, #28
 800d93c:	bf44      	itt	mi
 800d93e:	232b      	movmi	r3, #43	@ 0x2b
 800d940:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d944:	f89a 3000 	ldrb.w	r3, [sl]
 800d948:	2b2a      	cmp	r3, #42	@ 0x2a
 800d94a:	d015      	beq.n	800d978 <_vfiprintf_r+0x120>
 800d94c:	9a07      	ldr	r2, [sp, #28]
 800d94e:	4654      	mov	r4, sl
 800d950:	2000      	movs	r0, #0
 800d952:	f04f 0c0a 	mov.w	ip, #10
 800d956:	4621      	mov	r1, r4
 800d958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d95c:	3b30      	subs	r3, #48	@ 0x30
 800d95e:	2b09      	cmp	r3, #9
 800d960:	d94b      	bls.n	800d9fa <_vfiprintf_r+0x1a2>
 800d962:	b1b0      	cbz	r0, 800d992 <_vfiprintf_r+0x13a>
 800d964:	9207      	str	r2, [sp, #28]
 800d966:	e014      	b.n	800d992 <_vfiprintf_r+0x13a>
 800d968:	eba0 0308 	sub.w	r3, r0, r8
 800d96c:	fa09 f303 	lsl.w	r3, r9, r3
 800d970:	4313      	orrs	r3, r2
 800d972:	9304      	str	r3, [sp, #16]
 800d974:	46a2      	mov	sl, r4
 800d976:	e7d2      	b.n	800d91e <_vfiprintf_r+0xc6>
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	1d19      	adds	r1, r3, #4
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	9103      	str	r1, [sp, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	bfbb      	ittet	lt
 800d984:	425b      	neglt	r3, r3
 800d986:	f042 0202 	orrlt.w	r2, r2, #2
 800d98a:	9307      	strge	r3, [sp, #28]
 800d98c:	9307      	strlt	r3, [sp, #28]
 800d98e:	bfb8      	it	lt
 800d990:	9204      	strlt	r2, [sp, #16]
 800d992:	7823      	ldrb	r3, [r4, #0]
 800d994:	2b2e      	cmp	r3, #46	@ 0x2e
 800d996:	d10a      	bne.n	800d9ae <_vfiprintf_r+0x156>
 800d998:	7863      	ldrb	r3, [r4, #1]
 800d99a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d99c:	d132      	bne.n	800da04 <_vfiprintf_r+0x1ac>
 800d99e:	9b03      	ldr	r3, [sp, #12]
 800d9a0:	1d1a      	adds	r2, r3, #4
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	9203      	str	r2, [sp, #12]
 800d9a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9aa:	3402      	adds	r4, #2
 800d9ac:	9305      	str	r3, [sp, #20]
 800d9ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800da78 <_vfiprintf_r+0x220>
 800d9b2:	7821      	ldrb	r1, [r4, #0]
 800d9b4:	2203      	movs	r2, #3
 800d9b6:	4650      	mov	r0, sl
 800d9b8:	f7f2 fbea 	bl	8000190 <memchr>
 800d9bc:	b138      	cbz	r0, 800d9ce <_vfiprintf_r+0x176>
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	eba0 000a 	sub.w	r0, r0, sl
 800d9c4:	2240      	movs	r2, #64	@ 0x40
 800d9c6:	4082      	lsls	r2, r0
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	3401      	adds	r4, #1
 800d9cc:	9304      	str	r3, [sp, #16]
 800d9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d2:	482a      	ldr	r0, [pc, #168]	@ (800da7c <_vfiprintf_r+0x224>)
 800d9d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9d8:	2206      	movs	r2, #6
 800d9da:	f7f2 fbd9 	bl	8000190 <memchr>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d03f      	beq.n	800da62 <_vfiprintf_r+0x20a>
 800d9e2:	4b27      	ldr	r3, [pc, #156]	@ (800da80 <_vfiprintf_r+0x228>)
 800d9e4:	bb1b      	cbnz	r3, 800da2e <_vfiprintf_r+0x1d6>
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	3307      	adds	r3, #7
 800d9ea:	f023 0307 	bic.w	r3, r3, #7
 800d9ee:	3308      	adds	r3, #8
 800d9f0:	9303      	str	r3, [sp, #12]
 800d9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f4:	443b      	add	r3, r7
 800d9f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9f8:	e76a      	b.n	800d8d0 <_vfiprintf_r+0x78>
 800d9fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9fe:	460c      	mov	r4, r1
 800da00:	2001      	movs	r0, #1
 800da02:	e7a8      	b.n	800d956 <_vfiprintf_r+0xfe>
 800da04:	2300      	movs	r3, #0
 800da06:	3401      	adds	r4, #1
 800da08:	9305      	str	r3, [sp, #20]
 800da0a:	4619      	mov	r1, r3
 800da0c:	f04f 0c0a 	mov.w	ip, #10
 800da10:	4620      	mov	r0, r4
 800da12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da16:	3a30      	subs	r2, #48	@ 0x30
 800da18:	2a09      	cmp	r2, #9
 800da1a:	d903      	bls.n	800da24 <_vfiprintf_r+0x1cc>
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0c6      	beq.n	800d9ae <_vfiprintf_r+0x156>
 800da20:	9105      	str	r1, [sp, #20]
 800da22:	e7c4      	b.n	800d9ae <_vfiprintf_r+0x156>
 800da24:	fb0c 2101 	mla	r1, ip, r1, r2
 800da28:	4604      	mov	r4, r0
 800da2a:	2301      	movs	r3, #1
 800da2c:	e7f0      	b.n	800da10 <_vfiprintf_r+0x1b8>
 800da2e:	ab03      	add	r3, sp, #12
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	462a      	mov	r2, r5
 800da34:	4b13      	ldr	r3, [pc, #76]	@ (800da84 <_vfiprintf_r+0x22c>)
 800da36:	a904      	add	r1, sp, #16
 800da38:	4630      	mov	r0, r6
 800da3a:	f3af 8000 	nop.w
 800da3e:	4607      	mov	r7, r0
 800da40:	1c78      	adds	r0, r7, #1
 800da42:	d1d6      	bne.n	800d9f2 <_vfiprintf_r+0x19a>
 800da44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da46:	07d9      	lsls	r1, r3, #31
 800da48:	d405      	bmi.n	800da56 <_vfiprintf_r+0x1fe>
 800da4a:	89ab      	ldrh	r3, [r5, #12]
 800da4c:	059a      	lsls	r2, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_vfiprintf_r+0x1fe>
 800da50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da52:	f7ff f9af 	bl	800cdb4 <__retarget_lock_release_recursive>
 800da56:	89ab      	ldrh	r3, [r5, #12]
 800da58:	065b      	lsls	r3, r3, #25
 800da5a:	f53f af1f 	bmi.w	800d89c <_vfiprintf_r+0x44>
 800da5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da60:	e71e      	b.n	800d8a0 <_vfiprintf_r+0x48>
 800da62:	ab03      	add	r3, sp, #12
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	462a      	mov	r2, r5
 800da68:	4b06      	ldr	r3, [pc, #24]	@ (800da84 <_vfiprintf_r+0x22c>)
 800da6a:	a904      	add	r1, sp, #16
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7ff fc95 	bl	800d39c <_printf_i>
 800da72:	e7e4      	b.n	800da3e <_vfiprintf_r+0x1e6>
 800da74:	0800e563 	.word	0x0800e563
 800da78:	0800e569 	.word	0x0800e569
 800da7c:	0800e56d 	.word	0x0800e56d
 800da80:	00000000 	.word	0x00000000
 800da84:	0800d835 	.word	0x0800d835

0800da88 <__swbuf_r>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	460e      	mov	r6, r1
 800da8c:	4614      	mov	r4, r2
 800da8e:	4605      	mov	r5, r0
 800da90:	b118      	cbz	r0, 800da9a <__swbuf_r+0x12>
 800da92:	6a03      	ldr	r3, [r0, #32]
 800da94:	b90b      	cbnz	r3, 800da9a <__swbuf_r+0x12>
 800da96:	f7ff f867 	bl	800cb68 <__sinit>
 800da9a:	69a3      	ldr	r3, [r4, #24]
 800da9c:	60a3      	str	r3, [r4, #8]
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	071a      	lsls	r2, r3, #28
 800daa2:	d501      	bpl.n	800daa8 <__swbuf_r+0x20>
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	b943      	cbnz	r3, 800daba <__swbuf_r+0x32>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 f82a 	bl	800db04 <__swsetup_r>
 800dab0:	b118      	cbz	r0, 800daba <__swbuf_r+0x32>
 800dab2:	f04f 37ff 	mov.w	r7, #4294967295
 800dab6:	4638      	mov	r0, r7
 800dab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	6922      	ldr	r2, [r4, #16]
 800dabe:	1a98      	subs	r0, r3, r2
 800dac0:	6963      	ldr	r3, [r4, #20]
 800dac2:	b2f6      	uxtb	r6, r6
 800dac4:	4283      	cmp	r3, r0
 800dac6:	4637      	mov	r7, r6
 800dac8:	dc05      	bgt.n	800dad6 <__swbuf_r+0x4e>
 800daca:	4621      	mov	r1, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	f7ff fe03 	bl	800d6d8 <_fflush_r>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d1ed      	bne.n	800dab2 <__swbuf_r+0x2a>
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	3b01      	subs	r3, #1
 800dada:	60a3      	str	r3, [r4, #8]
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	1c5a      	adds	r2, r3, #1
 800dae0:	6022      	str	r2, [r4, #0]
 800dae2:	701e      	strb	r6, [r3, #0]
 800dae4:	6962      	ldr	r2, [r4, #20]
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	429a      	cmp	r2, r3
 800daea:	d004      	beq.n	800daf6 <__swbuf_r+0x6e>
 800daec:	89a3      	ldrh	r3, [r4, #12]
 800daee:	07db      	lsls	r3, r3, #31
 800daf0:	d5e1      	bpl.n	800dab6 <__swbuf_r+0x2e>
 800daf2:	2e0a      	cmp	r6, #10
 800daf4:	d1df      	bne.n	800dab6 <__swbuf_r+0x2e>
 800daf6:	4621      	mov	r1, r4
 800daf8:	4628      	mov	r0, r5
 800dafa:	f7ff fded 	bl	800d6d8 <_fflush_r>
 800dafe:	2800      	cmp	r0, #0
 800db00:	d0d9      	beq.n	800dab6 <__swbuf_r+0x2e>
 800db02:	e7d6      	b.n	800dab2 <__swbuf_r+0x2a>

0800db04 <__swsetup_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4b29      	ldr	r3, [pc, #164]	@ (800dbac <__swsetup_r+0xa8>)
 800db08:	4605      	mov	r5, r0
 800db0a:	6818      	ldr	r0, [r3, #0]
 800db0c:	460c      	mov	r4, r1
 800db0e:	b118      	cbz	r0, 800db18 <__swsetup_r+0x14>
 800db10:	6a03      	ldr	r3, [r0, #32]
 800db12:	b90b      	cbnz	r3, 800db18 <__swsetup_r+0x14>
 800db14:	f7ff f828 	bl	800cb68 <__sinit>
 800db18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db1c:	0719      	lsls	r1, r3, #28
 800db1e:	d422      	bmi.n	800db66 <__swsetup_r+0x62>
 800db20:	06da      	lsls	r2, r3, #27
 800db22:	d407      	bmi.n	800db34 <__swsetup_r+0x30>
 800db24:	2209      	movs	r2, #9
 800db26:	602a      	str	r2, [r5, #0]
 800db28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db2c:	81a3      	strh	r3, [r4, #12]
 800db2e:	f04f 30ff 	mov.w	r0, #4294967295
 800db32:	e033      	b.n	800db9c <__swsetup_r+0x98>
 800db34:	0758      	lsls	r0, r3, #29
 800db36:	d512      	bpl.n	800db5e <__swsetup_r+0x5a>
 800db38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db3a:	b141      	cbz	r1, 800db4e <__swsetup_r+0x4a>
 800db3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db40:	4299      	cmp	r1, r3
 800db42:	d002      	beq.n	800db4a <__swsetup_r+0x46>
 800db44:	4628      	mov	r0, r5
 800db46:	f7ff f963 	bl	800ce10 <_free_r>
 800db4a:	2300      	movs	r3, #0
 800db4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800db4e:	89a3      	ldrh	r3, [r4, #12]
 800db50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db54:	81a3      	strh	r3, [r4, #12]
 800db56:	2300      	movs	r3, #0
 800db58:	6063      	str	r3, [r4, #4]
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f043 0308 	orr.w	r3, r3, #8
 800db64:	81a3      	strh	r3, [r4, #12]
 800db66:	6923      	ldr	r3, [r4, #16]
 800db68:	b94b      	cbnz	r3, 800db7e <__swsetup_r+0x7a>
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db74:	d003      	beq.n	800db7e <__swsetup_r+0x7a>
 800db76:	4621      	mov	r1, r4
 800db78:	4628      	mov	r0, r5
 800db7a:	f000 f88b 	bl	800dc94 <__smakebuf_r>
 800db7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db82:	f013 0201 	ands.w	r2, r3, #1
 800db86:	d00a      	beq.n	800db9e <__swsetup_r+0x9a>
 800db88:	2200      	movs	r2, #0
 800db8a:	60a2      	str	r2, [r4, #8]
 800db8c:	6962      	ldr	r2, [r4, #20]
 800db8e:	4252      	negs	r2, r2
 800db90:	61a2      	str	r2, [r4, #24]
 800db92:	6922      	ldr	r2, [r4, #16]
 800db94:	b942      	cbnz	r2, 800dba8 <__swsetup_r+0xa4>
 800db96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db9a:	d1c5      	bne.n	800db28 <__swsetup_r+0x24>
 800db9c:	bd38      	pop	{r3, r4, r5, pc}
 800db9e:	0799      	lsls	r1, r3, #30
 800dba0:	bf58      	it	pl
 800dba2:	6962      	ldrpl	r2, [r4, #20]
 800dba4:	60a2      	str	r2, [r4, #8]
 800dba6:	e7f4      	b.n	800db92 <__swsetup_r+0x8e>
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7f7      	b.n	800db9c <__swsetup_r+0x98>
 800dbac:	2000007c 	.word	0x2000007c

0800dbb0 <_raise_r>:
 800dbb0:	291f      	cmp	r1, #31
 800dbb2:	b538      	push	{r3, r4, r5, lr}
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	d904      	bls.n	800dbc4 <_raise_r+0x14>
 800dbba:	2316      	movs	r3, #22
 800dbbc:	6003      	str	r3, [r0, #0]
 800dbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbc6:	b112      	cbz	r2, 800dbce <_raise_r+0x1e>
 800dbc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbcc:	b94b      	cbnz	r3, 800dbe2 <_raise_r+0x32>
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f000 f830 	bl	800dc34 <_getpid_r>
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbde:	f000 b817 	b.w	800dc10 <_kill_r>
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d00a      	beq.n	800dbfc <_raise_r+0x4c>
 800dbe6:	1c59      	adds	r1, r3, #1
 800dbe8:	d103      	bne.n	800dbf2 <_raise_r+0x42>
 800dbea:	2316      	movs	r3, #22
 800dbec:	6003      	str	r3, [r0, #0]
 800dbee:	2001      	movs	r0, #1
 800dbf0:	e7e7      	b.n	800dbc2 <_raise_r+0x12>
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4798      	blx	r3
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	e7e0      	b.n	800dbc2 <_raise_r+0x12>

0800dc00 <raise>:
 800dc00:	4b02      	ldr	r3, [pc, #8]	@ (800dc0c <raise+0xc>)
 800dc02:	4601      	mov	r1, r0
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f7ff bfd3 	b.w	800dbb0 <_raise_r>
 800dc0a:	bf00      	nop
 800dc0c:	2000007c 	.word	0x2000007c

0800dc10 <_kill_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4d07      	ldr	r5, [pc, #28]	@ (800dc30 <_kill_r+0x20>)
 800dc14:	2300      	movs	r3, #0
 800dc16:	4604      	mov	r4, r0
 800dc18:	4608      	mov	r0, r1
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	f7f3 fefc 	bl	8001a1a <_kill>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	d102      	bne.n	800dc2c <_kill_r+0x1c>
 800dc26:	682b      	ldr	r3, [r5, #0]
 800dc28:	b103      	cbz	r3, 800dc2c <_kill_r+0x1c>
 800dc2a:	6023      	str	r3, [r4, #0]
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000065c 	.word	0x2000065c

0800dc34 <_getpid_r>:
 800dc34:	f7f3 beea 	b.w	8001a0c <_getpid>

0800dc38 <_malloc_usable_size_r>:
 800dc38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3c:	1f18      	subs	r0, r3, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bfbc      	itt	lt
 800dc42:	580b      	ldrlt	r3, [r1, r0]
 800dc44:	18c0      	addlt	r0, r0, r3
 800dc46:	4770      	bx	lr

0800dc48 <__swhatbuf_r>:
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc50:	2900      	cmp	r1, #0
 800dc52:	b096      	sub	sp, #88	@ 0x58
 800dc54:	4615      	mov	r5, r2
 800dc56:	461e      	mov	r6, r3
 800dc58:	da0d      	bge.n	800dc76 <__swhatbuf_r+0x2e>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc60:	f04f 0100 	mov.w	r1, #0
 800dc64:	bf14      	ite	ne
 800dc66:	2340      	movne	r3, #64	@ 0x40
 800dc68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	6031      	str	r1, [r6, #0]
 800dc70:	602b      	str	r3, [r5, #0]
 800dc72:	b016      	add	sp, #88	@ 0x58
 800dc74:	bd70      	pop	{r4, r5, r6, pc}
 800dc76:	466a      	mov	r2, sp
 800dc78:	f000 f848 	bl	800dd0c <_fstat_r>
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	dbec      	blt.n	800dc5a <__swhatbuf_r+0x12>
 800dc80:	9901      	ldr	r1, [sp, #4]
 800dc82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc8a:	4259      	negs	r1, r3
 800dc8c:	4159      	adcs	r1, r3
 800dc8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc92:	e7eb      	b.n	800dc6c <__swhatbuf_r+0x24>

0800dc94 <__smakebuf_r>:
 800dc94:	898b      	ldrh	r3, [r1, #12]
 800dc96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc98:	079d      	lsls	r5, r3, #30
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	d507      	bpl.n	800dcb0 <__smakebuf_r+0x1c>
 800dca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	6123      	str	r3, [r4, #16]
 800dca8:	2301      	movs	r3, #1
 800dcaa:	6163      	str	r3, [r4, #20]
 800dcac:	b003      	add	sp, #12
 800dcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcb0:	ab01      	add	r3, sp, #4
 800dcb2:	466a      	mov	r2, sp
 800dcb4:	f7ff ffc8 	bl	800dc48 <__swhatbuf_r>
 800dcb8:	9f00      	ldr	r7, [sp, #0]
 800dcba:	4605      	mov	r5, r0
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7ff f91a 	bl	800cef8 <_malloc_r>
 800dcc4:	b948      	cbnz	r0, 800dcda <__smakebuf_r+0x46>
 800dcc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcca:	059a      	lsls	r2, r3, #22
 800dccc:	d4ee      	bmi.n	800dcac <__smakebuf_r+0x18>
 800dcce:	f023 0303 	bic.w	r3, r3, #3
 800dcd2:	f043 0302 	orr.w	r3, r3, #2
 800dcd6:	81a3      	strh	r3, [r4, #12]
 800dcd8:	e7e2      	b.n	800dca0 <__smakebuf_r+0xc>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	6020      	str	r0, [r4, #0]
 800dcde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcea:	b15b      	cbz	r3, 800dd04 <__smakebuf_r+0x70>
 800dcec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 f81d 	bl	800dd30 <_isatty_r>
 800dcf6:	b128      	cbz	r0, 800dd04 <__smakebuf_r+0x70>
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	f023 0303 	bic.w	r3, r3, #3
 800dcfe:	f043 0301 	orr.w	r3, r3, #1
 800dd02:	81a3      	strh	r3, [r4, #12]
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	431d      	orrs	r5, r3
 800dd08:	81a5      	strh	r5, [r4, #12]
 800dd0a:	e7cf      	b.n	800dcac <__smakebuf_r+0x18>

0800dd0c <_fstat_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	@ (800dd2c <_fstat_r+0x20>)
 800dd10:	2300      	movs	r3, #0
 800dd12:	4604      	mov	r4, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	4611      	mov	r1, r2
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	f7f3 fec1 	bl	8001aa0 <_fstat>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	d102      	bne.n	800dd28 <_fstat_r+0x1c>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	b103      	cbz	r3, 800dd28 <_fstat_r+0x1c>
 800dd26:	6023      	str	r3, [r4, #0]
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	bf00      	nop
 800dd2c:	2000065c 	.word	0x2000065c

0800dd30 <_isatty_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d06      	ldr	r5, [pc, #24]	@ (800dd4c <_isatty_r+0x1c>)
 800dd34:	2300      	movs	r3, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	4608      	mov	r0, r1
 800dd3a:	602b      	str	r3, [r5, #0]
 800dd3c:	f7f3 febf 	bl	8001abe <_isatty>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_isatty_r+0x1a>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_isatty_r+0x1a>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	2000065c 	.word	0x2000065c

0800dd50 <_init>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	bf00      	nop
 800dd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd56:	bc08      	pop	{r3}
 800dd58:	469e      	mov	lr, r3
 800dd5a:	4770      	bx	lr

0800dd5c <_fini>:
 800dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5e:	bf00      	nop
 800dd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd62:	bc08      	pop	{r3}
 800dd64:	469e      	mov	lr, r3
 800dd66:	4770      	bx	lr
